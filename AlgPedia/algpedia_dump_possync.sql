-- MySQL dump 10.14  Distrib 5.5.31-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: AlgPedia
-- ------------------------------------------------------
-- Server version	5.5.31-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `algorithm_algorithm`
--

DROP TABLE IF EXISTS `algorithm_algorithm`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_algorithm` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `description` longtext NOT NULL,
  `classification_id` int(11) DEFAULT NULL,
  `uri` varchar(200) NOT NULL,
  `visible` tinyint(1) NOT NULL,
  `reputation` double DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_algorithm_d3dde821` (`classification_id`),
  CONSTRAINT `classification_id_refs_id_61331f30` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=113 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_algorithm`
--

LOCK TABLES `algorithm_algorithm` WRITE;
/*!40000 ALTER TABLE `algorithm_algorithm` DISABLE KEYS */;
INSERT INTO `algorithm_algorithm` VALUES (1,'Fifo\n','FIFO is an acronym for First In, First Out, which is an abstraction related to ways of organizing and manipulation of data relative to time and prioritization. This expression describes the principle of a queue processing technique or servicing conflicting demands by ordering process by first-come, first-served (FCFS) behaviour: where the persons leave the queue in the order they arrive, or waiting one\'s turn at a traffic control signal.',5,'http://dbpedia.org/resource/FIFO',1,NULL),(2,'Cycle Detection\n','In computer science, cycle detection is the algorithmic problem of finding a cycle in a sequence of iterated function values.',14,'http://dbpedia.org/resource/Cycle_detection',1,NULL),(3,'Multiply With Carry\n','In computer science, multiply-with-carry (MWC) is a method invented by George Marsaglia for generating sequences of random integers based on an initial set from two to many thousands of randomly chosen seed values. The main advantages of the MWC method are that it invokes simple computer integer arithmetic and leads to very fast generation of sequences of random numbers with immense periods, ranging from around 260 to 22000000.',18,'http://dbpedia.org/resource/Multiply-with-carry',1,NULL),(4,'Random Password Generator\n','A random password generator is software program or hardware device that takes input from a random or pseudo-random number generator and automatically generates a password. Random passwords can be generated manually, using simple sources of randomness such as dice or coins, or they can be generated using a computer.',16,'http://dbpedia.org/resource/Random_password_generator',1,NULL),(5,'Left Recursion\n','In the formal language theory of computer science, left recursion is a special case of recursion.',2,'http://dbpedia.org/resource/Left_recursion',1,NULL),(6,'Longitudinal Redundancy Check\n','In telecommunication, a longitudinal redundancy check (LRC) or horizontal redundancy check is a form of redundancy check that is applied independently to each of a parallel group of bit streams. The data must be divided into transmission blocks, to which the additional check data is added.',4,'http://dbpedia.org/resource/Longitudinal_redundancy_check',1,NULL),(7,'Fast Inverse Square Root\n','Fast inverse square root (sometimes referred to as Fast InvSqrt() or by the hexadecimal constant 0x5f3759df) is a method of calculating x−½, the reciprocal (or multiplicative inverse) of a square root for a 32-bit floating point number in IEEE 754 floating point format. The algorithm was probably developed at Silicon Graphics in the early 1990s, and an implementation appeared in 1999 in the Quake III Arena source code, but the method did not appear on public forums such as Usenet until 2002 or 2003.[1] At the time, the primary advantage of the algorithm came from avoiding computationally expensive floating point operations in favor of integer operations. Inverse square roots are used to compute angles of incidence and reflection for lighting and shading in computer graphics.',8,'http://dbpedia.org/resource/Fast_inverse_square_root',1,NULL),(8,'Luhn Algorithm\n','The Luhn algorithm or Luhn formula, also known as the \"modulus 10\" or \"mod 10\" algorithm, is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers in US and Canadian Social Insurance Numbers. It was created by IBM scientist Hans Peter Luhn and described in U.S. Patent No. 2,950,048, filed on January 6, 1954, and granted on August 23, 1960.',4,'http://dbpedia.org/resource/Luhn_algorithm',1,NULL),(9,'Recursion (computer Science)\n','Recursion in computer science is a method where the solution to a problem depends on solutions to smaller instances of the same problem (as opposed to iteration).[1] The approach can be applied to many types of problems, and recursion is one of the central ideas of computer science.[2]',2,'http://dbpedia.org/resource/Recursion_(computer_science)',1,NULL),(10,'Minimax\n','Minimax (sometimes minmax) is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario. Alternatively, it can be thought of as maximizing the minimum gain (maximin). Originally formulated for two-player zero-sum game theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision making in the presence of uncertainty.',13,'http://dbpedia.org/resource/Minimax',1,NULL),(11,'Counting Sort\n','In computer science, counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence. Its running time is linear in the number of items and the difference between the maximum and minimum key values, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can handle larger keys more efficiently.[1][2][3]',7,'http://dbpedia.org/resource/Counting_sort',1,NULL),(12,'Gradient Descent\n','Gradient descent is a first-order optimization algorithm. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or of the approximate gradient) of the function at the current point. If instead one takes steps proportional to the positive of the gradient, one approaches a local maximum of that function; the procedure is then known as gradient ascent.',13,'http://dbpedia.org/resource/Gradient_descent',1,NULL),(13,'Insertion Sort\n','Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:',7,'http://dbpedia.org/resource/Insertion_sort',1,NULL),(14,'Merge Sort\n','O(n log n) typical,',7,'http://dbpedia.org/resource/Merge_sort',1,NULL),(15,'Quicksort\n','Quicksort, or partition-exchange sort, is a sorting algorithm developed by Tony Hoare that, on average, makes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Quicksort is often faster in practice than other O(n log n) algorithms.[1] Additionally, quicksort\'s sequential and localized memory references work well with a cache. Quicksort is a comparison sort and, in efficient implementations, is not a stable sort. Quicksort can be implemented with an in-place partitioning algorithm, so the entire sort can be done with only O(log n) additional space used by the stack during the recursion.[2]',7,'http://dbpedia.org/resource/Quicksort',1,NULL),(16,'Radix Sort\n','In computer science, radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by the individual digits which share the same significant position and value. A positional notation is required, but because integers can represent strings of characters (e.g., names or dates) and specially formatted floating point numbers, radix sort is not limited to integers. Radix sort dates back as far as 1887 to the work of Herman Hollerith on tabulating machines.[1]',7,'http://dbpedia.org/resource/Radix_sort',1,NULL),(17,'Recursion\n','Recursion is the process of repeating items in a self-similar way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, in which it refers to a method of defining functions in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.',2,'http://dbpedia.org/resource/Recursion',1,NULL),(18,'Selection Sort\n','In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.',7,'http://dbpedia.org/resource/Selection_sort',1,NULL),(19,'Mutual Recursion\n','In mathematics and computer science, mutual recursion is a form of recursion where two mathematical or computational objects, such as functions or data types, are defined in terms of each other.[1] Mutual recursion is very common in functional programming and in some problem domains, such as recursive descent parsers, where the data types are naturally mutually recursive, but is uncommon in other domains.',2,'http://dbpedia.org/resource/Mutual_recursion',1,NULL),(20,'Shellsort\n','Shellsort, also known as Shell sort or Shell\'s method, is an in-place comparison sort. It generalizes an exchanging sort, such as insertion or bubble sort, by starting the comparison and exchange of elements with elements that are far apart before finishing with neighboring elements. Starting with far apart elements can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959.[1][2] The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.',7,'http://dbpedia.org/resource/Shellsort',1,NULL),(21,'Polymorphic Recursion\n','In computer science, polymorphic recursion (also referred to as Milner–Mycroft typability or the Milner–Mycroft calculus) refers to a recursive parametrically polymorph function where the type parameter changes with each recursive invocation made instead of staying constant. Type inference for polymorphic recursion is equivalent to semi-unification and thefore undecidable and requires the use of a semi-algorithm or programmer supplied type annotations.[1]',2,'http://dbpedia.org/resource/Polymorphic_recursion',1,NULL),(22,'Newton\'s Method\n','In numerical analysis, Newton\'s method (also known as the Newton–Raphson method), named after Isaac Newton and Joseph Raphson, is a method for finding successively better approximations to the roots (or zeroes) of a real-valued function.',13,'http://dbpedia.org/resource/Newton\'s_method',1,NULL),(23,'Newton\'s Method\n','In numerical analysis, Newton\'s method (also known as the Newton–Raphson method), named after Isaac Newton and Joseph Raphson, is a method for finding successively better approximations to the roots (or zeroes) of a real-valued function.',8,'http://dbpedia.org/resource/Newton\'s_method',1,NULL),(24,'Fold (higher Order Function)\n','In functional programming, fold – also known variously as reduce, accumulate, aggregate, compress, or inject – refers to a family of higher-order functions that analyze a recursive data structure and recombine through use of a given combining operation the results of recursively processing its constituent parts, building up a return value. Typically, a fold is presented with a combining function, a top node of a data structure, and possibly some default values to be used under certain conditions. The fold then proceeds to combine elements of the data structure\'s hierarchy, using the function in a systematic way.',2,'http://dbpedia.org/resource/Fold_(higher-order_function)',1,NULL),(25,'Golden Section Search\n','The golden section search is a technique for finding the extremum (minimum or maximum) of a strictly unimodal function by successively narrowing the range of values inside which the extremum is known to exist. The technique derives its name from the fact that the algorithm maintains the function values for triples of points whose distances form a golden ratio. The algorithm is the limit of Fibonacci search (also described below) for a large number of function evaluations. Fibonacci search and Golden section search were discovered by Kiefer (1953). (see also Avriel and Wilde (1966)).',13,'http://dbpedia.org/resource/Golden_section_search',1,NULL),(26,'Linear Feedback Shift Register','In computing, a linear feedback shift register (LFSR) is a shift register whose input bit is a linear function of its previous state.',16,'http://dbpedia.org/resource/Linear_feedback_shift_register',1,NULL),(27,'Linear Feedback Shift Register','In computing, a linear feedback shift register (LFSR) is a shift register whose input bit is a linear function of its previous state.',18,'http://dbpedia.org/resource/Linear_feedback_shift_register',1,NULL),(28,'Brent\'s Method\n','In numerical analysis, Brent\'s method is a complicated but popular root-finding algorithm combining the bisection method, the secant method and inverse quadratic interpolation. It has the reliability of bisection but it can be as quick as some of the less reliable methods. The idea is to use the secant method or inverse quadratic interpolation if possible, because they converge faster, but to fall back to the more robust bisection method if necessary. Brent\'s method is due to Richard Brent (1973) and builds on an earlier algorithm of Theodorus Dekker (1969).',8,'http://dbpedia.org/resource/Brent\'s_method',1,NULL),(29,'Odd–even Sort\n','In computing, an odd–even sort or odd–even transposition sort (also known as brick sort[1]) is a relatively simple sorting algorithm, developed originally for use on parallel processors with local interconnections. It is a comparison sort related to bubble sort, with which it shares many characteristics. It functions by comparing all (odd, even)-indexed pairs of adjacent elements in the list and, if a pair is in the wrong order (the first is larger than the second) the elements are switched. The next step repeats this for (even, odd)-indexed pairs (of adjacent elements). Then it alternates between (odd, even) and (even, odd) steps until the list is sorted.',7,'http://dbpedia.org/resource/Odd%E2%80%93even_sort',1,NULL),(30,'Tail Call\n','In computer science, a tail call is a subroutine call that happens inside another procedure as its final action; it may produce a return value which is then immediately returned by the calling procedure. The call site is then said to be in tail position, i.e. at the end of the calling procedure. If any call that a subroutine performs, such that it might eventually lead to this same subroutine being called again down the call chain, is in tail position, such a subroutine is said to be tail-recursive, which is a special case of recursion. Tail calls need not be recursive – the call can be to another function – but tail recursion is particularly useful, and often easier to handle in implementations.',2,'http://dbpedia.org/resource/Tail_call',1,NULL),(31,'Proxmap Sort\n','ProxmapSort, or Proxmap sort, is a sorting algorithm that works by partitioning an array of data items, or keys, into a number of \"subarrays\" (termed buckets, in similar sorts). The name is short for computing a \"proximity map,\" which indicates for each key K the beginning of a subarray where K will reside in the final sorted order. Keys are placed into each subarray using insertion sort. If keys are \"well distributed\" among the subarrays, sorting occurs in linear time, much faster than comparison-based sorting, which can do no better than . The computational complexity estimates involve the number of subarrays and the proximity mapping function, the \"map key,\" used. It is a form of bucket and radix sort. The algorithm scales up well as the number of data become large.',7,'http://dbpedia.org/resource/Proxmap_sort',1,NULL),(32,'Maximum Subarray Problem\n','In computer science, the maximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers (containing at least one positive number) which has the largest sum. For example, for the sequence of values −2, 1, −3, 4, −1, 2, 1, −5, 4; the contiguous subarray with the largest sum is 4, −1, 2, 1, with sum 6.',13,'http://dbpedia.org/resource/Maximum_subarray_problem',1,NULL),(33,'Discrete Wavelet Transform\n','In numerical analysis and functional analysis, a discrete wavelet transform (DWT) is any wavelet transform for which the wavelets are discretely sampled. As with other wavelet transforms, a key advantage it has over Fourier transforms is temporal resolution: it captures both frequency and location information (location in time).',1,'http://dbpedia.org/resource/Discrete_wavelet_transform',1,NULL),(34,'Hamming(7,4)\n','In coding theory, Hamming(7,4) is a linear error-correcting code that encodes 4 bits of data into 7 bits by adding 3 parity bits. It is a member of a larger family of Hamming codes, but the term Hamming code often refers to this specific code that Richard W. Hamming introduced in 1950. At the time, Hamming worked at Bell Telephone Laboratories and was frustrated with the error-prone punched card reader, which is why he started working on error-correcting codes.[1]',4,'http://dbpedia.org/resource/Hamming(7,4)',1,NULL),(35,'Steffensen\'s Method\n','In numerical analysis, Steffensen\'s method is a root-finding method, similar to Newton\'s method, named after Johan Frederik Steffensen. Steffensen\'s method also achieves quadratic convergence, but without using derivatives as Newton\'s method does.',8,'http://dbpedia.org/resource/Steffensen\'s_method',1,NULL),(36,'Multivariate Kernel Density Es','Kernel density estimation is a nonparametric technique for density estimation i.e., estimation of probability density functions, which is one of the fundamental questions in statistics. It can be viewed as a generalisation of histogram density estimation with improved statistical properties. Apart from histograms, other types of density estimators include parametric, spline, wavelet and Fourier series. Kernel density estimators were first introduced in the scientific literature for univariate data in the 1950s and 1960s[1][2] and subsequently have been widely adopted. It was soon recognised that analogous estimators for multivariate data would be an important addition to multivariate statistics. Based on research carried out in the 1990s and 2000s, multivariate kernel density estimation has reached a level of maturity comparable to their univariate counterparts.[3]',21,'http://dbpedia.org/resource/Multivariate_kernel_density_estimation',1,NULL),(37,'Viterbi Algorithm\n','The Viterbi algorithm is a dynamic programming algorithm for finding the most likely sequence of hidden states – called the Viterbi path – that results in a sequence of observed events, especially in the context of Markov information sources and hidden Markov models.',4,'http://dbpedia.org/resource/Viterbi_algorithm',1,NULL),(38,'Corecursion\n','In computer science, corecursion is a type of operation that is dual to recursion. Whereas recursion works analytically, starting on data further from a base case and breaking it down into smaller data and repeating until one reaches a base case, corecursion works synthetically, starting from a base case and building it up, iteratively producing data further removed from a base case. Put simply, corecursive algorithms use the data that they themselves produce, bit by bit, as they become available, and needed, to produce further bits of data. Some authors refer to this as generative recursion.',2,'http://dbpedia.org/resource/Corecursion',1,NULL),(39,'Secant Method\n','In numerical analysis, the secant method is a root-finding algorithm that uses a succession of roots of secant lines to better approximate a root of a function f. The secant method can be thought of as a finite difference approximation of Newton\'s method. However, the method was developed independently of Newton\'s method, and predated the latter by over 3,000 years.[1]',8,'http://dbpedia.org/resource/Secant_method',1,NULL),(40,'Backpropagation\n','Backpropagation, an abbreviation for \"backward propagation of errors\", is a common method of training artificial neural networks. From a desired output, the network learns from many inputs, similar to the way a child learns to identify a dog from examples of dogs.',12,'http://dbpedia.org/resource/Backpropagation',1,NULL),(41,'Comb Sort\n','Comb sort is a relatively simple sorting algorithm originally designed by Włodzimierz Dobosiewicz in 1980.[1] Later it was rediscovered by Stephen Lacey and Richard Box in 1991.[2] Comb sort improves on bubble sort.',7,'http://dbpedia.org/resource/Comb_sort',1,NULL),(42,'Gnome Sort\n','Gnome sort (Stupid sort), originally proposed by Hamid Sarbazi-Azad in 2000 and called Stupid sort (not to be confused with Bogosort), and then later on described by Dick Grune and named \"Gnome sort\",[1] is a sorting algorithm which is similar to insertion sort, except that moving an element to its proper place is accomplished by a series of swaps, as in bubble sort. It is conceptually simple, requiring no nested loops. The running time is O, but tends towards O(n) if the list is initially almost sorted.[2] In practice the algorithm can run as fast as Insertion sort[citation needed]. The average runtime is .',7,'http://dbpedia.org/resource/Gnome_sort',1,NULL),(43,'Fisher–yates Shuffle\n','The Fisher–Yates shuffle (named after Ronald Fisher and Frank Yates), also known as the Knuth shuffle (after Donald Knuth), is an algorithm for generating a random permutation of a finite set—in plain terms, for randomly shuffling the set. A variant of the Fisher–Yates shuffle, known as Sattolo\'s algorithm, may be used to generate random cycles of length n instead. Properly implemented, the Fisher–Yates shuffle is unbiased, so that every permutation is equally likely. The modern version of the algorithm is also rather efficient, requiring only time proportional to the number of items being shuffled and no additional storage space.',14,'http://dbpedia.org/resource/Fisher%E2%80%93Yates_shuffle',1,NULL),(44,'Infinite Loop\n','An infinite loop (also known as an endless loop or unproductive loop) is a sequence of instructions in a computer program which loops endlessly, either due to the loop having no terminating condition, having one that can never be met, or one that causes the loop to start over. In older operating systems with cooperative multitasking, infinite loops normally caused the entire system to become unresponsive. With the now-prevalent preemptive multitasking model, infinite loops usually cause the program to consume all available processor time, but can usually be terminated by the user. Busy-wait loops are also sometimes called \"infinite loops\". One possible cause of a computer \"freezing\" is an infinite loop; others include deadlock and access violations.',2,'http://dbpedia.org/resource/Infinite_loop',1,NULL),(45,'Shrinking Generator\n','In cryptography, the shrinking generator is a form of pseudorandom number generator intended to be used in a stream cipher. It was published in Crypto 1993 by Don Coppersmith, Hugo Krawczyk, and Yishay Mansour.',18,'http://dbpedia.org/resource/Shrinking_generator',1,NULL),(46,'Marsaglia Polar Method\n','The polar method (attributed to George Marsaglia, 1964[1]) is a pseudo-random number sampling method for generating a pair of independent standard normal random variables. While it is superior to the Box–Muller transform[citation needed], the Ziggurat algorithm is even more efficient.[2]',18,'http://dbpedia.org/resource/Marsaglia_polar_method',1,NULL),(47,'Cycle Sort\n','Cycle sort is an in-place, unstable sorting algorithm, a comparison sort that is theoretically optimal in terms of the total number of writes to the original array, unlike any other in-place sorting algorithm. It is based on the idea that the permutation to be sorted can be factored into cycles, which can individually be rotated to give a sorted result.',7,'http://dbpedia.org/resource/Cycle_sort',1,NULL),(48,'American Flag Sort\n','An american flag sort is an efficient, in-place variant of radix sort that distributes items into hundreds of buckets. Non-comparative sorting algorithms such as radix sort and american flag sort are typically used to sort large objects such as strings, for which comparison is not a unit-time operation.[1] American flag sort iterates through the bits of the objects, considering several bits of each object at a time. For each set of bits, american flag sort makes two passes through the array of objects: first to count the number of objects that will fall in each bin, and second to place each object in its bucket. This works especially well when sorting a byte at a time, using 256 buckets. With some optimizations, it is twice as fast as quicksort for large sets of strings.[1]',7,'http://dbpedia.org/resource/American_flag_sort',1,NULL),(49,'Bitonic Sorter\n','Bitonic mergesort is a parallel algorithm for sorting. It is also used as a construction method for building a sorting network. The algorithm was devised by Ken Batcher. The resulting sorting networks consist of  comparators and have a delay of , where  is the number of items to be sorted.[1]',7,'http://dbpedia.org/resource/Bitonic_sorter',1,NULL),(50,'Cma Es\n','CMA-ES stands for Covariance Matrix Adaptation Evolution Strategy. Evolution strategies (ES) are stochastic, derivative-free methods for numerical optimization of non-linear or non-convex continuous optimization problems. They belong to the class of evolutionary algorithms and evolutionary computation. An evolutionary algorithm is broadly based on the principle of biological evolution, namely the repeated interplay of variation (via mutation and recombination) and selection: in each generation (iteration) new individuals (candidate solutions, denoted as ) are generated by variation, usually in a stochastic way, and then some individuals are selected for the next generation based on their fitness or objective function value . Like this, over the generation sequence, individuals with better and better -values are generated.',26,'http://dbpedia.org/resource/CMA-ES',1,NULL),(51,'Cma Es\n','CMA-ES stands for Covariance Matrix Adaptation Evolution Strategy. Evolution strategies (ES) are stochastic, derivative-free methods for numerical optimization of non-linear or non-convex continuous optimization problems. They belong to the class of evolutionary algorithms and evolutionary computation. An evolutionary algorithm is broadly based on the principle of biological evolution, namely the repeated interplay of variation (via mutation and recombination) and selection: in each generation (iteration) new individuals (candidate solutions, denoted as ) are generated by variation, usually in a stochastic way, and then some individuals are selected for the next generation based on their fitness or objective function value . Like this, over the generation sequence, individuals with better and better -values are generated.',13,'http://dbpedia.org/resource/CMA-ES',1,NULL),(52,'Dutch National Flag Problem\n','The Dutch national flag problem is a famous computer science related programming problem proposed by Edsger Dijkstra. The flag of the Netherlands consists of three colours: red, white and blue. Given balls of these three colours arranged randomly in a line (the actual number of balls does not matter), the task is to arrange them such that all balls of the same colour are together and their collective colour groups are in the correct order.',7,'http://dbpedia.org/resource/Dutch_national_flag_problem',1,NULL),(53,'Library Sort\n','Library sort, or gapped insertion sort is a sorting algorithm that uses an insertion sort, but with gaps in the array to accelerate subsequent insertions. The name comes from an analogy:[1]',7,'http://dbpedia.org/resource/Library_sort',1,NULL),(54,'Schwartzian Transform\n','In computer science, the Schwartzian transform is a Perl programming idiom used to improve the efficiency of sorting a list of items. This idiom is appropriate for comparison-based sorting when the ordering is actually based on the ordering of a certain property (the key) of the elements, where computing that property is an intensive operation that should be performed a minimal number of times. The Schwartzian Transform is notable in that it does not use named temporary arrays.',7,'http://dbpedia.org/resource/Schwartzian_transform',1,NULL),(55,'Spreadsort\n','Spreadsort is a sorting algorithm invented by Steven J. Ross in 2002.[1] It combines concepts from distribution-based sorts, such as radix sort and bucket sort, with partitioning concepts from comparison sorts such as quicksort and mergesort. In experimental results it was shown to be highly efficient, often outperforming traditional algorithms such as quicksort, particularly on distributions exhibiting structure.',7,'http://dbpedia.org/resource/Spreadsort',1,NULL),(56,'Stooge Sort\n','Stooge sort is a recursive sorting algorithm with a time complexity of O(nlog 3 / log 1.5 ) = O(n2.7095...). The running time of the algorithm is thus extremely slow compared to efficient sorting algorithms, such as Merge sort, and is even slower than Bubble sort, a canonical example of a fairly inefficient and simple sort.',7,'http://dbpedia.org/resource/Stooge_sort',1,NULL),(57,'Strand Sort\n','Strand sort is a sorting algorithm. It works by repeatedly pulling sorted sublists out of the list to be sorted and merging them with a result array. Each iteration through the unsorted list pulls out a series of elements which were already sorted, and merges those series together.',7,'http://dbpedia.org/resource/Strand_sort',1,NULL),(58,'Tree Sort\n','O(n2) (unbalanced)',7,'http://dbpedia.org/resource/Tree_sort',1,NULL),(59,'Middle Square Method\n','In mathematics, the middle-square method is a method of generating pseudorandom numbers. In practice it is not a good method, since its period is usually very short and it has some crippling weaknesses, such as the output sequence always converging to zero.',18,'http://dbpedia.org/resource/Middle-square_method',1,NULL),(60,'Batcher Odd–even Mergesort\n','Batcher\'s odd–even mergesort is a generic construction devised by Ken Batcher for sorting networks of size O(n (log n)2) and depth O((log n)2), where n is the number of items to be sorted. Although it is not asymptotically optimal, Knuth concluded in 1998, with respect to the AKS network that \"Batcher\'s method is much better, unless n exceeds the total memory capacity of all computers on earth!\"[1]',7,'http://dbpedia.org/resource/Batcher_odd%E2%80%93even_mergesort',1,NULL),(61,'Berlekamp–massey Algorithm\n','The Berlekamp–Massey algorithm is an algorithm that will find the shortest linear feedback shift register (LFSR) for a given binary output sequence. The algorithm will also find the minimal polynomial of a linearly recurrent sequence in an arbitrary field.[1]',4,'http://dbpedia.org/resource/Berlekamp%E2%80%93Massey_algorithm',1,NULL),(62,'Randomized Algorithm\n','Random binary tree · Treap',23,'http://dbpedia.org/resource/Randomized_algorithm',1,NULL),(63,'Randomized Algorithm\n','Random binary tree · Treap',25,'http://dbpedia.org/resource/Randomized_algorithm',1,NULL),(64,'Xorshift\n','Xorshift random number generators form a class of pseudorandom number generators that was discovered by George Marsaglia.[1] They generate the next number in their sequence by repeatedly taking the exclusive or of a number with a bit shifted version of itself. This makes them extremely fast on modern computer architectures. The xor shift primitive is invertible.[2]They are a subclass of linear feedback shift registers, but their simple implementation typically makes them faster and use less space.[3] However, the parameters have to be chosen very carefully in order to achieve a long period.[4]',18,'http://dbpedia.org/resource/Xorshift',1,NULL),(65,'Forward–backward Algorithm\n','The forward–backward algorithm is an inference algorithm for hidden Markov models which computes the posterior marginals of all hidden state variables given a sequence of observations/emissions , i.e. it computes, for all hidden state variables , the distribution . This inference task is usually called smoothing. The algorithm makes use of the principle of dynamic programming to efficiently compute the values that are required to obtain the posterior marginal distributions in two passes. The first pass goes forward in time while the second goes backward in time; hence the name forward–backward algorithm.',4,'http://dbpedia.org/resource/Forward%E2%80%93backward_algorithm',1,NULL),(66,'Forward–backward Algorithm\n','The forward–backward algorithm is an inference algorithm for hidden Markov models which computes the posterior marginals of all hidden state variables given a sequence of observations/emissions , i.e. it computes, for all hidden state variables , the distribution . This inference task is usually called smoothing. The algorithm makes use of the principle of dynamic programming to efficiently compute the values that are required to obtain the posterior marginal distributions in two passes. The first pass goes forward in time while the second goes backward in time; hence the name forward–backward algorithm.',12,'http://dbpedia.org/resource/Forward%E2%80%93backward_algorithm',1,NULL),(67,'Z Order Curve\n','In mathematical analysis and computer science, Z-order, Morton order, or Morton code is a function which maps multidimensional data to one dimension while preserving locality of the data points. It was introduced in 1966 by G. M. Morton.[1] The z-value of a point in multidimensions is simply calculated by interleaving the binary representations of its coordinate values. Once the data are sorted into this ordering, any one-dimensional data structure can be used such as binary search trees, B-trees, skip lists or (with low significant bits truncated) hash tables. The resulting ordering can equivalently be described as the order one would get from a depth-first traversal of a quadtree; because of its close connection with quadtrees, the Z-ordering can be used to efficiently construct quadtrees and related higher dimensional data structures.[2]',19,'http://dbpedia.org/resource/Z-order_curve',1,NULL),(68,'Convolutional Code\n','In telecommunication, a convolutional code is a type of error-correcting code in which',4,'http://dbpedia.org/resource/Convolutional_code',1,NULL),(69,'Lehmer Random Number Generator','The Lehmer random number generator[1] (named after D. H. Lehmer), sometimes also referred to as the Park–Miller random number generator (after Stephen K. Park and Keith W. Miller), is a variant of linear congruential generator (LCG) that operates in multiplicative group of integers modulo n. A general formula of a random number generator (RNG) of this type is:',18,'http://dbpedia.org/resource/Lehmer_random_number_generator',1,NULL),(70,'Midpoint Circle Algorithm\n','In computer graphics, the midpoint circle algorithm is an algorithm used to determine the points needed for drawing a circle. The algorithm is a variant of Bresenham\'s line algorithm, and is thus sometimes known as Bresenham\'s circle algorithm, although not actually invented by Jack E. Bresenham. The algorithm can be generalized to conic sections.[1]',10,'http://dbpedia.org/resource/Midpoint_circle_algorithm',1,NULL),(71,'Fixed Point Combinator\n','In computer science, a fixed-point combinator (or fixpoint combinator[1]) is a higher-order function that computes a fixed point of other functions. If the effect of the other function is to advance a particular computation one step, or to do nothing if the computation is finished, then the fixed point will be a function that advances the same computation by as many steps as required to complete it. This can be used for anonymous recursion: to construct recursive anonymous functions.',2,'http://dbpedia.org/resource/Fixed-point_combinator',1,NULL),(72,'Methods Of Computing Square Ro','In numerical analysis, a branch of mathematics, there are several square root algorithms or methods for calculating the principal square root of a nonnegative real number. For the square roots of a negative or complex number, see below.',8,'http://dbpedia.org/resource/Methods_of_computing_square_roots',1,NULL),(73,'Algorithms For Calculating Var','Algorithms for calculating variance play a major role in statistical computing. A key problem in the design of good algorithms for this problem is that formulas for the variance may involve sums of squares, which can lead to numerical instability as well as to arithmetic overflow when dealing with large values.',33,'http://dbpedia.org/resource/Algorithms_for_calculating_variance',1,NULL),(74,'Interpolation Search\n','Interpolation search (sometimes referred to as extrapolation search) is an algorithm for searching for a given key value in an indexed array that has been ordered by the values of the key. It parallels how humans search through a telephone book for a particular name, the key value by which the book\'s entries are ordered. In each search step it calculates where in the remaining search space the sought item might be, based on the key values at the bounds of the search space and the value of the sought key, usually via a linear interpolation. The key value actually found at this estimated position is then compared to the key value being sought. If it is not equal, then depending on the comparison, the remaining search space is reduced to the part before or after the estimated position. This method will only work if calculations on the size of differences between key values are sensible.',38,'http://dbpedia.org/resource/Interpolation_search',1,NULL),(75,'Escape Character\n','In computing and telecommunication, an escape character is a character which invokes an alternative interpretation on subsequent characters in a character sequence. An escape character is a particular case of metacharacters. Generally, the judgement of whether something is an escape character or not depends on context.',31,'http://dbpedia.org/resource/Escape_character',1,NULL),(76,'Luhn Algorithm\n','The Luhn algorithm or Luhn formula, also known as the \"modulus 10\" or \"mod 10\" algorithm, is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers in US and Canadian Social Insurance Numbers. It was created by IBM scientist Hans Peter Luhn and described in U.S. Patent No. 2,950,048, filed on January 6, 1954, and granted on August 23, 1960.',42,'http://dbpedia.org/resource/Luhn_algorithm',1,NULL),(77,'Multiplication Algorithm\n','A multiplication algorithm is an algorithm (or method) to multiply two numbers. Depending on the size of the numbers, different algorithms are in use. Efficient multiplication algorithms have existed since the advent of the decimal system.',40,'http://dbpedia.org/resource/Multiplication_algorithm',1,NULL),(78,'Cksum\n','cksum is a command in Unix-like operating systems that generates a checksum value for a file or stream of data. The cksum command reads each file given in its arguments, or standard input if no arguments are provided, and outputs the file\'s CRC checksum and byte count.',42,'http://dbpedia.org/resource/Cksum',1,NULL),(79,'Buzen\'s Algorithm\n','In queueing theory, a discipline within the mathematical theory of probability, Buzen\'s algorithm (or convolution algorithm) is an algorithm for calculating the normalization constant G(N) in the Gordon–Newell theorem. This method was first proposed by Jeffrey P. Buzen in 1973.[1] Computing G(N) is required to compute the stationary probability distribution of a closed queueing network.[2]',33,'http://dbpedia.org/resource/Buzen\'s_algorithm',1,NULL),(80,'Minimax\n','Minimax (sometimes minmax) is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario. Alternatively, it can be thought of as maximizing the minimum gain (maximin). Originally formulated for two-player zero-sum game theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision making in the presence of uncertainty.',38,'http://dbpedia.org/resource/Minimax',1,NULL),(81,'Binary Search Algorithm\n','In computer science, a binary search or half-interval search algorithm finds the position of a specified input value (the search \"key\") within an array sorted by key value.[1][2] In each step, the algorithm compares the search key value with the key value of the middle element of the array. If the keys match, then a matching element has been found and its index, or position, is returned. Otherwise, if the search key is less than the middle element\'s key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the search key is greater, on the sub-array to the right. If the remaining array to be searched is empty, then the key cannot be found in the array and a special \"not found\" indication is returned.',38,'http://dbpedia.org/resource/Binary_search_algorithm',1,NULL),(82,'Computus\n','Computus (Latin for \"computation\") is the calculation of the date of Easter in terms of, first, the Julian and, later, the Gregorian calendar. The name has been used for this procedure since the early Middle Ages, as it was considered the most important computation of the age.',45,'http://dbpedia.org/resource/Computus',1,NULL),(83,'Delimiter\n','A delimiter is a sequence of one or more characters used to specify the boundary between separate, independent regions in plain text or other data streams.[1] An example of a delimiter is the comma character, which acts as a field delimiter in a sequence of comma-separated values.',31,'http://dbpedia.org/resource/Delimiter',1,NULL),(84,'International Standard Book Nu','The International Standard Book Number (ISBN) is a unique[1][2] numeric commercial book identifier based upon the 9-digit Standard Book Numbering (SBN) code created by Gordon Foster, Emeritus Professor of Statistics at Trinity College, Dublin,[3] for the booksellers and stationers W. H. Smith and others in 1965.[4]',42,'http://dbpedia.org/resource/International_Standard_Book_Number',1,NULL),(85,'Pseudocode\n','Pseudocode is an informal high-level description of the operating principle of a computer program or other algorithm.',44,'http://dbpedia.org/resource/Pseudocode',1,NULL),(86,'Regular Expression\n','In computing, a regular expression (abbreviated regex or regexp) is a sequence of text characters, some of which are understood to be metacharacters with symbolic meaning, and some of which have their literal meaning, that together can automatically identify textual material of a given pattern, or process a number of instances of it that can vary from a precise equality to a very general similarity of the pattern. The pattern sequence itself is an expression that is a statement in a language designed specifically to represent prescribed targets in the most concise and flexible way to direct the automation of text processing of general text files, specific textual forms, or of random input strings. A regular expression matches a pattern to a string. It is employed in a search to identify text for further processing, such as displaying the match, or altering it; or it is employed to simply inform of the location or count. The concept arose in the 1950s, when Kleene formalized the description of a regular language, and came into common use with the Unix text processing utilities ed, an editor, and grep (global regular expression print), a filter.',31,'http://dbpedia.org/resource/Regular_expression',1,NULL),(87,'Rsync\n','rsync is a utility software and network protocol for Unix-like systems (with ports to Windows) that synchronizes files and directories from one location to another while minimizing data transfer by using delta encoding when appropriate. Quoting the official website: \"rsync is a file transfer program for Unix systems. rsync uses the \'rsync algorithm\' which provides a very fast method for bringing remote files into sync.\"[3] An important feature of rsync not found in most similar programs/protocols is that the mirroring takes place with only one transmission in each direction.[why?][4] rsync can copy or display directory contents and copy files, optionally using compression and recursion.',46,'http://dbpedia.org/resource/Rsync',1,NULL),(88,'Double Dabble\n','In computer science, the double dabble algorithm is used to convert binary numbers into decimal (in particular, binary-coded decimal, or BCD, notation). The algorithm operates as follows:',40,'http://dbpedia.org/resource/Double_dabble',1,NULL),(89,'Diff\n','In computing, diff is a file comparison utility that outputs the differences between two files. It is typically used to show the changes between one version of a file and a former version of the same file. Diff displays the changes made per line for text files. Modern implementations also support binary files.[1] The output is called a \"diff\", or a patch, since the output can be applied with the Unix program patch. The output of similar file comparison utilities are also called a \"diff\"; like the use of the word \"grep\" for describing the act of searching, the word diff is used in jargon as a verb for calculating any difference.[2]',31,'http://dbpedia.org/resource/Diff',1,NULL),(90,'Index Mapping\n','Index mapping is a computer science term (also known as a \"trivial hash function\") that is used to describe the mapping[clarification needed] of raw data, used directly as in array index, for an array. The technique can be most effective for mapping data with a small range[clarification needed]. If the array encompasses all combinations of input, a range check is not required.',38,'http://dbpedia.org/resource/Index_mapping',1,NULL),(91,'Double Hashing\n','Double hashing is a computer programming technique used in hash tables to resolve hash collisions, cases when two different values to be searched for produce the same hash key. It is a popular collision-resolution technique in open-addressed hash tables. Double hashing is implemented in many popular libraries.',38,'http://dbpedia.org/resource/Double_hashing',1,NULL),(92,'Ida*\n','IDA*[1] is a variant of the A* search algorithm which uses iterative deepening to keep the memory usage lower than in A*. It is an informed search based on the idea of the uninformed iterative deepening depth-first search.',38,'http://dbpedia.org/resource/IDA*',1,NULL),(93,'Ida*\n','IDA*[1] is a variant of the A* search algorithm which uses iterative deepening to keep the memory usage lower than in A*. It is an informed search based on the idea of the uninformed iterative deepening depth-first search.',34,'http://dbpedia.org/resource/IDA*',1,NULL),(94,'Adler 32\n','Adler-32 is a checksum algorithm which was invented by Mark Adler in 1995,[1] and is a modification of the Fletcher checksum. Compared to a cyclic redundancy check of the same length, it trades reliability for speed (preferring the latter). Adler-32 is more reliable than Fletcher-16, and slightly less reliable than Fletcher-32.[2]',42,'http://dbpedia.org/resource/Adler-32',1,NULL),(95,'A* Search Algorithm\n','In computer science, A* (pronounced \"A star\" ( listen)) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently traversable path between points, called nodes. Noted for its performance and accuracy, it enjoys widespread use. (However, in practical travel-routing systems, it is generally outperformed by algorithms which can pre-process the graph to attain better performance.[1])',38,'http://dbpedia.org/resource/A*_search_algorithm',1,NULL),(96,'A* Search Algorithm\n','In computer science, A* (pronounced \"A star\" ( listen)) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently traversable path between points, called nodes. Noted for its performance and accuracy, it enjoys widespread use. (However, in practical travel-routing systems, it is generally outperformed by algorithms which can pre-process the graph to attain better performance.[1])',34,'http://dbpedia.org/resource/A*_search_algorithm',1,NULL),(97,'Mtd F\n','MTD(f), is a minimax search algorithm, developed in 1994 by Aske Plaat, Jonathan Schaeffer, Wim Pijls, and Arie de Bruin. Experiments with tournament quality chess, checkers, and Othello programs show it to be the most efficient minimax algorithm. The name MTD(f) is an abbreviation for MTD(n,f) (Memory-enhanced Test Driver with node n and value f). It is an alternative to the alpha-beta pruning algorithm.',38,'http://dbpedia.org/resource/MTD-f',1,NULL),(98,'Ternary Search\n','A ternary search algorithm is a technique in computer science for finding the minimum or maximum of an increasing or decreasing function. A ternary search determines either that the minimum or maximum cannot be in the first third of the domain or that it cannot be in the last third of the domain, then repeats on the remaining two-thirds. A ternary search is an example of a divide and conquer algorithm (see search algorithm).',38,'http://dbpedia.org/resource/Ternary_search',1,NULL),(99,'Wang And Landau Algorithm\n','The Wang and Landau algorithm, proposed by Fugao Wang and David P. Landau,[1] is a Monte Carlo method designed to calculate the density of states of a system. The method performs a non-markovian random walk to build the density of states by quickly visiting all the available energy spectrum. The Wang and Landau algorithm is an important method to obtain the density of states required to perform a multicanonical simulation.',33,'http://dbpedia.org/resource/Wang_and_Landau_algorithm',1,NULL),(100,'Wang And Landau Algorithm\n','The Wang and Landau algorithm, proposed by Fugao Wang and David P. Landau,[1] is a Monte Carlo method designed to calculate the density of states of a system. The method performs a non-markovian random walk to build the density of states by quickly visiting all the available energy spectrum. The Wang and Landau algorithm is an important method to obtain the density of states required to perform a multicanonical simulation.',35,'http://dbpedia.org/resource/Wang_and_Landau_algorithm',1,NULL),(101,'Java Hashcode()\n','In the Java programming language, every class must provide a hashCode() method which digests the data stored in an instance of the class into a single hash value (a 32-bit signed integer). This hash is used by other code when storing or manipulating the instance - the values are intended to be evenly distributed for varied inputs in order to use in clustering. This property is important to the performance of hash tables and other data structures that store objects in groups (\"buckets\") based on their computed hash values.',42,'http://dbpedia.org/resource/Java_hashCode()',1,NULL),(102,'Md5\n','A 2009 attack by Tao Xie and Dengguo Feng breaks MD5 collision resistance in 220.96 time. This attack runs in a few seconds on a regular computer.[2]',42,'http://dbpedia.org/resource/MD5',1,NULL),(103,'Perceptron\n','In computational geometry, the perceptron is an algorithm for supervised classification of an input into one of several possible non-binary outputs. It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector describing a given input using the delta rule. The learning algorithm for perceptrons is an online algorithm, in that it processes elements in the training set one at a time.',37,'http://dbpedia.org/resource/Perceptron',1,NULL),(104,'Sma*\n','SMA* or Simplified Memory Bounded A* is a shortest path algorithm based on the A* algorithm. The main advantage of SMA* is that it uses a bounded memory, while the A* algorithm might need exponential memory. All other characteristics of SMA* are inherited from A*.',38,'http://dbpedia.org/resource/SMA*',1,NULL),(105,'Sma*\n','SMA* or Simplified Memory Bounded A* is a shortest path algorithm based on the A* algorithm. The main advantage of SMA* is that it uses a bounded memory, while the A* algorithm might need exponential memory. All other characteristics of SMA* are inherited from A*.',34,'http://dbpedia.org/resource/SMA*',1,NULL),(106,'Fletcher\'s Checksum\n','The Fletcher checksum is an algorithm for computing a position-dependent checksum devised by John G. Fletcher at Lawrence Livermore Labs in the late 1970s.[1] The objective of the Fletcher checksum was to provide error-detection properties approaching those of a cyclic redundancy check but with the lower computational effort associated with summation techniques.',42,'http://dbpedia.org/resource/Fletcher\'s_checksum',1,NULL),(107,'Luhn Mod N Algorithm\n','The Luhn mod N algorithm is an extension to the Luhn algorithm (also known as mod 10 algorithm) that allows it to work with sequences of non-numeric characters. This can be useful when a check digit is required to validate an identification string composed of letters, a combination of letters and digits or even any arbitrary set of characters.',42,'http://dbpedia.org/resource/Luhn_mod_N_algorithm',1,NULL),(108,'Find (command)\n','In computing, find is a command in the command line interpreters (shells) of DOS, OS/2 and Microsoft Windows. It is used to search for a specific text string in a file or files. The command sends the specified lines to the standard output device.',31,'http://dbpedia.org/resource/Find_(command)',1,NULL),(109,'Exponentiation By Squaring\n','In mathematics and computer programming, exponentiating by squaring is a general method for fast computation of large positive integer powers of a number, or, more generally of an element of a ring, like a polynomial of a square matrix. Some variants are commonly referred to as square-and-multiply algorithms or binary exponentiation. In additive notation the appropriate term is double-and-add. These can be of quite general use: for example in modular arithmetic or powering of matrices.',40,'http://dbpedia.org/resource/Exponentiation_by_squaring',1,NULL),(110,'Pattern Matching\n','In computer science, pattern matching is the act of checking a perceived sequence of tokens for the presence of the constituents of some pattern. In contrast to pattern recognition, the match usually has to be exact. The patterns generally have the form of either sequences or tree structures. Uses of pattern matching include outputting the locations (if any) of a pattern within a token sequence, to output some component of the matched pattern, and to substitute the matching pattern with some other token sequence (i.e., search and replace).',31,'http://dbpedia.org/resource/Pattern_matching',1,NULL),(111,'Extendible Hashing\n','Extendible hashing is a type of hash system which treats a hash as a bit string, and uses a trie for bucket lookup.[1] Because of the hierarchical nature of the system, re-hashing is an incremental operation (done one bucket at a time, as needed). This means that time-sensitive applications are less affected by table growth than by standard full-table rehashes.',38,'http://dbpedia.org/resource/Extendible_hashing',1,NULL);
/*!40000 ALTER TABLE `algorithm_algorithm` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_classification`
--

DROP TABLE IF EXISTS `algorithm_classification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_classification` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(35) NOT NULL,
  `uri` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_classification`
--

LOCK TABLES `algorithm_classification` WRITE;
/*!40000 ALTER TABLE `algorithm_classification` DISABLE KEYS */;
INSERT INTO `algorithm_classification` VALUES (1,'Digital Signal Processing','http://dbpedia.org/resource/Category:Digital_signal_processing'),(2,'Recursion','http://dbpedia.org/resource/Category:Recursion'),(3,'Data Mining','http://dbpedia.org/resource/Category:Data_mining'),(4,'Error Detection And Correction','http://dbpedia.org/resource/Category:Error_detection_and_correction'),(5,'Scheduling Algorithms','http://dbpedia.org/resource/Category:Scheduling_algorithms'),(6,'Bioinformatics Algorithms','http://dbpedia.org/resource/Category:Bioinformatics_algorithms'),(7,'Sorting Algorithms','http://dbpedia.org/resource/Category:Sorting_algorithms'),(8,'Root-Finding Algorithms','http://dbpedia.org/resource/Category:Root-finding_algorithms'),(9,'Data Clustering Algorithms','http://dbpedia.org/resource/Category:Data_clustering_algorithms'),(10,'Geometric Algorithms','http://dbpedia.org/resource/Category:Geometric_algorithms'),(11,'Algorithms On Strings','http://dbpedia.org/resource/Category:Algorithms_on_strings'),(12,'Machine Learning Algorithms','http://dbpedia.org/resource/Category:Machine_learning_algorithms'),(13,'Optimization Algorithms And Methods','http://dbpedia.org/resource/Category:Optimization_algorithms_and_methods'),(14,'Combinatorial Algorithms','http://dbpedia.org/resource/Category:Combinatorial_algorithms'),(15,'Heuristic Algorithms','http://dbpedia.org/resource/Category:Heuristic_algorithms'),(16,'Cryptographic Algorithms','http://dbpedia.org/resource/Category:Cryptographic_algorithms'),(17,'Computational Number Theory','http://dbpedia.org/resource/Category:Computational_number_theory'),(18,'Pseudorandom Number Generators','http://dbpedia.org/resource/Category:Pseudorandom_number_generators'),(19,'Database Algorithms','http://dbpedia.org/resource/Category:Database_algorithms'),(20,'Memory Management Algorithms','http://dbpedia.org/resource/Category:Memory_management_algorithms'),(21,'Computational Statistics','http://dbpedia.org/resource/Category:Computational_statistics'),(22,'Computational Group Theory','http://dbpedia.org/resource/Category:Computational_group_theory'),(23,'Randomized Algorithms','http://dbpedia.org/resource/Category:Randomized_algorithms'),(24,'Approximation Algorithms','http://dbpedia.org/resource/Category:Approximation_algorithms'),(25,'Stochastic Algorithms','http://dbpedia.org/resource/Category:Stochastic_algorithms'),(26,'Evolutionary Algorithms','http://dbpedia.org/resource/Category:Evolutionary_algorithms'),(27,'Concurrent Algorithms','http://dbpedia.org/resource/Category:Concurrent_algorithms'),(28,'Pseudo-Polynomial Time Algorithms','http://dbpedia.org/resource/Category:Pseudo-polynomial_time_algorithms'),(29,'Compression Algorithms','http://dbpedia.org/resource/Category:Compression_algorithms'),(30,'External Memory Algorithms','http://dbpedia.org/resource/Category:External_memory_algorithms'),(31,'Pattern Matching','http://dbpedia.org/resource/Category:Pattern_matching'),(32,'Quantum Algorithms','http://dbpedia.org/resource/Category:Quantum_algorithms'),(33,'Statistical Algorithms','http://dbpedia.org/resource/Category:Statistical_algorithms'),(34,'Routing Algorithms','http://dbpedia.org/resource/Category:Routing_algorithms'),(35,'Computational Physics','http://dbpedia.org/resource/Category:Computational_physics'),(36,'Distributed Algorithms','http://dbpedia.org/resource/Category:Distributed_algorithms'),(37,'Classification Algorithms','http://dbpedia.org/resource/Category:Classification_algorithms'),(38,'Search Algorithms','http://dbpedia.org/resource/Category:Search_algorithms'),(39,'Unicode Algorithms','http://dbpedia.org/resource/Category:Unicode_algorithms'),(40,'Arbitrary Precision Algorithms','http://dbpedia.org/resource/Category:Arbitrary_precision_algorithms'),(41,'Computer Algebra','http://dbpedia.org/resource/Category:Computer_algebra'),(42,'Checksum Algorithms','http://dbpedia.org/resource/Category:Checksum_algorithms'),(43,'Online Algorithms','http://dbpedia.org/resource/Category:Online_algorithms'),(44,'Algorithm Description Languages','http://dbpedia.org/resource/Category:Algorithm_description_languages'),(45,'Calendar Algorithms','http://dbpedia.org/resource/Category:Calendar_algorithms'),(46,'Networking Algorithms','http://dbpedia.org/resource/Category:Networking_algorithms'),(47,'Selection Algorithms','http://dbpedia.org/resource/Category:Selection_algorithms');
/*!40000 ALTER TABLE `algorithm_classification` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_classificationproeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_classificationproeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_classificationproeficiencyscale` (
  `proeficiencyscale_ptr_id` int(11) NOT NULL,
  `classification_id` int(11) NOT NULL,
  PRIMARY KEY (`proeficiencyscale_ptr_id`),
  KEY `algorithm_classificationproeficiencyscale_d3dde821` (`classification_id`),
  CONSTRAINT `proeficiencyscale_ptr_id_refs_id_726ec173` FOREIGN KEY (`proeficiencyscale_ptr_id`) REFERENCES `algorithm_proeficiencyscale` (`id`),
  CONSTRAINT `classification_id_refs_id_c9b52535` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_classificationproeficiencyscale`
--

LOCK TABLES `algorithm_classificationproeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_classificationproeficiencyscale` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_classificationproeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementation`
--

DROP TABLE IF EXISTS `algorithm_implementation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `algorithm_id` int(11) NOT NULL,
  `code` longtext NOT NULL,
  `programming_language_id` int(11) NOT NULL,
  `visible` tinyint(1) NOT NULL,
  `reputation` double DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_implementation_5b72ffe3` (`algorithm_id`),
  KEY `algorithm_implementation_4a49299f` (`programming_language_id`),
  CONSTRAINT `algorithm_id_refs_id_18222f3a` FOREIGN KEY (`algorithm_id`) REFERENCES `algorithm_algorithm` (`id`),
  CONSTRAINT `programming_language_id_refs_id_5363fe85` FOREIGN KEY (`programming_language_id`) REFERENCES `algorithm_programminglanguage` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=277 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementation`
--

LOCK TABLES `algorithm_implementation` WRITE;
/*!40000 ALTER TABLE `algorithm_implementation` DISABLE KEYS */;
INSERT INTO `algorithm_implementation` VALUES (1,1,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> fifo_node \n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> fifo_node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>\n  value_type value<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n \nclass fifo\n<span class=\"br0\">{</span>\n  fifo_node <span class=\"sy0\">*</span>front<span class=\"sy0\">;</span>\n  fifo_node <span class=\"sy0\">*</span>back<span class=\"sy0\">;</span>\n \n  fifo_node <span class=\"sy0\">*</span>dequeue<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    fifo_node <span class=\"sy0\">*</span>tmp <span class=\"sy0\">=</span> front<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> front <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span>\n      front <span class=\"sy0\">=</span> front<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n      back <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> tmp<span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n \n  queue<span class=\"br0\">(</span>value<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    fifo_node <span class=\"sy0\">*</span>tempNode <span class=\"sy0\">=</span> new fifo_node<span class=\"sy0\">;</span>\n    tempNode<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> front <span class=\"sy0\">==</span> NULL <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      front <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n      back <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span>\n    <span class=\"br0\">{</span>\n      back<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n      back <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(2,2,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> floyd<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x0<span class=\"br0\">)</span>:\n    <span class=\"co1\"># The main phase of the algorithm, finding a repetition x_mu = x_2mu</span>\n    <span class=\"co1\"># The hare moves twice as quickly as the tortoise</span>\n    <span class=\"co1\"># Eventually they will both be inside the cycle </span>\n    <span class=\"co1\"># and the distance between them will increase by 1 until</span>\n    <span class=\"co1\"># it is divisible by the length of the cycle.</span>\n    tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span> <span class=\"co1\"># f(x0) is the element/node next to x0.</span>\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n    <span class=\"co1\"># at this point the position of tortoise which is the distance between </span>\n    <span class=\"co1\"># hare and tortoise is divisible by the length of the cycle. </span>\n    <span class=\"co1\"># so hare moving in circle and tortoise (set to x0) moving towards </span>\n    <span class=\"co1\"># the circle will intersect at the beginning of the circle.</span>\n \n    <span class=\"co1\"># Find the position of the first repetition of length mu</span>\n    <span class=\"co1\"># The hare and tortoise move at the same speeds</span>\n    mu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    tortoise <span class=\"sy0\">=</span> x0\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        mu +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># Find the length of the shortest cycle starting from x_mu</span>\n    <span class=\"co1\"># The hare moves while the tortoise stays still</span>\n    lam <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        lam +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"kw1\">return</span> lam<span class=\"sy0\">,</span> mu\n</pre>',2,1,NULL),(3,2,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> brent<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x0<span class=\"br0\">)</span>:\n    <span class=\"co1\"># main phase: search successive powers of two</span>\n    power <span class=\"sy0\">=</span> lam <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    tortoise <span class=\"sy0\">=</span> x0\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>  <span class=\"co1\"># f(x0) is the element/node next to x0.</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        <span class=\"kw1\">if</span> power <span class=\"sy0\">==</span> lam:  <span class=\"co1\"># time to start a new power of two?</span>\n            tortoise <span class=\"sy0\">=</span> hare\n            power *<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\n            lam <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        lam +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># Find the position of the first repetition of length lambda</span>\n    mu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    tortoise <span class=\"sy0\">=</span> hare <span class=\"sy0\">=</span> x0\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>lam<span class=\"br0\">)</span>:\n    <span class=\"co1\"># range(lam) produces a list with the values 0, 1, ... , lam-1</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        mu +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"kw1\">return</span> lam<span class=\"sy0\">,</span> mu\n</pre>',2,1,NULL),(4,3,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdint.h&gt;</span>\n \n<span class=\"co2\">#define PHI 0x9e3779b9</span>\n \n<span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> Q<span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">362436</span><span class=\"sy0\">;</span>\n \n<span class=\"kw4\">void</span> init_rand<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> x<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n \n        Q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span>\n        Q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> PHI<span class=\"sy0\">;</span>\n        Q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> PHI <span class=\"sy0\">+</span> PHI<span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4096</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n                Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> PHI <span class=\"sy0\">^</span> i<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">uint32_t</span> rand_cmwc<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">uint64_t</span> t<span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> 18782LL<span class=\"sy0\">;</span>\n        <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">4095</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">uint32_t</span> x<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu12\">0xfffffffe</span><span class=\"sy0\">;</span>\n        i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">4095</span><span class=\"sy0\">;</span>\n        t <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span>\n        c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        x <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                x<span class=\"sy0\">++;</span>\n                c<span class=\"sy0\">++;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(5,4,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;time.h&gt;</span>\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#include &lt;stdlib.h&gt;</span>\n \n<span class=\"kw4\">int</span>\nmain<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"coMULTI\">/* Length of the password */</span>\n    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> <span class=\"kw4\">int</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* Seed number for rand() */</span>\n    <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> getpid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* ASCII characters 33 to 126 */</span>\n    <span class=\"kw1\">while</span><span class=\"br0\">(</span>length<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw3\">putchar</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">94</span> <span class=\"sy0\">+</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(6,4,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> pass_gen<span class=\"br0\">(</span><span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"re0\">$pass</span> <span class=\"sy0\">=</span> <span class=\"st_h\">\'\'</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$length</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"re0\">$pass</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">mt_rand</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">126</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> <span class=\"re0\">$pass</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',3,1,NULL),(7,4,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> mkpw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">head</span> <span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>urandom <span class=\"sy0\">|</span> uuencode <span class=\"re5\">-m</span> - <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"re5\">-n</span> 2p <span class=\"sy0\">|</span> <span class=\"kw2\">cut</span> <span class=\"re5\">-c1-</span><span class=\"co1\">${1:-8}</span>; <span class=\"br0\">}</span>\n</pre>',4,1,NULL),(8,4,'<pre class=\"de1\">\n<span class=\"co1\">#!/usr/bin/python</span>\n<span class=\"kw1\">import</span> <span class=\"kw3\">random</span><span class=\"sy0\">,</span> <span class=\"kw3\">string</span>\nmyrg <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">SystemRandom</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\nlength <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\n<span class=\"co1\"># If you want non-English characters, remove the [0:52]</span>\nalphabet <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">letters</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>:<span class=\"nu0\">52</span><span class=\"br0\">]</span> + <span class=\"kw3\">string</span>.<span class=\"me1\">digits</span>\npw <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>myrg.<span class=\"me1\">choice</span><span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"kw1\">print</span> pw\n</pre>',2,1,NULL),(9,5,'<pre class=\"de1\">\nfunction Expr()\n{  \n    Expr();  match(\'+\');  Term();\n}\n</pre>',5,1,NULL),(10,6,'<pre class=\"de1\">\n        <span class=\"co1\">/// &lt;summary&gt;</span>\n        <span class=\"co1\">/// Longitudinal Redundancy Check (LRC) calculator for a byte array. </span>\n        <span class=\"co1\">/// This was proved from the LRC Logic of Edwards TurboPump Controller SCU-1600.</span>\n        <span class=\"co1\">/// ex) DATA (hex 6 bytes): 02 30 30 31 23 03</span>\n        <span class=\"co1\">///     LRC  (hex 1 byte ): 47        </span>\n        <span class=\"co1\">/// &lt;/summary&gt;</span>\n \n        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw4\">byte</span> LRC <span class=\"sy0\">=</span> 0x00<span class=\"sy0\">;</span>\n            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bytes<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n                LRC <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>LRC <span class=\"sy0\">+</span> bytes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n            <span class=\"br0\">}</span>\n            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>LRC <span class=\"sy0\">^</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n</pre>',6,1,NULL),(11,6,'<pre class=\"de1\">\n    <span class=\"co3\">/**\n     * Calculates the checksum in compliance with the ISO 1155 standard\n     * More info: http://en.wikipedia.org/wiki/Longitudinal_redundancy_check\n     * @param data array to calculate checksum for\n     * @return returns the calculated checksum in byte format\n     */</span>\n    <span class=\"kw1\">public</span> <span class=\"kw4\">byte</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">byte</span> checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> data.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            checksum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>checksum <span class=\"sy0\">+</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        checksum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>checksum <span class=\"sy0\">^</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> checksum<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(12,6,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buffer<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> length<span class=\"br0\">)</span><span class=\"br0\">{</span>\n <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n <span class=\"kw1\">while</span><span class=\"br0\">(</span>length<span class=\"sy0\">--</span><span class=\"br0\">)</span> checksum <span class=\"sy0\">-=</span> <span class=\"sy0\">*</span>buffer<span class=\"sy0\">++;</span>\n <span class=\"kw1\">return</span> checksum<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(13,7,'<pre class=\"de1\">\n<span class=\"kw4\">float</span> Q_rsqrt<span class=\"br0\">(</span> <span class=\"kw4\">float</span> number <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">long</span> i<span class=\"sy0\">;</span>\n        <span class=\"kw4\">float</span> x2<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span>\n        <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> threehalfs <span class=\"sy0\">=</span> <span class=\"nu17\">1.5F</span><span class=\"sy0\">;</span>\n \n        x2 <span class=\"sy0\">=</span> number <span class=\"sy0\">*</span> <span class=\"nu17\">0.5F</span><span class=\"sy0\">;</span>\n        y  <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span>\n        i  <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"kw4\">long</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>y<span class=\"sy0\">;</span>                       <span class=\"co1\">// evil floating point bit level hacking</span>\n        i  <span class=\"sy0\">=</span> <span class=\"nu12\">0x5f3759df</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"co1\">// what the fuck?</span>\n        y  <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"kw4\">float</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>i<span class=\"sy0\">;</span>\n        y  <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span> threehalfs <span class=\"sy0\">-</span> <span class=\"br0\">(</span> x2 <span class=\"sy0\">*</span> y <span class=\"sy0\">*</span> y <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// 1st iteration</span>\n<span class=\"co1\">//      y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span>\n \n        <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(14,8,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">def</span> digits_of<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span>\n    digits <span class=\"sy0\">=</span> digits_of<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>\n    odd_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">1</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    even_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>odd_digits<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> even_digits:\n        checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>digits_of<span class=\"br0\">(</span>d*<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> checksum % <span class=\"nu0\">10</span>\n \n<span class=\"kw1\">def</span> is_luhn_valid<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>\n</pre>',2,1,NULL),(15,8,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> calculate_luhn<span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span>:\n    check_digit <span class=\"sy0\">=</span> luhn_checksum<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span> * <span class=\"nu0\">10</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> check_digit <span class=\"kw1\">if</span> check_digit <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">10</span> - check_digit\n</pre>',2,1,NULL),(16,9,'<pre class=\"de1\">\n <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::=</span> <span class=\"sy1\">&lt;</span><span class=\"re0\">number</span><span class=\"sy1\">&gt;</span>\n          <span class=\"sy4\">|</span> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">*</span> <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span>\n          <span class=\"sy4\">|</span> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> + <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span>\n</pre>',8,1,NULL),(17,9,'<pre class=\"de1\">\n <span class=\"coMULTI\">/*\n  Call binary_search with proper initial conditions.\n \n  INPUT:\n    data is an array of integers SORTED in ASCENDING order,\n    toFind is the integer to search for,\n    count is the total number of elements in the array\n \n  OUTPUT:\n    result of binary_search\n \n */</span>\n <span class=\"kw4\">int</span> search<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> toFind<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> count<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n    <span class=\"co1\">//  Start = 0 (beginning index)</span>\n    <span class=\"co1\">//  End = count - 1 (top index)</span>\n    <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n <span class=\"br0\">}</span>\n \n <span class=\"coMULTI\">/*\n   Binary Search Algorithm.\n \n   INPUT:\n        data is a array of integers SORTED in ASCENDING order,\n        toFind is the integer to search for,\n        start is the minimum array index,\n        end is the maximum array index\n   OUTPUT:\n        position of the integer toFind within array data,\n        -1 if not found\n */</span>\n <span class=\"kw4\">int</span> binary_search<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> toFind<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> end<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n    <span class=\"co1\">//Get the midpoint.</span>\n    <span class=\"kw4\">int</span> mid <span class=\"sy0\">=</span> start <span class=\"sy0\">+</span> <span class=\"br0\">(</span>end <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>   <span class=\"co1\">//Integer division</span>\n \n    <span class=\"co1\">//Stop condition.</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&gt;</span> end<span class=\"br0\">)</span>\n       <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">==</span> toFind<span class=\"br0\">)</span>        <span class=\"co1\">//Found?</span>\n       <span class=\"kw1\">return</span> mid<span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> toFind<span class=\"br0\">)</span>         <span class=\"co1\">//Data is greater than toFind, search lower half</span>\n       <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> mid<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>                                 <span class=\"co1\">//Data is less than toFind, search upper half</span>\n       <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> mid<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n <span class=\"br0\">}</span>\n</pre>',1,1,NULL),(18,9,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> node\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> data<span class=\"sy0\">;</span>           <span class=\"co1\">// some integer data</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>  <span class=\"co1\">// pointer to another struct node</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(19,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> list_print<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>list<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>list <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span>               <span class=\"co1\">// base case</span>\n    <span class=\"br0\">{</span>\n       <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> list<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// print integer data followed by a space</span>\n       list_print <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// recursive call on the next node</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(20,9,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> node\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> data<span class=\"sy0\">;</span>            <span class=\"co1\">// some integer data</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>left<span class=\"sy0\">;</span>   <span class=\"co1\">// pointer to the left subtree</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>right<span class=\"sy0\">;</span>  <span class=\"co1\">// point to the right subtree</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(21,9,'<pre class=\"de1\">\n<span class=\"co1\">// Test if tree_node contains i; return 1 if so, 0 if not.</span>\n<span class=\"kw4\">int</span> tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"co1\">// base case</span>\n        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">else</span>\n                <span class=\"kw1\">return</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(22,9,'<pre class=\"de1\">\n<span class=\"co1\">// Inorder traversal:</span>\n<span class=\"kw4\">void</span> tree_print<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span>                  <span class=\"co1\">// base case</span>\n                tree_print<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span>      <span class=\"co1\">// go left</span>\n                <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> tree_node<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// print the integer followed by a space</span>\n                tree_print<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// go right</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(23,9,'<pre class=\"de1\">\n<span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span>\n \n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FileSystem <span class=\"br0\">{</span>\n \n        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><span class=\"kw3\">String</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                traverse <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co3\">/**\n         * Obtains the filesystem roots\n         * Proceeds with the recurisve filesystem traversal\n         */</span>\n        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> traverse <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">File</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> fs <span class=\"sy0\">=</span> <span class=\"kw3\">File</span>.<span class=\"me1\">listRoots</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> fs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isDirectory</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">canRead</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                                rtraverse <span class=\"br0\">(</span>fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"br0\">}</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co3\">/**\n         * Recursively traverse a given directory\n         *\n         * @param fd indicates the starting point of traversal\n         */</span>\n        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> rtraverse <span class=\"br0\">(</span><span class=\"kw3\">File</span> fd<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">File</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> fss <span class=\"sy0\">=</span> fd.<span class=\"me1\">listFiles</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> fss.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        <span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span> <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isDirectory</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">canRead</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                                rtraverse <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"br0\">}</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n</pre>',7,1,NULL),(24,9,'<pre class=\"de1\">\nbool tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>  <span class=\"co1\">// base case</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">||</span>\n               tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(25,9,'<pre class=\"de1\">\n<span class=\"co1\">// Wrapper function to handle empty tree</span>\nbool tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>  <span class=\"co1\">// empty tree</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> tree_contains_do<span class=\"br0\">(</span>tree_node<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// call auxiliary function</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Assumes tree_node != NULL</span>\nbool tree_contains_do<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>  <span class=\"co1\">// found</span>\n    <span class=\"kw1\">else</span>  <span class=\"co1\">// recurse</span>\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left  <span class=\"sy0\">&amp;&amp;</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span>  i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span>\n               <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">&amp;&amp;</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(26,9,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> product <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// empty product is 1</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    product <span class=\"sy0\">*=</span> n<span class=\"sy0\">;</span>\n    <span class=\"sy0\">--</span>n<span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw1\">return</span> product<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(27,9,'<pre class=\"de1\">\n<span class=\"co1\">//INPUT: Integers x, y such that x &gt;= y and y &gt; 0</span>\n<span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n     <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span>\n  <span class=\"kw1\">else</span>\n     <span class=\"kw1\">return</span> gcd<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(28,9,'<pre class=\"de1\">\n<span class=\"co1\">//INPUT: n is an Integer such that n &gt;= 0</span>\n<span class=\"kw4\">int</span> fact<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">else</span>\n      <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(29,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> recursiveFunction<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\n      recursiveFunction<span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(30,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> recursiveFunction<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\n      recursiveFunction<span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(31,10,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> minimax<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>depth<span class=\"br0\">)</span>\n   <span class=\"kw1\">if</span> depth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span>\n      <span class=\"co1\">-- positive values are good for the maximizing player</span>\n      <span class=\"co1\">-- negative values are good for the minimizing player</span>\n      <span class=\"kw1\">return</span> objective_value<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n   <span class=\"co1\">-- maximizing player is (+1)</span>\n   <span class=\"co1\">-- minimizing player is (-1)</span>\n   <span class=\"kw1\">local</span> alpha <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>node<span class=\"sy0\">.</span>player <span class=\"sy0\">*</span> INFINITY\n \n   <span class=\"kw1\">local</span> child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span><span class=\"kw4\">nil</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">while</span> child <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">do</span>\n      <span class=\"kw1\">local</span> score <span class=\"sy0\">=</span> minimax<span class=\"br0\">(</span>child<span class=\"sy0\">,</span>depth<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n      alpha <span class=\"sy0\">=</span> node<span class=\"sy0\">.</span>player<span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw3\">math.min</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span>\n      child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>child<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n \n   <span class=\"kw1\">return</span> alpha\n<span class=\"kw1\">end</span>\n</pre>',9,1,NULL),(32,11,'<pre class=\"de1\">\n<span class=\"st0\">\'\'\' calculate histogram: \'\'\'</span>\n<span class=\"co1\"># allocate an array Count[0..k] ; THEN</span>\n<span class=\"co1\"># initialize each array cell to zero ; THEN</span>\n<span class=\"kw1\">for</span> each <span class=\"kw2\">input</span> item x:\n    increment Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span>\n \n<span class=\"st0\">\'\'\' calculate starting index for each key: \'\'\'</span>\ntotal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> ... <span class=\"me1\">k</span>:\n    oldCount <span class=\"sy0\">=</span> Count<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n    Count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> total\n    total <span class=\"sy0\">=</span> total + oldCount\n \n<span class=\"st0\">\'\'\' copy inputs into output array in order: \'\'\'</span>\n<span class=\"co1\"># allocate an output array Output[0..n-1] ; THEN</span>\n<span class=\"kw1\">for</span> each <span class=\"kw2\">input</span> item x:\n    Output<span class=\"br0\">[</span>Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x\n    increment Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span>\n<span class=\"kw1\">return</span> Output\n</pre>',2,1,NULL),(33,12,'<pre class=\"de1\">\n<span class=\"co1\"># From calculation, we expect that the local minimum occurs at x=9/4</span>\n \nx_old <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\nx_new <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"co1\"># The algorithm starts at x=6</span>\neps <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span> <span class=\"co1\"># step size</span>\nprecision <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span>\n \n<span class=\"kw1\">def</span> f_prime<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> * x**<span class=\"nu0\">3</span> - <span class=\"nu0\">9</span> * x**<span class=\"nu0\">2</span>\n \n<span class=\"kw1\">while</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>x_new - x_old<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> precision:\n    x_old <span class=\"sy0\">=</span> x_new\n    x_new <span class=\"sy0\">=</span> x_old - eps * f_prime<span class=\"br0\">(</span>x_old<span class=\"br0\">)</span>\n<span class=\"kw1\">print</span> <span class=\"st0\">\"Local minimum occurs at \"</span><span class=\"sy0\">,</span> x_new\n</pre>',2,1,NULL),(34,13,'<pre class=\"de1\">\n <span class=\"co1\">// The values in A[i] are checked in-order, starting at the second one</span>\n <span class=\"kw1\">for</span> i ← <span class=\"nu0\">1</span> to i ← length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>\n   <span class=\"br0\">{</span>\n     <span class=\"co1\">// at the start of the iteration, A[0..i-1] are in sorted order</span>\n     <span class=\"co1\">// this iteration will insert A[i] into that sorted order</span>\n \n     <span class=\"co1\">// save A[i], the value that will be inserted into the array on this iteration</span>\n     valueToInsert ← A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n     <span class=\"co1\">// now mark position i as the hole; A[i]=A[holePos] is now empty</span>\n     holePos ← i\n     <span class=\"co1\">// keep moving the hole down until the valueToInsert is larger than </span>\n     <span class=\"co1\">// what\'s just below the hole or the hole has reached the beginning of the array</span>\n     <span class=\"kw1\">while</span> holePos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> and valueToInsert <span class=\"sy0\">&lt;</span> A<span class=\"br0\">[</span>holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\n       <span class=\"br0\">{</span> <span class=\"co1\">//value to insert doesn\'t belong where the hole currently is, so shift </span>\n         A<span class=\"br0\">[</span>holePos<span class=\"br0\">]</span> ← A<span class=\"br0\">[</span>holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">//shift the larger value up</span>\n         holePos ← holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>       <span class=\"co1\">//move the hole position down</span>\n       <span class=\"br0\">}</span>\n     <span class=\"co1\">// hole is in the right position, so put valueToInsert into the hole</span>\n     A<span class=\"br0\">[</span>holePos<span class=\"br0\">]</span> ← valueToInsert\n     <span class=\"co1\">// A[0..i] are now in sorted order</span>\n   <span class=\"br0\">}</span>\n</pre>',1,1,NULL),(35,13,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> LIST\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pNext<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span>           iValue<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n \n<span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> SortList<span class=\"br0\">(</span><span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pList<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"coMULTI\">/* build up the sorted array from the empty list */</span>\n  <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pSorted <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* take items off the input list one by one until empty */</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pList <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* remember the head */</span>\n      <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span>   pHead  <span class=\"sy0\">=</span> pList<span class=\"sy0\">;</span>\n      <span class=\"coMULTI\">/* trailing pointer for efficient splice */</span>\n      <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">**</span> ppTrail <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>pSorted<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* pop head off list */</span>\n      pList <span class=\"sy0\">=</span> pList<span class=\"sy0\">-&gt;</span>pNext<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* splice head into sorted list at proper place */</span>\n      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>TRUE<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* does head belong here? */</span>\n          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> pHead<span class=\"sy0\">-&gt;</span>iValue <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>iValue<span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n              <span class=\"coMULTI\">/* yes */</span>\n              pHead<span class=\"sy0\">-&gt;</span>pNext <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppTrail<span class=\"sy0\">;</span>\n              <span class=\"sy0\">*</span>ppTrail <span class=\"sy0\">=</span> pHead<span class=\"sy0\">;</span>\n              <span class=\"kw2\">break</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n          <span class=\"kw1\">else</span>\n            <span class=\"br0\">{</span>\n              <span class=\"coMULTI\">/* no - continue down the list */</span>\n              ppTrail <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pNext<span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">return</span> pSorted<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(36,14,'<pre class=\"de1\">\n<span class=\"coMULTI\">/* array A[] has the items to sort; array B[] is a work array */</span>\nBottomUpSort<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> array A<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> array B<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> width<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* Each 1-element run in A is already \"sorted\". */</span>\n \n  <span class=\"coMULTI\">/* Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted. */</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>width <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> width <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> width<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* Array A is full of runs of length width. */</span>\n      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> width<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* Merge two runs: A[i:i+width-1] and A[i+width:i+2*width-1] to B[] */</span>\n          <span class=\"coMULTI\">/* or copy A[i:n-1] to B[] ( if(i+width &gt;= n) ) */</span>\n          BottomUpMerge<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> min<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>width<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> min<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>width<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n      <span class=\"coMULTI\">/* Now work array B is full of runs of length 2*width. */</span>\n      <span class=\"coMULTI\">/* Copy array B to array A for next iteration. */</span>\n      <span class=\"coMULTI\">/* A more efficient implementation would swap the roles of A and B */</span>\n      CopyArray<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"coMULTI\">/* Now array A is full of runs of length 2*width. */</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \nBottomUpMerge<span class=\"br0\">(</span>array A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iLeft<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iRight<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iEnd<span class=\"sy0\">,</span> array B<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i0 <span class=\"sy0\">=</span> iLeft<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> i1 <span class=\"sy0\">=</span> iRight<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> j<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* While there are elements in the left or right lists */</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> iLeft<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> iEnd<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* If left list head exists and is &lt;= existing right list head */</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i0 <span class=\"sy0\">&lt;</span> iRight <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>i1 <span class=\"sy0\">&gt;=</span> iEnd <span class=\"sy0\">||</span> A<span class=\"br0\">[</span>i0<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> A<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i0<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n          i0 <span class=\"sy0\">=</span> i0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n      <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n          B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n          i1 <span class=\"sy0\">=</span> i1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(37,15,'<pre class=\"de1\">\n  <span class=\"kw1\">function</span> quicksort<span class=\"br0\">(</span><span class=\"st0\">\'array\'</span><span class=\"br0\">)</span>\n      <span class=\"kw1\">if</span> length<span class=\"br0\">(</span><span class=\"st0\">\'array\'</span><span class=\"br0\">)</span> ≤ <span class=\"nu0\">1</span>\n          <span class=\"kw1\">return</span> <span class=\"st0\">\'array\'</span>  <span class=\"co1\">// an array of zero or one elements is already sorted</span>\n      select and remove a pivot element <span class=\"st0\">\'pivot\'</span> from <span class=\"st0\">\'array\'</span>\n      create empty lists <span class=\"st0\">\'less\'</span> and <span class=\"st0\">\'greater\'</span>\n      <span class=\"kw1\">for</span> each <span class=\"st0\">\'x\'</span> <span class=\"kw1\">in</span> <span class=\"st0\">\'array\'</span>\n          <span class=\"kw1\">if</span> <span class=\"st0\">\'x\'</span> ≤ <span class=\"st0\">\'pivot\'</span> then append <span class=\"st0\">\'x\'</span> to <span class=\"st0\">\'less\'</span>\n          <span class=\"kw1\">else</span> append <span class=\"st0\">\'x\'</span> to <span class=\"st0\">\'greater\'</span>\n      <span class=\"kw1\">return</span> concatenate<span class=\"br0\">(</span>quicksort<span class=\"br0\">(</span><span class=\"st0\">\'less\'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> list<span class=\"br0\">(</span><span class=\"st0\">\'pivot\'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> quicksort<span class=\"br0\">(</span><span class=\"st0\">\'greater\'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// two recursive calls</span>\n</pre>',10,1,NULL),(38,15,'<pre class=\"de1\">\n   <span class=\"co1\">// left is the index of the leftmost element of the subarray</span>\n   <span class=\"co1\">// right is the index of the rightmost element of the subarray (inclusive)</span>\n   <span class=\"co1\">//   number of elements in subarray = right-left+1</span>\n   <span class=\"kw1\">function</span> partition<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> pivotIndex<span class=\"br0\">)</span>\n      pivotValue <span class=\"sy0\">:=</span> array<span class=\"br0\">[</span>pivotIndex<span class=\"br0\">]</span>\n      swap array<span class=\"br0\">[</span>pivotIndex<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>right<span class=\"br0\">]</span>  <span class=\"co1\">// Move pivot to end</span>\n      storeIndex <span class=\"sy0\">:=</span> left\n      <span class=\"kw1\">for</span> i from left to right <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>  <span class=\"co1\">// left ≤ i &lt; right</span>\n          <span class=\"kw1\">if</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> pivotValue\n              swap array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>storeIndex<span class=\"br0\">]</span>\n              storeIndex <span class=\"sy0\">:=</span> storeIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\n      swap array<span class=\"br0\">[</span>storeIndex<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>right<span class=\"br0\">]</span>  <span class=\"co1\">// Move pivot to its final place</span>\n      <span class=\"kw1\">return</span> storeIndex\n</pre>',10,1,NULL),(39,15,'<pre class=\"de1\">\n  <span class=\"kw1\">function</span> quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span>\n \n      <span class=\"co1\">// If the list has 2 or more items</span>\n      <span class=\"kw1\">if</span> left <span class=\"sy0\">&lt;</span> right\n \n          <span class=\"co1\">// See \"Choice of pivot\" section below for possible choices</span>\n          choose any pivotIndex such that left ≤ pivotIndex ≤ right\n \n          <span class=\"co1\">// Get lists of bigger and smaller items and final position of pivot</span>\n          pivotNewIndex <span class=\"sy0\">:=</span> partition<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> pivotIndex<span class=\"br0\">)</span>\n \n          <span class=\"co1\">// Recursively sort elements smaller than the pivot</span>\n          quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> pivotNewIndex <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n          <span class=\"co1\">// Recursively sort elements at least as big as the pivot</span>\n          quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> pivotNewIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> right<span class=\"br0\">)</span>\n</pre>',10,1,NULL),(40,16,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#define MAX 5</span>\n<span class=\"co2\">#define SHOWPASS</span>\n<span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>a, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\t</span>\"</span>, a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> radixsort<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>a, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i, b<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span>, m <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw3\">exp</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> m<span class=\"br0\">)</span>\n      m <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> bucket<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>\n    <span class=\"br0\">{</span>  <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      bucket<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      bucket<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> bucket<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span>\n      b<span class=\"br0\">[</span><span class=\"sy2\">--</span>bucket<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">exp</span> <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n \n    <span class=\"co2\">#ifdef SHOWPASS</span>\n      <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>PASS   : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n      print<span class=\"br0\">(</span>a, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"co2\">#endif</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n  <span class=\"kw4\">int</span> i, n<span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter total elements (n &lt; %d) : \"</span>, MAX<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, <span class=\"sy3\">&amp;</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  n <span class=\"sy1\">=</span> n <span class=\"sy1\">&lt;</span> MAX <span class=\"sy4\">?</span> n <span class=\"sy4\">:</span> MAX<span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter %d Elements : \"</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, <span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>ARRAY  : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  print<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  radixsort<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>SORTED : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  print<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n</pre>',11,1,NULL),(41,16,'<pre class=\"de1\">\n<span class=\"co1\">#python2.6 &lt;</span>\n<span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> log\n \n<span class=\"kw1\">def</span> getDigit<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span>:\n    <span class=\"co1\"># pulls the selected digit</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>num // base ** digit_num<span class=\"br0\">)</span> % base  \n \n<span class=\"kw1\">def</span> makeBlanks<span class=\"br0\">(</span>size<span class=\"br0\">)</span>:\n    <span class=\"co1\"># create a list of empty lists to hold the split by digit</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">]</span>  \n \n<span class=\"kw1\">def</span> split<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span>:\n    buckets <span class=\"sy0\">=</span> makeBlanks<span class=\"br0\">(</span>base<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> a_list:\n        <span class=\"co1\"># append the number to the list selected by the digit</span>\n        buckets<span class=\"br0\">[</span>getDigit<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>  \n    <span class=\"kw1\">return</span> buckets\n \n<span class=\"co1\"># concatenate the lists back in order for the next step</span>\n<span class=\"kw1\">def</span> merge<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>: \n    new_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    <span class=\"kw1\">for</span> sublist <span class=\"kw1\">in</span> a_list:\n       new_list.<span class=\"me1\">extend</span><span class=\"br0\">(</span>sublist<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> new_list\n \n<span class=\"kw1\">def</span> maxAbs<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>:\n    <span class=\"co1\"># largest abs value element of a list</span>\n    <span class=\"kw1\">return</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> a_list<span class=\"br0\">)</span>  \n \n<span class=\"kw1\">def</span> radixSort<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> base<span class=\"br0\">)</span>:\n    <span class=\"co1\"># there are as many passes as there are digits in the longest number</span>\n    passes <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>log<span class=\"br0\">(</span>maxAbs<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span><span class=\"sy0\">,</span> base<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> \n    new_list <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> digit_num <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>passes<span class=\"br0\">)</span>:\n        new_list <span class=\"sy0\">=</span> merge<span class=\"br0\">(</span>split<span class=\"br0\">(</span>new_list<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> new_list\n</pre>',2,1,NULL),(42,17,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(43,18,'<pre class=\"de1\">\n<span class=\"coMULTI\">/* a[0] to a[n-1] is the array to sort */</span>\n<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span>\n<span class=\"kw4\">int</span> iMin<span class=\"sy0\">;</span>\n \n<span class=\"coMULTI\">/* advance the position through the entire array */</span>\n<span class=\"coMULTI\">/*   (could do j &lt; n-1 because single element is also min element) */</span>\n<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"coMULTI\">/* find the min element in the unsorted a[j .. n-1] */</span>\n \n    <span class=\"coMULTI\">/* assume the min is the first element */</span>\n    iMin <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span>\n    <span class=\"coMULTI\">/* test against elements after j to find the smallest */</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"coMULTI\">/* if this element is less, then it is the new minimum */</span>  \n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>iMin<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"coMULTI\">/* found new minimum; remember its index */</span>\n            iMin <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"coMULTI\">/* iMin is the index of the minimum element. Swap it with the current position */</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> iMin <span class=\"sy0\">!=</span> j <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        swap<span class=\"br0\">(</span>a<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>iMin<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(44,18,'<pre class=\"de1\">\nbingo<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"br0\">)</span>\n \n<span class=\"coMULTI\">{ This procedure sorts in ascending order. }</span>\n<span class=\"kw1\">begin</span>\n    max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n \n    <span class=\"coMULTI\">{ The first iteration is written to look very similar to the subsequent ones, but\n      without swaps. }</span>\n    nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span>\n        <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; nextValue <span class=\"kw1\">then</span>\n            nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>max<span class=\"br0\">]</span> <span class=\"sy3\">=</span> nextValue<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\n        max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n \n    <span class=\"kw1\">while</span> max &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n        value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> nextValue<span class=\"sy1\">;</span>\n        nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span>\n             <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> value <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span>\n                 swap<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\n                 max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n             <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; nextValue <span class=\"kw1\">then</span>\n                 nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>max<span class=\"br0\">]</span> <span class=\"sy3\">=</span> nextValue<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\n            max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\n<span class=\"kw1\">end</span><span class=\"sy1\">;</span>\n</pre>',12,1,NULL),(45,19,'<pre class=\"de1\">\ndatatype <span class=\"sy0\">\'</span>a tree <span class=\"sy0\">=</span> Empty <span class=\"sy0\">|</span> Node <span class=\"kw1\">of</span> <span class=\"sy0\">\'</span>a <span class=\"sy0\">*</span> <span class=\"sy0\">\'</span>a forest\n<span class=\"kw1\">and</span>      <span class=\"sy0\">\'</span>a forest <span class=\"sy0\">=</span> Nil <span class=\"sy0\">|</span> Cons <span class=\"kw1\">of</span> <span class=\"sy0\">\'</span>a tree <span class=\"sy0\">*</span> <span class=\"sy0\">\'</span>a forest\n</pre>',13,1,NULL),(46,19,'<pre class=\"de1\">\nbool is_even<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> is_odd<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \nbool is_odd<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> is_even<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(47,19,'<pre class=\"de1\">\n <span class=\"kw1\">def</span> f_tree<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>:\n     f_value<span class=\"br0\">(</span>tree.<span class=\"me1\">value</span><span class=\"br0\">)</span>\n     f_forest<span class=\"br0\">(</span>tree.<span class=\"me1\">children</span><span class=\"br0\">)</span>\n \n <span class=\"kw1\">def</span> f_forest<span class=\"br0\">(</span>forest<span class=\"br0\">)</span>:\n     <span class=\"kw1\">for</span> tree <span class=\"kw1\">in</span> forest:\n         f_tree<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(48,19,'<pre class=\"de1\">\n<span class=\"kw1\">fun</span> size_tree Empty <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n  <span class=\"sy0\">|</span> size_tree <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>_, f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> size_forest f\n<span class=\"kw1\">and</span> size_forest Nil <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n  <span class=\"sy0\">|</span> size_forest <span class=\"br0\">(</span>Cons <span class=\"br0\">(</span>t, f<span class=\"sy0\">\'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> size_tree t <span class=\"sy0\">+</span> size_forest f<span class=\"sy0\">\'</span>\n</pre>',13,1,NULL),(49,19,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves tree<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>leaf? tree<span class=\"br0\">)</span>\n      <span class=\"nu0\">1</span>\n      <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest <span class=\"br0\">(</span>children tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest forest<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> forest<span class=\"br0\">)</span>\n      <span class=\"nu0\">0</span>\n      <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves <span class=\"br0\">(</span><span class=\"kw1\">car</span> forest<span class=\"br0\">)</span><span class=\"br0\">)</span>\n         <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> forest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(50,20,'<pre class=\"de1\">\n<span class=\"co1\"># Sort an array a[0...n-1].</span>\ngaps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">701</span><span class=\"sy0\">,</span> <span class=\"nu0\">301</span><span class=\"sy0\">,</span> <span class=\"nu0\">132</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\n \nforeach <span class=\"br0\">(</span>gap <span class=\"kw1\">in</span> gaps<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"co1\"># Do an insertion sort for each gap size.</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> gap<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        temp <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> gap <span class=\"kw1\">and</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> temp<span class=\"sy0\">;</span> j -<span class=\"sy0\">=</span> gap<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span>\n        <span class=\"br0\">}</span>\n        a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp\n    <span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n</pre>',2,1,NULL),(51,21,'<pre class=\"de1\">\n<span class=\"kw1\">data</span> Nested a <span class=\"sy0\">=</span> a :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">(</span>Nested <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> Epsilon\n<span class=\"kw1\">infixr</span> <span class=\"nu0\">5</span> :<span class=\"sy0\">&lt;</span>:\n \nnested <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span> :<span class=\"sy0\">&lt;</span>: Epsilon\n</pre>',15,1,NULL),(52,21,'<pre class=\"de1\">\n<span class=\"kw3\">length</span> <span class=\"sy0\">::</span> Nested a <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">Int</span>\n<span class=\"kw3\">length</span> Epsilon    <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n<span class=\"kw3\">length</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span> :<span class=\"sy0\">&lt;</span>: xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">length</span> xs\n</pre>',15,1,NULL),(53,22,'<pre class=\"de1\">\n<span class=\"co1\">%These choices depend on the problem being solved</span>\nx0 = <span class=\"nu0\">1</span>                      <span class=\"co1\">%The initial value</span>\nf<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = x^<span class=\"nu0\">2</span> - <span class=\"nu0\">2</span>              <span class=\"co1\">%The function whose root are are trying to find</span>\nfprime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">2</span>*x              <span class=\"co1\">%The derivative of f(x)</span>\ntolerance = <span class=\"nu0\">10</span>^-<span class=\"nu0\">10</span>          <span class=\"co1\">%10 digit accuracy is desired</span>\nepsilon = <span class=\"nu0\">10</span>^-<span class=\"nu0\">16000</span>         <span class=\"co1\">%Don\'t want to divide by a number smaller than this</span>\n \nmaxIterations = <span class=\"nu0\">20</span>          <span class=\"co1\">%Don\'t allow the iterations to continue indefinitely</span>\nhaveWeFoundSolution = false <span class=\"co1\">%Were we able to find the solution to the desired tolerance? not yet.</span>\n \n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span> = <span class=\"nu0\">1</span> : maxIterations \n    denominator = fprime<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>                          <span class=\"co1\">%Compute the denominator</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>denominator<span class=\"br0\">)</span> &lt; epsilon<span class=\"br0\">)</span>          <span class=\"co1\">%Don\'t want to divide by too small of a number</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"co2\">\'WARNING: denominator is too small\'</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    newtonX = x0 - f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>/denominator                  <span class=\"co1\">%Do Newton\'s computation</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>newtonX - x0<span class=\"br0\">)</span> &lt; tolerance<span class=\"br0\">)</span>       <span class=\"co1\">%If the result is within the desired tolerance</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The root is\", newtonX<span class=\"br0\">)</span><span class=\"br0\">)</span>                <span class=\"co1\">%Display the result of the Newton iteration</span>\n        haveWeFoundSolution = true\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Done, so leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    x0 = newtonX                                      <span class=\"co1\">%Update x0 to start the process again                  </span>\n \n<span class=\"kw1\">end</span>\n \n<span class=\"kw1\">if</span><span class=\"br0\">(</span>haveWeFoundSolution == false<span class=\"br0\">)</span>   <span class=\"co1\">%If we weren\'t able to find a solution to within the desired tolerance</span>\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"<span class=\"kw2\">Warning</span>: Not able to <span class=\"kw2\">find</span> solution to within the desired tolerance of \", tolerance<span class=\"br0\">)</span>;\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The last computed approximate root was \", newtonX<span class=\"br0\">)</span>\n<span class=\"kw1\">end</span>\n</pre>',16,1,NULL),(54,23,'<pre class=\"de1\">\n<span class=\"co1\">%These choices depend on the problem being solved</span>\nx0 = <span class=\"nu0\">1</span>                      <span class=\"co1\">%The initial value</span>\nf<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = x^<span class=\"nu0\">2</span> - <span class=\"nu0\">2</span>              <span class=\"co1\">%The function whose root are are trying to find</span>\nfprime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">2</span>*x              <span class=\"co1\">%The derivative of f(x)</span>\ntolerance = <span class=\"nu0\">10</span>^-<span class=\"nu0\">10</span>          <span class=\"co1\">%10 digit accuracy is desired</span>\nepsilon = <span class=\"nu0\">10</span>^-<span class=\"nu0\">16000</span>         <span class=\"co1\">%Don\'t want to divide by a number smaller than this</span>\n \nmaxIterations = <span class=\"nu0\">20</span>          <span class=\"co1\">%Don\'t allow the iterations to continue indefinitely</span>\nhaveWeFoundSolution = false <span class=\"co1\">%Were we able to find the solution to the desired tolerance? not yet.</span>\n \n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span> = <span class=\"nu0\">1</span> : maxIterations \n    denominator = fprime<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>                          <span class=\"co1\">%Compute the denominator</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>denominator<span class=\"br0\">)</span> &lt; epsilon<span class=\"br0\">)</span>          <span class=\"co1\">%Don\'t want to divide by too small of a number</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"co2\">\'WARNING: denominator is too small\'</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    newtonX = x0 - f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>/denominator                  <span class=\"co1\">%Do Newton\'s computation</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>newtonX - x0<span class=\"br0\">)</span> &lt; tolerance<span class=\"br0\">)</span>       <span class=\"co1\">%If the result is within the desired tolerance</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The root is\", newtonX<span class=\"br0\">)</span><span class=\"br0\">)</span>                <span class=\"co1\">%Display the result of the Newton iteration</span>\n        haveWeFoundSolution = true\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Done, so leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    x0 = newtonX                                      <span class=\"co1\">%Update x0 to start the process again                  </span>\n \n<span class=\"kw1\">end</span>\n \n<span class=\"kw1\">if</span><span class=\"br0\">(</span>haveWeFoundSolution == false<span class=\"br0\">)</span>   <span class=\"co1\">%If we weren\'t able to find a solution to within the desired tolerance</span>\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"<span class=\"kw2\">Warning</span>: Not able to <span class=\"kw2\">find</span> solution to within the desired tolerance of \", tolerance<span class=\"br0\">)</span>;\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The last computed approximate root was \", newtonX<span class=\"br0\">)</span>\n<span class=\"kw1\">end</span>\n</pre>',16,1,NULL),(55,24,'<pre class=\"de1\">\n <span class=\"kw3\">map</span> f <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> f<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n</pre>',15,1,NULL),(56,24,'<pre class=\"de1\">\n <span class=\"kw3\">foldl</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a\n <span class=\"kw3\">foldl</span> f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\n <span class=\"kw3\">foldl</span> f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl</span> f <span class=\"br0\">(</span>f z x<span class=\"br0\">)</span> xs\n</pre>',15,1,NULL),(57,24,'<pre class=\"de1\">\n <span class=\"kw3\">foldr</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> b\n <span class=\"kw3\">foldr</span> f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\n <span class=\"kw3\">foldr</span> f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span><span class=\"kw3\">foldr</span> f z xs<span class=\"br0\">)</span>\n</pre>',15,1,NULL),(58,24,'<pre class=\"de1\">\nfoldt f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\nfoldt f <span class=\"sy0\">_</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>    <span class=\"sy0\">=</span> x\nfoldt f z xs     <span class=\"sy0\">=</span> foldt f z <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span>\n \nfoldi f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\nfoldi f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>foldi f z <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \npairs f <span class=\"br0\">(</span>x:y:t<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> f x y : pairs f t\npairs <span class=\"sy0\">_</span> t        <span class=\"sy0\">=</span> t\n</pre>',15,1,NULL),(59,24,'<pre class=\"de1\">\n<span class=\"kw3\">foldl1</span> f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\n<span class=\"kw3\">foldl1</span> f <span class=\"br0\">(</span>x:y:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl1</span> f <span class=\"br0\">(</span>f x y : xs<span class=\"br0\">)</span>\n \n<span class=\"kw3\">foldr1</span> f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\n<span class=\"kw3\">foldr1</span> f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span>   <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span><span class=\"kw3\">foldr1</span> f xs<span class=\"br0\">)</span>\n \nfoldt1 f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\nfoldt1 f <span class=\"br0\">(</span>x:y:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> foldt1 f <span class=\"br0\">(</span>f x y : pairs f xs<span class=\"br0\">)</span>\n \nfoldi1 f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\nfoldi1 f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span>   <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>foldi1 f <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',15,1,NULL),(60,24,'<pre class=\"de1\">\n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> <span class=\"kw3\">foldl</span> <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> foldt <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">+</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> foldi <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',15,1,NULL),(61,24,'<pre class=\"de1\">\n primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> : <span class=\"nu0\">3</span> : <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> `minus` unionAll <span class=\"br0\">[</span><span class=\"br0\">[</span>p<span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">*</span>p<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> p <span class=\"sy0\">&lt;-</span> <span class=\"kw3\">tail</span> primes<span class=\"br0\">]</span><span class=\"br0\">)</span> \n   <span class=\"kw1\">where</span> unionAll s <span class=\"sy0\">=</span> foldi <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> ys <span class=\"sy0\">-&gt;</span> x : union xs ys<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> s\n</pre>',15,1,NULL),(62,24,'<pre class=\"de1\">\n mergesort xs <span class=\"sy0\">=</span> foldt merge <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> xs<span class=\"br0\">]</span>\n nubsort   xs <span class=\"sy0\">=</span> foldt union <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> xs<span class=\"br0\">]</span>\n</pre>',15,1,NULL),(63,24,'<pre class=\"de1\">\n<span class=\"kw3\">head</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\a b <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> \n<span class=\"kw3\">last</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl</span> <span class=\"br0\">(</span>\\a b <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> \n</pre>',15,1,NULL),(64,24,'<pre class=\"de1\">\n g <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v\n g <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>g xs<span class=\"br0\">)</span>\n</pre>',15,1,NULL),(65,24,'<pre class=\"de1\">\nfix f <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> <span class=\"br0\">(</span><span class=\"kw3\">repeat</span> <span class=\"kw3\">undefined</span><span class=\"br0\">)</span>\n</pre>',15,1,NULL),(66,25,'<pre class=\"de1\">\n<span class=\"kw4\">double</span> phi <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">double</span> resphi <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> phi<span class=\"sy0\">;</span>\n \n<span class=\"co1\">// a and c are the current bounds; the minimum is between them.</span>\n<span class=\"co1\">// b is a center point</span>\n<span class=\"co1\">// f(x) is some mathematical function elsewhere defined</span>\n<span class=\"co1\">// a corresponds to x1; b corresponds to x2; c corresponds to x3</span>\n<span class=\"co1\">// x corresponds to x4</span>\n \n<span class=\"kw1\">public</span> <span class=\"kw4\">double</span> goldenSectionSearch<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b, <span class=\"kw4\">double</span> c, <span class=\"kw4\">double</span> tau<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw4\">double</span> x<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span>\n      x <span class=\"sy0\">=</span> b <span class=\"sy0\">+</span> resphi <span class=\"sy0\">*</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n      x <span class=\"sy0\">=</span> b <span class=\"sy0\">-</span> resphi <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> tau <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \n      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> \n    <span class=\"kw1\">assert</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>b, x, c, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>a, x, b, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>a, b, x, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>x, b, c, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(67,28,'<pre class=\"de1\">\n        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> BrentsMethodSolve<span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, double<span class=\"sy0\">&gt;</span> function, <span class=\"kw4\">double</span> lowerLimit, <span class=\"kw4\">double</span> upperLimit, <span class=\"kw4\">double</span> errorTol<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> lowerLimit<span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> upperLimit<span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> <span class=\"kw4\">double</span>.<span class=\"me1\">MaxValue</span><span class=\"sy0\">;</span>\n \n            <span class=\"kw4\">double</span> fa <span class=\"sy0\">=</span> function<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> fb <span class=\"sy0\">=</span> function<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n            <span class=\"kw4\">double</span> fc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">double</span> fs <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n            <span class=\"co1\">// if f(a) f(b) &gt;= 0 then error-exit</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fa <span class=\"sy0\">*</span> fb <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fa <span class=\"sy0\">&lt;</span> fb<span class=\"br0\">)</span>\n                    <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span>\n                    <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n \n            <span class=\"co1\">// if |f(a)| &lt; |f(b)| then swap (a,b) end if</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>fa<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>fb<span class=\"br0\">)</span><span class=\"br0\">)</span>\n            <span class=\"br0\">{</span> <span class=\"kw4\">double</span> tmp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span> tmp <span class=\"sy0\">=</span> fa<span class=\"sy0\">;</span> fa <span class=\"sy0\">=</span> fb<span class=\"sy0\">;</span> fb <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span> <span class=\"br0\">}</span>\n \n            c <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span>\n            fc <span class=\"sy0\">=</span> fa<span class=\"sy0\">;</span>\n            bool mflag <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>fb<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>a<span class=\"sy0\">-</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> errorTol<span class=\"br0\">)</span><span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fa <span class=\"sy0\">!=</span> fc<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>fb <span class=\"sy0\">!=</span> fc<span class=\"br0\">)</span><span class=\"br0\">)</span>\n                    <span class=\"co1\">// Inverse quadratic interpolation</span>\n                    s <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> fb <span class=\"sy0\">*</span> fc <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fa <span class=\"sy0\">-</span> fb<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fa <span class=\"sy0\">-</span> fc<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> fa <span class=\"sy0\">*</span> fc <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fb <span class=\"sy0\">-</span> fa<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fb <span class=\"sy0\">-</span> fc<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">*</span> fa <span class=\"sy0\">*</span> fb <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fc <span class=\"sy0\">-</span> fa<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fc <span class=\"sy0\">-</span> fb<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span>\n                    <span class=\"co1\">// Secant Rule</span>\n                    s <span class=\"sy0\">=</span> b <span class=\"sy0\">-</span> fb <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>fb <span class=\"sy0\">-</span> fa<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n                <span class=\"kw4\">double</span> tmp2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> tmp2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> tmp2<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>mflag <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> c<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>mflag <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>s <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> d<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                    s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n                    mflag <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span>\n                <span class=\"br0\">{</span>\n                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mflag <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> c<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> errorTol<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>mflag <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> d<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> errorTol<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n                    <span class=\"br0\">{</span>\n                        s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n                        mflag <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n                    <span class=\"br0\">}</span>\n                    <span class=\"kw1\">else</span>\n                        mflag <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                fs <span class=\"sy0\">=</span> function<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                d <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span>\n                c <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span>\n                fc <span class=\"sy0\">=</span> fb<span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fa <span class=\"sy0\">*</span> fs <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> b <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> fb <span class=\"sy0\">=</span> fs<span class=\"sy0\">;</span> <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span> <span class=\"br0\">{</span> a <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> fa <span class=\"sy0\">=</span> fs<span class=\"sy0\">;</span> <span class=\"br0\">}</span>\n \n                <span class=\"co1\">// if |f(a)| &lt; |f(b)| then swap (a,b) end if</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>fa<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">Abs</span><span class=\"br0\">(</span>fb<span class=\"br0\">)</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span> <span class=\"kw4\">double</span> tmp <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span> b <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span> tmp <span class=\"sy0\">=</span> fa<span class=\"sy0\">;</span> fa <span class=\"sy0\">=</span> fb<span class=\"sy0\">;</span> fb <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span> <span class=\"br0\">}</span>\n                i<span class=\"sy0\">++;</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span>\n                    <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"kw3\">String</span>.<span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"Error is {0}\"</span>, fb<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n            <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(68,29,'<pre class=\"de1\">\n<span class=\"coMULTI\">/* Assumes a is an array of values to be sorted. */</span>\n<span class=\"kw1\">var</span> sorted <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\nwhile<span class=\"br0\">(</span><span class=\"sy0\">!</span>sorted<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    sorted<span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> a<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            swap<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            sorted <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> a<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            swap<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            sorted <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(69,30,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> foo<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    a<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> b<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(70,30,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> bar<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> a<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> b<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> c<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(71,30,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> foo1<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">return</span> a<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(72,30,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> foo2<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">var</span> ret <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(73,30,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> foo3<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">var</span> ret <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>ret <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> ret<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',10,1,NULL),(74,30,'<pre class=\"de1\">\n<span class=\"co1\">;; factorial : number -&gt; number</span>\n<span class=\"co1\">;; to calculate the product of all positive</span>\n<span class=\"co1\">;; integers less than or equal to n.</span>\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n    <span class=\"nu0\">1</span>\n    <span class=\"br0\">(</span><span class=\"sy0\">*</span> n <span class=\"br0\">(</span>factorial <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(75,30,'<pre class=\"de1\">\n<span class=\"co1\">;; factorial : number -&gt; number</span>\n<span class=\"co1\">;; to calculate the product of all positive</span>\n<span class=\"co1\">;; integers less than or equal to n.</span>\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>factorial n<span class=\"br0\">)</span>\n    <span class=\"br0\">(</span><span class=\"kw1\">let</span> fact <span class=\"br0\">(</span><span class=\"br0\">[</span>i n<span class=\"br0\">]</span> <span class=\"br0\">[</span>acc <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> i<span class=\"br0\">)</span>\n          acc\n          <span class=\"br0\">(</span>fact <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> acc i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(76,30,'<pre class=\"de1\">\n<span class=\"kw4\">int</span> a<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    foobar<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> b<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">int</span> b<span class=\"br0\">(</span><span class=\"kw4\">int</span> u<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> v<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    foobar<span class=\"br0\">(</span>u<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> u <span class=\"sy0\">+</span> v<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(77,30,'<pre class=\"de1\">\n<span class=\"kw4\">int</span> a<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    foobar<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    b<span class=\"sy0\">:</span>u <span class=\"sy0\">=</span> a<span class=\"sy0\">:</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    b<span class=\"sy0\">:</span>v <span class=\"sy0\">=</span> a<span class=\"sy0\">:</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n    jump b<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(78,30,'<pre class=\"de1\">\npartition<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>                              <span class=\"co1\">% -- Haskell translation:</span>\npartition<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span> Bigs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>            <span class=\"co1\">% partition [] _ = ([],[])</span>\n  X <span class=\"sy5\">@</span><span class=\"sy6\">&lt;</span> Pivot<span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span>                                       <span class=\"co1\">% partition (x:xs) p | x &lt; p = (x:a,b)</span>\n  partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> Rest<span class=\"sy4\">,</span> Bigs<span class=\"br0\">)</span><span class=\"sy4\">.</span>                    <span class=\"co1\">%                    | True = (a,x:b)</span>\npartition<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> Smalls<span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>          <span class=\"co1\">%    where</span>\n  partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> Smalls<span class=\"sy4\">,</span> Rest<span class=\"br0\">)</span><span class=\"sy4\">.</span>                  <span class=\"co1\">%       (a,b) = partition xs p</span>\n \n<span class=\"co1\">% to be compiled not as this:                          % but as this:</span>\npartition<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>                              partition<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> \npartition<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> Smalls<span class=\"sy4\">,</span> Bigs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>              partition<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Pivot<span class=\"sy4\">,</span> Smalls<span class=\"sy4\">,</span> Bigs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>\n <span class=\"br0\">(</span>  X <span class=\"sy5\">@</span><span class=\"sy6\">&lt;</span> Pivot                                          <span class=\"br0\">(</span>  X <span class=\"sy5\">@</span><span class=\"sy6\">&lt;</span> Pivot\n <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span>Pivot<span class=\"sy4\">,</span>Rest<span class=\"sy4\">,</span>Bigs<span class=\"br0\">)</span><span class=\"sy4\">,</span> Smalls<span class=\"sy6\">=</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span>      <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Smalls<span class=\"sy6\">=</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span> partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span>Pivot<span class=\"sy4\">,</span>Rest<span class=\"sy4\">,</span>Bigs<span class=\"br0\">)</span>\n <span class=\"sy4\">;</span>  partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span>Pivot<span class=\"sy4\">,</span>Smalls<span class=\"sy4\">,</span>Rest<span class=\"br0\">)</span><span class=\"sy4\">,</span> Bigs<span class=\"sy6\">=</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span>      <span class=\"sy4\">;</span>  Bigs<span class=\"sy6\">=</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span> partition<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span>Pivot<span class=\"sy4\">,</span>Smalls<span class=\"sy4\">,</span>Rest<span class=\"br0\">)</span>\n <span class=\"br0\">)</span><span class=\"sy4\">.</span>                                                     <span class=\"br0\">)</span><span class=\"sy4\">.</span>\n</pre>',17,1,NULL),(79,30,'<pre class=\"de1\">\nlist <span class=\"sy0\">*</span>duplicate<span class=\"br0\">(</span><span class=\"kw4\">const</span> list <span class=\"sy0\">*</span>ls<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    list <span class=\"sy0\">*</span>head <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ls <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        list <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> duplicate<span class=\"br0\">(</span> ls<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        head <span class=\"sy0\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span> <span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>head<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        head<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> ls<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span>\n        head<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> \n    <span class=\"kw1\">return</span> head<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(80,30,'<pre class=\"de1\">\nlist <span class=\"sy0\">*</span>duplicate<span class=\"br0\">(</span><span class=\"kw4\">const</span> list <span class=\"sy0\">*</span>ls<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    list head<span class=\"sy0\">;</span>\n    duplicate_aux<span class=\"br0\">(</span> ls<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>head<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> head.<span class=\"me1\">next</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> duplicate_aux<span class=\"br0\">(</span><span class=\"kw4\">const</span> list <span class=\"sy0\">*</span>ls<span class=\"sy0\">,</span> list <span class=\"sy0\">*</span>end<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ls <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        end<span class=\"sy0\">-&gt;</span>next        <span class=\"sy0\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span> <span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        end<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> ls<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span>\n        duplicate_aux<span class=\"br0\">(</span> ls<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">,</span> end<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n        end<span class=\"sy0\">-&gt;</span>next        <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(81,30,'<pre class=\"de1\">\nlist <span class=\"sy0\">*</span>duplicate<span class=\"br0\">(</span><span class=\"kw4\">const</span> list <span class=\"sy0\">*</span>ls<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    list head<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>end<span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> end <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>head<span class=\"sy0\">;</span> ls <span class=\"sy0\">!=</span> NULL<span class=\"sy0\">;</span> ls <span class=\"sy0\">=</span> ls<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">,</span> end <span class=\"sy0\">=</span> end<span class=\"sy0\">-&gt;</span>next <span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n        end<span class=\"sy0\">-&gt;</span>next        <span class=\"sy0\">=</span> <span class=\"kw3\">malloc</span><span class=\"br0\">(</span> <span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        end<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> ls<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span> \n    <span class=\"br0\">}</span>\n    end<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> head.<span class=\"me1\">next</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(82,31,'<pre class=\"de1\">\n<span class=\"co1\">// compute hit counts</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">11</span> <span class=\"co1\">// where 11 is n</span>\n<span class=\"br0\">{</span>\n    H<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">12</span> <span class=\"co1\">// where 12 is A.length</span>\n<span class=\"br0\">{</span>\n    pos <span class=\"sy0\">=</span> MapKey<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    H<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> H<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \nrunningTotal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// compute prox map – location of start of each subarray</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">11</span>\n    <span class=\"kw1\">if</span> H<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        P<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        P<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> runningTotal<span class=\"sy0\">;</span>\n        runningTotal <span class=\"sy0\">=</span> runningTotal <span class=\"sy0\">+</span> H<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n \n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">12</span> <span class=\"co1\">// compute location – subarray – in A2 into which each item in A is to be placed</span>\n    L<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> P<span class=\"br0\">[</span>MapKey<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n \n<span class=\"kw1\">for</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">12</span><span class=\"sy0\">;</span> <span class=\"co1\">// sort items</span>\n    A2<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>empty<span class=\"sy0\">&gt;;</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> to <span class=\"nu0\">12</span> <span class=\"co1\">// insert each item into subarray beginning at start, preserving order</span>\n<span class=\"br0\">{</span>\n    start <span class=\"sy0\">=</span> L<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// subarray for this item begins at this location</span>\n    insertion made <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> start to <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span>the end of A2 is found, and insertion not made<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> A2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">&lt;</span>empty<span class=\"sy0\">&gt;</span> <span class=\"co1\">// if subarray empty, just put item in first position of subarray</span>\n            A2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n            insertion made <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> A2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"co1\">// key belongs at A2[j]</span>\n            <span class=\"kw4\">int</span> end <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// find end of used part of subarray – where first &lt;empty&gt; is</span>\n            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>A2<span class=\"br0\">[</span>end<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">&lt;</span>empty<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>\n                end<span class=\"sy0\">++;</span>\n            <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> end <span class=\"sy0\">-</span><span class=\"nu0\">1</span> to j <span class=\"co1\">// move larger keys to the right 1 cell</span>\n                A2<span class=\"br0\">[</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A2<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                A2<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n            insertion made <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"co1\">// add in new key</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',7,1,NULL),(83,32,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> max_subarray<span class=\"br0\">(</span>A<span class=\"br0\">)</span>:\n    max_ending_here <span class=\"sy0\">=</span> max_so_far <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> A:\n        max_ending_here <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> max_ending_here + x<span class=\"br0\">)</span>\n        max_so_far <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>max_so_far<span class=\"sy0\">,</span> max_ending_here<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> max_so_far\n</pre>',2,1,NULL),(84,32,'<pre class=\"de1\">\n<span class=\"kw4\">int</span> sequence<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> numbers<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"co1\">// Initialize variables here</span>\n        <span class=\"kw4\">int</span> max_so_far  <span class=\"sy1\">=</span> numbers<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, max_ending_here <span class=\"sy1\">=</span> numbers<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n \n        <span class=\"co1\">// OPTIONAL: These variables can be added in to track the position of the subarray</span>\n        <span class=\"co1\">// size_t begin = 0;</span>\n        <span class=\"co1\">// size_t begin_temp = 0;</span>\n        <span class=\"co1\">// size_t end = 0;</span>\n \n        <span class=\"co1\">// Find sequence by looping through</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> numbers.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                <span class=\"co1\">// calculate max_ending_here</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>max_ending_here <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        max_ending_here <span class=\"sy1\">=</span> numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n \n                        <span class=\"co1\">// begin_temp = i;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span>\n                <span class=\"br0\">{</span>\n                        max_ending_here <span class=\"sy2\">+</span><span class=\"sy1\">=</span> numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n                <span class=\"br0\">}</span>\n \n                <span class=\"co1\">// calculate max_so_far</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>max_ending_here <span class=\"sy1\">&gt;=</span> max_so_far <span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        max_so_far  <span class=\"sy1\">=</span> max_ending_here<span class=\"sy4\">;</span>\n \n                        <span class=\"co1\">// begin = begin_temp;</span>\n                        <span class=\"co1\">// end = i;</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> max_so_far <span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n</pre>',11,1,NULL),(85,33,'<pre class=\"de1\">\n<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> discreteHaarWaveletTransform<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"co1\">// This function assumes that input.length=2^n, n&gt;1</span>\n    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> output <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>input.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> length <span class=\"sy0\">=</span> input.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> length <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"co1\">// length = input.length / 2^n, WITH n INCREASING to log(input.length) / log(2)</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> length<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n            <span class=\"kw4\">int</span> difference <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n            output<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sum<span class=\"sy0\">;</span>\n            output<span class=\"br0\">[</span>length <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> difference<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"kw1\">return</span> output<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co1\">//Swap arrays to do next iteration</span>\n        <span class=\"kw3\">System</span>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>output, <span class=\"nu0\">0</span>, input, <span class=\"nu0\">0</span>, length <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',7,1,NULL),(86,34,'<pre class=\"de1\">\n<span class=\"co1\">% plots BLER (Block error rate) for Hamming74 code in complex AWGN channel</span>\n<span class=\"co1\">% with {+1,-1} (BPSK) modulation</span>\n \ntStart_global = <span class=\"kw2\">tic</span>; <span class=\"co1\">% start ticker to count time consumed</span>\nc=<span class=\"kw2\">clock</span>;    <span class=\"co1\">% get current time</span>\nstrTime=<span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"co2\">\'Start time Date Time: D%dH%dM%dS%d \'</span>,c<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,c<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>,c<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"kw2\">fix</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n \ntrialNumberFull = <span class=\"nu0\">10</span>^<span class=\"nu0\">5</span>; <span class=\"co1\">% Trials for each snr point %for 1e5:  171.66 seconds, i.e. 0.047683 hours</span>\nsnrdBVector =   <span class=\"br0\">[</span>-<span class=\"nu0\">10</span>:<span class=\"nu0\">1</span>:<span class=\"nu0\">10</span><span class=\"br0\">]</span>; <span class=\"co1\">% Vector of SNR in dB</span>\n \nnumberOfCodeWords = <span class=\"nu0\">2</span>^<span class=\"nu0\">4</span>; <span class=\"co1\">% since 4 information bits in Hamming74 code</span>\nblockLength = <span class=\"nu0\">7</span>; <span class=\"co1\">% since 7 bits is length of code of Hamming74 code</span>\n \n<span class=\"kw1\">for</span> codeWordNumber = <span class=\"nu0\">1</span>: numberOfCodeWords <span class=\"co1\">% Create matrix which rows are all codeWords</span>\n    uncoded = <span class=\"kw2\">bitget</span><span class=\"br0\">(</span>codeWordNumber - <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span>:-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span>; \n    codedWordsArray<span class=\"br0\">(</span>codeWordNumber, :<span class=\"br0\">)</span> = <span class=\"nu0\">1</span>-<span class=\"nu0\">2</span>*encode<span class=\"br0\">(</span>uncoded,<span class=\"nu0\">7</span>,<span class=\"nu0\">4</span>,<span class=\"co2\">\'hamming/binary\'</span><span class=\"br0\">)</span>;\n<span class=\"kw1\">end</span>;\n \nbler = <span class=\"kw2\">zeros</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> , numel<span class=\"br0\">(</span> snrdBVector <span class=\"br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"kw1\">for</span> counter = <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span> snrdBVector <span class=\"br0\">)</span> <span class=\"co1\">% Loop of SNR in dB</span>\n    sigm=<span class=\"nu0\">10</span>^<span class=\"br0\">(</span>-snrdBVector<span class=\"br0\">(</span>counter<span class=\"br0\">)</span>/<span class=\"nu0\">20</span><span class=\"br0\">)</span>; <span class=\"co1\">% noise power for complex noise</span>\n    sigm = sigm / <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"co1\">% noise part for real/imaginary parts of noise</span>\n \n    <span class=\"kw1\">for</span> trialNumber  = <span class=\"nu0\">1</span>: trialNumberFull\n        sentCodeWordNumber = randi<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> numberOfCodeWords<span class=\"br0\">]</span><span class=\"br0\">)</span>; <span class=\"co1\">%Random codeWord number</span>\n        codedData = codedWordsArray<span class=\"br0\">(</span>sentCodeWordNumber, :<span class=\"br0\">)</span>;<span class=\"co1\">% Get correspong sequence of {+1,-1}</span>\n \n        noiseVec = sigm * <span class=\"kw2\">randn</span><span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span> blockLength<span class=\"br0\">]</span><span class=\"br0\">)</span>; <span class=\"co1\">%noise generatation</span>\n        receivedData = codedData + noiseVec; \n \n        <span class=\"co1\">%MLD decoding</span>\n        d = codedWordsArray - <span class=\"kw2\">repmat</span><span class=\"br0\">(</span>receivedData,numberOfCodeWords,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n        M = <span class=\"kw2\">sum</span><span class=\"br0\">(</span>d.*d,<span class=\"nu0\">2</span><span class=\"br0\">)</span>;\n        <span class=\"br0\">[</span>min_M,positionOfMin<span class=\"br0\">]</span> = <span class=\"kw2\">min</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span>; <span class=\"co1\">% codeWord number positionOfMin is result of MLD decoding</span>\n \n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> positionOfMin ~= sentCodeWordNumber<span class=\"br0\">)</span> <span class=\"co1\">% compare sent and decoded</span>\n            bler<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> =  bler<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;  <span class=\"co1\">% if different add error count</span>\n        <span class=\"kw1\">end</span>;\n    <span class=\"kw1\">end</span>; \n    bler<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> =  bler<span class=\"br0\">(</span>counter<span class=\"br0\">)</span> / trialNumberFull;\n<span class=\"kw1\">end</span>;\n \nc=<span class=\"kw2\">clock</span>; strTime=<span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"co2\">\'End time Date Time: D%dH%dM%dS%d \'</span>,c<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>,c<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>,c<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>,<span class=\"kw2\">fix</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\nt=<span class=\"kw2\">toc</span><span class=\"br0\">(</span>tStart_global<span class=\"br0\">)</span>; calcTimeStr = <span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"co2\">\'All time consumed  %.2f seconds, i.e. %f hours\\n\'</span>, t, t/<span class=\"nu0\">3600</span><span class=\"br0\">)</span>\n \nbler <span class=\"co1\">% Output to display</span>\n \nfname = <span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"co2\">\'BLER in AWGN for Hamming74 code trials 1e%d\'</span>, <span class=\"kw2\">log10</span><span class=\"br0\">(</span>trialNumberFull <span class=\"br0\">)</span> <span class=\"br0\">)</span>;\nfp =  <span class=\"kw2\">fopen</span><span class=\"br0\">(</span><span class=\"br0\">[</span>fname <span class=\"co2\">\'.csv\'</span><span class=\"br0\">]</span>, <span class=\"co2\">\'wt\'</span><span class=\"br0\">)</span>;\n<span class=\"kw2\">fprintf</span><span class=\"br0\">(</span>fp, <span class=\"co2\">\' SNR,\'</span><span class=\"br0\">)</span>; <span class=\"kw2\">fprintf</span><span class=\"br0\">(</span>fp,<span class=\"co2\">\' %.1f,\'</span>, snrdBVector<span class=\"br0\">)</span>; <span class=\"kw2\">fprintf</span><span class=\"br0\">(</span>fp, <span class=\"co2\">\'\\n\'</span><span class=\"br0\">)</span>;\n<span class=\"kw2\">fprintf</span><span class=\"br0\">(</span>fp, <span class=\"co2\">\'BLER,\'</span><span class=\"br0\">)</span>; <span class=\"kw2\">fprintf</span><span class=\"br0\">(</span>fp,<span class=\"co2\">\' %f,\'</span>, bler<span class=\"br0\">)</span>; <span class=\"kw2\">fclose</span><span class=\"br0\">(</span>fp<span class=\"br0\">)</span>;\n \nfig1=<span class=\"kw2\">figure</span>; <span class=\"kw2\">semilogy</span><span class=\"br0\">(</span>snrdBVector, bler<span class=\"br0\">)</span>;\n<span class=\"kw2\">title</span><span class=\"br0\">(</span>fname<span class=\"br0\">)</span>; <span class=\"kw2\">xlabel</span><span class=\"br0\">(</span><span class=\"co2\">\'SNR\'</span><span class=\"br0\">)</span>; <span class=\"kw2\">ylabel</span><span class=\"br0\">(</span><span class=\"co2\">\'BLER\'</span><span class=\"br0\">)</span>; <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"kw2\">gca</span>,<span class=\"co2\">\'XTick\'</span>,snrdBVector<span class=\"br0\">)</span>; \n<span class=\"kw2\">grid</span> on; <span class=\"kw2\">saveas</span><span class=\"br0\">(</span>fig1,fname<span class=\"br0\">)</span>; <span class=\"kw2\">saveas</span><span class=\"br0\">(</span>fig1,fname,<span class=\"co2\">\'jpg\'</span><span class=\"br0\">)</span>;\n</pre>',16,1,NULL),(87,35,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> Steffensen<span class=\"br0\">(</span>f,p0,tol<span class=\"br0\">)</span>\n<span class=\"co1\">% This function takes as inputs: a fixed point iteration function, f, </span>\n<span class=\"co1\">% and initial guess to the fixed point, p0, and a tolerance, tol.</span>\n<span class=\"co1\">% The fixed point iteration function is assumed to be input as an</span>\n<span class=\"co1\">% inline function. </span>\n<span class=\"co1\">% This function will calculate and return the fixed point, p, </span>\n<span class=\"co1\">% that makes the expression f(x) = p true to within the desired </span>\n<span class=\"co1\">% tolerance, tol. </span>\n \n<span class=\"kw2\">format</span> compact <span class=\"co1\">% This shortens the output.</span>\n<span class=\"kw2\">format</span> long    <span class=\"co1\">% This prints more decimal places. </span>\n \n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span>=<span class=\"nu0\">1</span>:<span class=\"nu0\">1000</span>   <span class=\"co1\">% get ready to do a large, but finite, number of iterations.</span>\n               <span class=\"co1\">% This is so that if the method fails to converge, we won\'t</span>\n               <span class=\"co1\">% be stuck in an infinite loop.</span>\n    p1=f<span class=\"br0\">(</span>p0<span class=\"br0\">)</span>;  <span class=\"co1\">% calculate the next two guesses for the fixed point.</span>\n    p2=f<span class=\"br0\">(</span>p1<span class=\"br0\">)</span>;\n    p=p0-<span class=\"br0\">(</span>p1-p0<span class=\"br0\">)</span>^<span class=\"nu0\">2</span>/<span class=\"br0\">(</span>p2-<span class=\"nu0\">2</span>*p1+p0<span class=\"br0\">)</span> <span class=\"co1\">% use Aitken\'s delta squared method to</span>\n                                <span class=\"co1\">% find a better approximation to p0.</span>\n    <span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>p-p0<span class=\"br0\">)</span>&lt;tol  <span class=\"co1\">% test to see if we are within tolerance.</span>\n        <span class=\"kw1\">break</span>         <span class=\"co1\">% if we are, stop the iterations, we have our answer.</span>\n    <span class=\"kw1\">end</span>\n    p0=p;              <span class=\"co1\">% update p0 for the next iteration.</span>\n<span class=\"kw1\">end</span>\n<span class=\"kw1\">if</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>p-p0<span class=\"br0\">)</span>&gt;tol       <span class=\"co1\">% If we fail to meet the tolerance, we output a</span>\n                       <span class=\"co1\">% message of failure.</span>\n    <span class=\"co2\">\'failed to converge in 1000 iterations.\'</span>\n<span class=\"kw1\">end</span>\n</pre>',16,1,NULL),(88,37,'<pre class=\"de1\">\nstates <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'Healthy\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span><span class=\"br0\">)</span>\n \nobservations <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'normal\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span><span class=\"br0\">)</span>\n \nstart_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.6</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.4</span><span class=\"br0\">}</span>\n \ntransition_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.7</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.6</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n \nemission_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.6</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n</pre>',2,1,NULL),(89,37,'<pre class=\"de1\">\n<span class=\"co1\"># Helps visualize the steps of Viterbi.</span>\n<span class=\"kw1\">def</span> print_dptable<span class=\"br0\">(</span>V<span class=\"br0\">)</span>:\n    s <span class=\"sy0\">=</span> <span class=\"st0\">\"    \"</span> + <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"%7d\"</span> % i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>\n    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> V<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:\n        s +<span class=\"sy0\">=</span> <span class=\"st0\">\"%.5s: \"</span> % y\n        s +<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"%.7s\"</span> % <span class=\"br0\">(</span><span class=\"st0\">\"%f\"</span> % v<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> V<span class=\"br0\">)</span>\n        s +<span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span>\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> viterbi<span class=\"br0\">(</span>obs<span class=\"sy0\">,</span> states<span class=\"sy0\">,</span> start_p<span class=\"sy0\">,</span> trans_p<span class=\"sy0\">,</span> emit_p<span class=\"br0\">)</span>:\n    <span class=\"co1\"># Initialize base cases (t == 0)</span>\n    V <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>y:<span class=\"br0\">(</span>start_p<span class=\"br0\">[</span>y<span class=\"br0\">]</span> * emit_p<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>obs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> states<span class=\"br0\">}</span><span class=\"br0\">]</span>\n    path <span class=\"sy0\">=</span> <span class=\"br0\">{</span>y:<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> states<span class=\"br0\">}</span>\n \n    <span class=\"co1\"># Run Viterbi for t &gt; 0</span>\n    <span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>obs<span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        V.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span>\n        newpath <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n \n        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> states:\n            <span class=\"br0\">(</span>prob<span class=\"sy0\">,</span> state<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span>V<span class=\"br0\">[</span>t-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>y0<span class=\"br0\">]</span> * trans_p<span class=\"br0\">[</span>y0<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> * emit_p<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>obs<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> y0<span class=\"br0\">)</span> <span class=\"kw1\">for</span> y0 <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n            V<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> prob\n            newpath<span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> path<span class=\"br0\">[</span>state<span class=\"br0\">]</span> + <span class=\"br0\">[</span>y<span class=\"br0\">]</span>\n \n        <span class=\"co1\"># Don\'t need to remember the old paths</span>\n        path <span class=\"sy0\">=</span> newpath\n \n    print_dptable<span class=\"br0\">(</span>V<span class=\"br0\">)</span>\n    <span class=\"br0\">(</span>prob<span class=\"sy0\">,</span> state<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span>V<span class=\"br0\">[</span>t<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>prob<span class=\"sy0\">,</span> path<span class=\"br0\">[</span>state<span class=\"br0\">]</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(90,37,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> viterbi<span class=\"br0\">(</span>observations<span class=\"sy0\">,</span>\n                   states<span class=\"sy0\">,</span>\n                   start_probability<span class=\"sy0\">,</span>\n                   transition_probability<span class=\"sy0\">,</span>\n                   emission_probability<span class=\"br0\">)</span>\n<span class=\"kw1\">print</span><span class=\"br0\">(</span>example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(91,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> fac<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">else</span>:\n        <span class=\"kw1\">return</span> n*fac<span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(92,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> factorial_list<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    factorial <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:\n        <span class=\"kw1\">yield</span> factorial\n        n +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n        factorial *<span class=\"sy0\">=</span> n\n</pre>',2,1,NULL),(93,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> factorial_list<span class=\"br0\">(</span>k<span class=\"br0\">)</span>:\n    n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    factorial <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> k<span class=\"br0\">)</span>:\n        <span class=\"kw1\">yield</span> factorial\n        n +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n        factorial *<span class=\"sy0\">=</span> n\n</pre>',2,1,NULL),(94,38,'<pre class=\"de1\">\n<span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> factorial_list<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(95,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> fibonacci_list<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:\n        <span class=\"kw1\">yield</span> a\n        c <span class=\"sy0\">=</span> a + b\n        a <span class=\"sy0\">=</span> b\n        b <span class=\"sy0\">=</span> c\n</pre>',2,1,NULL),(96,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> df<span class=\"br0\">(</span>node<span class=\"br0\">)</span>:\n    <span class=\"kw1\">if</span> node <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:\n        df<span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"br0\">)</span>\n        df<span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">print</span><span class=\"br0\">(</span>node.<span class=\"me1\">value</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(97,38,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> bf<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>:\n    tree_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span>tree<span class=\"br0\">]</span>\n    <span class=\"kw1\">while</span> tree_list <span class=\"sy0\">!=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>:\n        new_tree_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n        <span class=\"kw1\">for</span> tree <span class=\"kw1\">in</span> tree_list:\n            <span class=\"kw1\">if</span> tree <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:\n                <span class=\"kw1\">yield</span> tree.<span class=\"me1\">value</span>\n                new_tree_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>tree.<span class=\"me1\">left</span><span class=\"br0\">)</span>\n                new_tree_list.<span class=\"me1\">append</span><span class=\"br0\">(</span>tree.<span class=\"me1\">right</span><span class=\"br0\">)</span>\n        tree_list <span class=\"sy0\">=</span> new_tree_list\n</pre>',2,1,NULL),(98,38,'<pre class=\"de1\">\n<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> bf<span class=\"br0\">(</span>t<span class=\"br0\">)</span>:\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(99,38,'<pre class=\"de1\">\nfibs <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> : <span class=\"nu0\">1</span> : next fibs\n  <span class=\"kw1\">where</span>\n    next <span class=\"br0\">(</span>a: t<span class=\"sy0\">@</span><span class=\"br0\">(</span>b:<span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span>:next t\n</pre>',15,1,NULL),(100,38,'<pre class=\"de1\">\nfibs <span class=\"sy0\">=</span> fibgen <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\nfibgen <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x : fibgen <span class=\"br0\">(</span>y<span class=\"sy0\">,</span>x<span class=\"sy0\">+</span>y<span class=\"br0\">)</span>\n</pre>',15,1,NULL),(101,38,'<pre class=\"de1\">\n<span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> tee<span class=\"sy0\">,</span> chain<span class=\"sy0\">,</span> islice<span class=\"sy0\">,</span> imap\n \n<span class=\"kw1\">def</span> add<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"br0\">(</span>x + y<span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> fibonacci<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">def</span> deferred_output<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> output:\n            <span class=\"kw1\">yield</span> i\n    result<span class=\"sy0\">,</span> c1<span class=\"sy0\">,</span> c2 <span class=\"sy0\">=</span> tee<span class=\"br0\">(</span>deferred_output<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>\n    paired <span class=\"sy0\">=</span> imap<span class=\"br0\">(</span>add<span class=\"sy0\">,</span> c1<span class=\"sy0\">,</span> islice<span class=\"br0\">(</span>c2<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    output <span class=\"sy0\">=</span> chain<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> paired<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> result\n \n<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> islice<span class=\"br0\">(</span>fibonacci<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>:\n  <span class=\"kw1\">print</span> i\n</pre>',2,1,NULL),(102,38,'<pre class=\"de1\">\n<span class=\"kw1\">data</span> Tree a b <span class=\"sy0\">=</span> Leaf a  <span class=\"sy0\">|</span>  Branch b <span class=\"br0\">(</span>Tree a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>Tree a b<span class=\"br0\">)</span>\n \nbftrav <span class=\"sy0\">::</span> Tree a b <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Tree a b<span class=\"br0\">]</span>\nbftrav tree <span class=\"sy0\">=</span> queue\n  <span class=\"kw1\">where</span>\n    queue <span class=\"sy0\">=</span> tree : gen <span class=\"nu0\">1</span> queue  \n \n    gen  <span class=\"nu0\">0</span>   q                 <span class=\"sy0\">=</span>         <span class=\"br0\">[</span><span class=\"br0\">]</span>           \n    gen len <span class=\"br0\">(</span>Leaf   <span class=\"sy0\">_</span>     : q<span class=\"br0\">)</span> <span class=\"sy0\">=</span>         gen <span class=\"br0\">(</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> q \n    gen len <span class=\"br0\">(</span>Branch <span class=\"sy0\">_</span> l r : q<span class=\"br0\">)</span> <span class=\"sy0\">=</span> l : r : gen <span class=\"br0\">(</span>len<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> q\n</pre>',15,1,NULL),(103,38,'<pre class=\"de1\">\nlabel <span class=\"sy0\">::</span> Tree a b <span class=\"sy0\">-&gt;</span> Tree <span class=\"kw4\">Int</span> <span class=\"kw4\">Int</span> \nlabel t <span class=\"sy0\">=</span> t′\n    <span class=\"kw1\">where</span>\n          <span class=\"br0\">(</span>t′<span class=\"sy0\">,</span>ns<span class=\"br0\">)</span> <span class=\"sy0\">=</span> label′ t <span class=\"br0\">(</span><span class=\"nu0\">1</span>:ns<span class=\"br0\">)</span>\n \nlabel′ <span class=\"sy0\">::</span> Tree a b    <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"kw4\">Int</span><span class=\"br0\">]</span>  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Tree <span class=\"kw4\">Int</span> <span class=\"kw4\">Int</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"kw4\">Int</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\nlabel′    <span class=\"br0\">(</span>Leaf   <span class=\"sy0\">_</span>    <span class=\"br0\">)</span> <span class=\"br0\">(</span>n:ns<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Leaf   n       <span class=\"sy0\">,</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span> : ns  <span class=\"br0\">)</span>\nlabel′    <span class=\"br0\">(</span>Branch <span class=\"sy0\">_</span> l r<span class=\"br0\">)</span> <span class=\"br0\">(</span>n:ns<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Branch n l′ r′ <span class=\"sy0\">,</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span> : ns′′<span class=\"br0\">)</span>\n                                <span class=\"kw1\">where</span>\n                                  <span class=\"br0\">(</span>l′<span class=\"sy0\">,</span>ns′ <span class=\"br0\">)</span> <span class=\"sy0\">=</span> label′ l ns\n                                  <span class=\"br0\">(</span>r′<span class=\"sy0\">,</span>ns′′<span class=\"br0\">)</span> <span class=\"sy0\">=</span> label′ r ns′\n</pre>',15,1,NULL),(104,38,'<pre class=\"de1\">\n<span class=\"reference-text\"><span class=\"kw1\">class</span> Tree:\n    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> value<span class=\"sy0\">,</span> left<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> right<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:\n        <span class=\"kw2\">self</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value\n        <span class=\"kw2\">self</span>.<span class=\"me1\">left</span>  <span class=\"sy0\">=</span> left\n        <span class=\"kw2\">self</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right\n \n    <span class=\"kw1\">def</span> <span class=\"kw4\">__str__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span></span>\n</pre>',2,1,NULL),(105,38,'<pre class=\"de1\">\nt <span class=\"sy0\">=</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Tree<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(106,39,'<pre class=\"de1\">\nf=@<span class=\"br0\">(</span>x<span class=\"br0\">)</span> x^<span class=\"nu0\">2</span> - <span class=\"nu0\">612</span>;\nx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=<span class=\"nu0\">10</span>;\nx<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"nu0\">30</span>;\n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span>=<span class=\"nu0\">3</span>:<span class=\"nu0\">7</span>\n    x<span class=\"br0\">(</span><span class=\"kw2\"><span class=\"re0\">i</span></span><span class=\"br0\">)</span> = x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>*<span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> - x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - f<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"re0\">i</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;\n<span class=\"kw1\">end</span>\nroot=x<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>\n</pre>',16,1,NULL),(107,40,'<pre class=\"de1\">\n   initialize the weights <span class=\"kw1\">in</span> the network <span class=\"br0\">(</span>often small random values<span class=\"br0\">)</span>\n   <span class=\"kw1\">do</span>\n      <span class=\"kw1\">for</span> each example e <span class=\"kw1\">in</span> the training <span class=\"kw1\">set</span>\n         O <span class=\"sy0\">=</span> neural<span class=\"sy0\">-</span>net<span class=\"sy0\">-</span>output<span class=\"br0\">(</span>network<span class=\"sy0\">,</span> e<span class=\"br0\">)</span>  <span class=\"co1\">// forward pass</span>\n         T <span class=\"sy0\">=</span> teacher output <span class=\"kw1\">for</span> e\n         compute error <span class=\"br0\">(</span>T <span class=\"sy0\">-</span> O<span class=\"br0\">)</span> at the output units\n         compute delta_wh <span class=\"kw1\">for</span> all weights from hidden layer to output layer  <span class=\"co1\">// backward pass</span>\n         compute delta_wi <span class=\"kw1\">for</span> all weights from input layer to hidden layer   <span class=\"co1\">// backward pass continued</span>\n         update the weights <span class=\"kw1\">in</span> the network\n   until all examples classified correctly or stopping criterion satisfied\n   <span class=\"kw1\">return</span> the network\n</pre>',10,1,NULL),(108,41,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> comb_sort<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>input<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> shrink <span class=\"sy0\">=</span> <span class=\"nu17\">1.3f</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> swap<span class=\"sy0\">;</span>\n    <span class=\"kw4\">size_t</span> i<span class=\"sy0\">,</span> gap <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span>\n    bool swapped <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n \n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>gap <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> swapped<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gap <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            gap <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span>gap <span class=\"sy0\">/</span> shrink<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        swapped <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gap <span class=\"sy0\">+</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> gap<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                swap <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                input<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> input<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> gap<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                input<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> gap<span class=\"br0\">]</span> <span class=\"sy0\">=</span> swap<span class=\"sy0\">;</span>\n                swapped <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(109,42,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;algorithm&gt;</span>\n \n<span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> BidirectionalIterator<span class=\"sy1\">&gt;</span>\n<span class=\"kw4\">void</span> gnomeSort<span class=\"br0\">(</span>BidirectionalIterator first, BidirectionalIterator last<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    BidirectionalIterator i <span class=\"sy1\">=</span> first, j <span class=\"sy1\">=</span> first<span class=\"sy4\">;</span>\n \n    <span class=\"sy2\">++</span>j<span class=\"sy4\">;</span>\n \n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>j <span class=\"sy3\">!</span><span class=\"sy1\">=</span> last<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>i <span class=\"sy1\">&lt;=</span> <span class=\"sy2\">*</span>j<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"sy2\">++</span>i<span class=\"sy4\">;</span>\n            <span class=\"sy2\">++</span>j<span class=\"sy4\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n            std<span class=\"sy4\">::</span><span class=\"me2\">iter_swap</span><span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> first<span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n                <span class=\"sy2\">--</span>i<span class=\"sy4\">;</span>\n                <span class=\"sy2\">--</span>j<span class=\"sy4\">;</span>\n            <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',11,1,NULL),(110,43,'<pre class=\"de1\">\n<span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange\n \n<span class=\"kw1\">def</span> sattoloCycle<span class=\"br0\">(</span>items<span class=\"br0\">)</span>:\n    i <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>items<span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:\n        i <span class=\"sy0\">=</span> i - <span class=\"nu0\">1</span>\n        j <span class=\"sy0\">=</span> randrange<span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <span class=\"co1\"># 0 &lt;= j &lt;= i-1</span>\n        items<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> items<span class=\"br0\">[</span>j<span class=\"br0\">]</span>\n    <span class=\"kw1\">return</span>\n</pre>',2,1,NULL),(111,44,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Infinite Loop<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(112,44,'<pre class=\"de1\">\n<span class=\"kw1\">DO</span>\n<span class=\"kw1\">LOOP</span> <span class=\"kw1\">UNTIL</span> <span class=\"nu0\">0</span>\n</pre>',18,1,NULL),(113,44,'<pre class=\"de1\">\n<span class=\"kw1\">loop</span><span class=\"sy1\">:</span>\n  <span class=\"co1\">; Code to loop here</span>\n  <span class=\"kw1\">jmp</span> <span class=\"kw1\">loop</span>\n</pre>',19,1,NULL),(114,44,'<pre class=\"de1\">\n<span class=\"sy1\">:</span>A\ngoto <span class=\"sy1\">:</span>A\n</pre>',19,1,NULL),(115,44,'<pre class=\"de1\">\n<span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Infinite Loop\"</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(116,44,'<pre class=\"de1\">\n $ <span class=\"kw1\">while</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span> <span class=\"kw3\">echo</span> <span class=\"st0\">\"Infinite Loop\"</span>; <span class=\"kw1\">done</span>\n</pre>',4,1,NULL),(117,44,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Infinite Loop<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>\n</pre>',20,1,NULL),(118,44,'<pre class=\"de1\">\n<span class=\"kw4\">dim</span> x <span class=\"kw4\">as</span> <span class=\"kw1\">integer</span>\n<span class=\"kw3\">do</span> <span class=\"kw3\">until</span> x &gt; 5\n  x = 1\n  x = x + 1\n<span class=\"kw3\">loop</span>\n</pre>',21,1,NULL),(119,44,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n             <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n             <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"a equals 5!<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n             <span class=\"br0\">}</span>\n             a<span class=\"sy0\">++;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(120,44,'<pre class=\"de1\">\n<span class=\"kw4\">float</span> x <span class=\"sy0\">=</span> <span class=\"nu16\">0.1</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"nu16\">1.1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"x = %f<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> <span class=\"nu16\">0.1</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(121,44,'<pre class=\"de1\">\nx <span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span>\n<span class=\"kw1\">while</span> x <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:\n    <span class=\"kw1\">print</span> x\n    x +<span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span>\n</pre>',2,1,NULL),(122,44,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"coMULTI\">/* loop code */</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(123,44,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> Ω\n  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>ω <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"kw1\">f</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n    <span class=\"br0\">(</span>ω ω<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(124,44,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>to n<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>to <span class=\"br0\">(</span>sub1 n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(125,44,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>to\' n<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">cond</span>\n    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\n    <span class=\"br0\">[</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>to\' <span class=\"br0\">(</span>sub1 n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1,NULL),(126,44,'<pre class=\"de1\">\n<span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw4\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$foo</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">bar</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',3,1,NULL),(127,44,'<pre class=\"de1\">\nsum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Input a number to add to the sum or 0 to quit\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    i <span class=\"sy0\">=</span> getUserInput<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>     <span class=\"co1\">// if i times 0 is true, add i to the sum</span>\n        sum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span>    <span class=\"co1\">// this never happens because (i * 0) is 0 for any i; it would work if we had != in the condition instead of *</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw2\">break</span><span class=\"sy0\">;</span>       <span class=\"co1\">// terminate the loop; exit condition exists but is never reached because sum is never added to</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(128,45,'<pre class=\"de1\">\n    <span class=\"co1\">#!/usr/bin/python</span>\n \n    <span class=\"kw1\">import</span> <span class=\"kw3\">sys</span>\n \n    <span class=\"co1\"># ----------------------------------------------------------------------------</span>\n    <span class=\"co1\"># Crypto4o functions start here</span>\n    <span class=\"co1\"># ----------------------------------------------------------------------------</span>\n \n    <span class=\"kw1\">class</span> glfsr:\n        <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> polynom<span class=\"sy0\">,</span> initial_value<span class=\"br0\">)</span>:\n            <span class=\"kw2\">self</span>.<span class=\"me1\">polynom</span> <span class=\"sy0\">=</span> polynom | <span class=\"nu0\">1</span>\n            <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> initial_value\n            tmp <span class=\"sy0\">=</span> polynom\n \n            <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n            <span class=\"kw1\">while</span> tmp <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:\n                <span class=\"kw1\">if</span> tmp &amp; <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:\n                    tmp <span class=\"sy0\">=</span> tmp ^ <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span><span class=\"sy0\">;</span>\n \n                <span class=\"kw1\">if</span> tmp <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n                    <span class=\"kw1\">break</span>\n \n                <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span> <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>\n \n        <span class=\"kw1\">def</span> next_state<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n            <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>\n \n            retval <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n \n            <span class=\"kw1\">if</span> <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> &amp; <span class=\"kw2\">self</span>.<span class=\"me1\">mask</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:\n                retval <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n                <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">data</span> ^ <span class=\"kw2\">self</span>.<span class=\"me1\">polynom</span>\n \n            <span class=\"kw1\">return</span> retval\n \n    <span class=\"kw1\">class</span> sprng:\n        <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> polynom_d<span class=\"sy0\">,</span> init_value_d<span class=\"sy0\">,</span> polynom_c<span class=\"sy0\">,</span> init_value_c<span class=\"br0\">)</span>:\n            <span class=\"kw2\">self</span>.<span class=\"me1\">glfsr_d</span> <span class=\"sy0\">=</span> glfsr<span class=\"br0\">(</span>polynom_d<span class=\"sy0\">,</span> init_value_d<span class=\"br0\">)</span>\n            <span class=\"kw2\">self</span>.<span class=\"me1\">glfsr_c</span> <span class=\"sy0\">=</span> glfsr<span class=\"br0\">(</span>polynom_c<span class=\"sy0\">,</span> init_value_c<span class=\"br0\">)</span>\n \n        <span class=\"kw1\">def</span> next_byte<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n            byte <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n            bitpos <span class=\"sy0\">=</span> <span class=\"nu0\">7</span>\n \n            <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:\n                bit_d <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">glfsr_d</span>.<span class=\"me1\">next_state</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n                bit_c <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">glfsr_c</span>.<span class=\"me1\">next_state</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n \n                <span class=\"kw1\">if</span> bit_c <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:\n                    bit_r <span class=\"sy0\">=</span> bit_d\n                    byte <span class=\"sy0\">=</span> byte | <span class=\"br0\">(</span>bit_r <span class=\"sy0\">&lt;&lt;</span> bitpos<span class=\"br0\">)</span>\n \n                    bitpos <span class=\"sy0\">=</span> bitpos - <span class=\"nu0\">1</span>\n \n                    <span class=\"kw1\">if</span> bitpos <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>:\n                        <span class=\"kw1\">break</span>\n \n            <span class=\"kw1\">return</span> byte\n \n    <span class=\"co1\"># ----------------------------------------------------------------------------</span>\n    <span class=\"co1\"># Crypto4o functions end here</span>\n    <span class=\"co1\"># ----------------------------------------------------------------------------</span>\n \n    <span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n        prng <span class=\"sy0\">=</span> sprng<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>\n            <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n        <span class=\"kw1\">print</span> <span class=\"st0\">\"GLFSR D0: using polynom 0x%X, initial value: 0x%X.\"</span> % <span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">print</span> <span class=\"st0\">\"GLFSR C0: using polynom 0x%X, initial value: 0x%X.\"</span> % <span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n        f <span class=\"sy0\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rb\"</span><span class=\"br0\">)</span>\n        g <span class=\"sy0\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wb\"</span><span class=\"br0\">)</span>\n \n        <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:\n            input_ch <span class=\"sy0\">=</span> f.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n            <span class=\"kw1\">if</span> input_ch <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span>:\n                <span class=\"kw1\">break</span>\n \n            random_ch <span class=\"sy0\">=</span> prng.<span class=\"me1\">next_byte</span><span class=\"br0\">(</span><span class=\"br0\">)</span> &amp; <span class=\"nu0\">0xff</span>\n            g.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>input_ch<span class=\"br0\">)</span> ^ random_ch<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n        f.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n        g.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n \n    main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(129,46,'<pre class=\"de1\">\n<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> spare<span class=\"sy0\">;</span>\n<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isSpareReady <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n \n<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">double</span> getGaussian<span class=\"br0\">(</span><span class=\"kw4\">double</span> mean, <span class=\"kw4\">double</span> stdDev<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSpareReady<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        isSpareReady <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> spare <span class=\"sy0\">*</span> stdDev <span class=\"sy0\">+</span> mean<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">double</span> u, v, s<span class=\"sy0\">;</span>\n        <span class=\"kw1\">do</span> <span class=\"br0\">{</span>\n            u <span class=\"sy0\">=</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n            v <span class=\"sy0\">=</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n            s <span class=\"sy0\">=</span> u <span class=\"sy0\">*</span> u <span class=\"sy0\">+</span> v <span class=\"sy0\">*</span> v<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> s <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">double</span> mul <span class=\"sy0\">=</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">/</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        spare <span class=\"sy0\">=</span> v <span class=\"sy0\">*</span> mul<span class=\"sy0\">;</span>\n        isSpareReady <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> mean <span class=\"sy0\">+</span> stdDev <span class=\"sy0\">*</span> u <span class=\"sy0\">*</span> mul<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',7,1,NULL),(130,47,'<pre class=\"de1\">\n<span class=\"co1\"># Sort an array in place and return the number of writes.</span>\n<span class=\"kw1\">def</span> cycleSort<span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span>:\n  writes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n \n  <span class=\"co1\"># Loop through the array to find cycles to rotate.</span>\n  <span class=\"kw1\">for</span> cycleStart <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>:\n    item <span class=\"sy0\">=</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>cycleStart<span class=\"br0\">]</span>\n \n    <span class=\"co1\"># Find where to put the item.</span>\n    pos <span class=\"sy0\">=</span> cycleStart\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>cycleStart + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n      <span class=\"kw1\">if</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> item:\n        pos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># If the item is already there, this is not a cycle.</span>\n    <span class=\"kw1\">if</span> pos <span class=\"sy0\">==</span> cycleStart:\n      <span class=\"kw1\">continue</span>\n \n    <span class=\"co1\"># Otherwise, put the item there or right after any duplicates.</span>\n    <span class=\"kw1\">while</span> item <span class=\"sy0\">==</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>:\n      pos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">,</span> item <span class=\"sy0\">=</span> item<span class=\"sy0\">,</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>\n    writes +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># Rotate the rest of the cycle.</span>\n    <span class=\"kw1\">while</span> pos <span class=\"sy0\">!=</span> cycleStart:\n \n      <span class=\"co1\"># Find where to put the item.</span>\n      pos <span class=\"sy0\">=</span> cycleStart\n      <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>cycleStart + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">array</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        <span class=\"kw1\">if</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> item:\n          pos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n      <span class=\"co1\"># Put the item there or right after any duplicates.</span>\n      <span class=\"kw1\">while</span> item <span class=\"sy0\">==</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>:\n        pos +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n      <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">,</span> item <span class=\"sy0\">=</span> item<span class=\"sy0\">,</span> <span class=\"kw3\">array</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>\n      writes +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n  <span class=\"kw1\">return</span> writes\n</pre>',2,1,NULL),(131,48,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> get_radix_val<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>floor<span class=\"br0\">(</span>x / radix**digit<span class=\"br0\">)</span><span class=\"br0\">)</span> % radix\n \n<span class=\"kw1\">def</span> compute_offsets<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>:\n    counts <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>radix<span class=\"br0\">)</span><span class=\"br0\">]</span>\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>start<span class=\"sy0\">,</span> end<span class=\"br0\">)</span>:\n        val <span class=\"sy0\">=</span> get_radix_val<span class=\"br0\">(</span>a_list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n        counts<span class=\"br0\">[</span>val<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    offsets <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>radix<span class=\"br0\">)</span><span class=\"br0\">]</span>\n    <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>radix<span class=\"br0\">)</span>:\n        offsets<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span>\n        <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> counts<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n    <span class=\"kw1\">return</span> offsets\n \n<span class=\"kw1\">def</span> swap<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> offsets<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>:\n    i <span class=\"sy0\">=</span> start\n    next_free <span class=\"sy0\">=</span> <span class=\"kw3\">copy</span><span class=\"br0\">(</span>offsets<span class=\"br0\">)</span>\n    cur_block <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">while</span> cur_block <span class=\"sy0\">&lt;</span> radix-<span class=\"nu0\">1</span>:\n        <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> offsets<span class=\"br0\">[</span>cur_block+<span class=\"nu0\">1</span><span class=\"br0\">]</span>:\n            cur_block +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n            <span class=\"kw1\">continue</span>\n        radix_val <span class=\"sy0\">=</span> get_radix_val<span class=\"br0\">(</span>a_list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> radix_val <span class=\"sy0\">==</span> cur_block:\n            i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n            <span class=\"kw1\">continue</span>\n        swap_to <span class=\"sy0\">=</span> next_free<span class=\"br0\">[</span>radix_val<span class=\"br0\">]</span>\n        a_list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> a_list<span class=\"br0\">[</span>swap_to<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a_list<span class=\"br0\">[</span>swap_to<span class=\"br0\">]</span><span class=\"sy0\">,</span> a_list<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n        next_free<span class=\"br0\">[</span>radix_val<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n<span class=\"kw1\">def</span> american_flag_sort_helper<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>:\n    offsets <span class=\"sy0\">=</span> compute_offsets<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n    swap<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> offsets<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> end<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> digit <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n        <span class=\"kw1\">return</span>\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>offsets<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>:\n        american_flag_sort_helper<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> offsets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> offsets<span class=\"br0\">[</span>i+<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> digit-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> american_flag_sort<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>:\n    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> a_list:\n        <span class=\"kw1\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">type</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">int</span><span class=\"br0\">)</span>\n    max_val <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>\n    max_digit <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>floor<span class=\"br0\">(</span>log<span class=\"br0\">(</span>max_val<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    american_flag_sort_helper<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a_list<span class=\"br0\">)</span><span class=\"sy0\">,</span> max_digit<span class=\"sy0\">,</span> radix<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(132,49,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> bitonic_sort<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>:\n    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">1</span>:\n        <span class=\"kw1\">return</span> x\n    <span class=\"kw1\">else</span>: \n        first <span class=\"sy0\">=</span> bitonic_sort<span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span>x<span class=\"br0\">[</span>:<span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n        second <span class=\"sy0\">=</span> bitonic_sort<span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span>x<span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> bitonic_merge<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>first+second<span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> bitonic_merge<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>: \n    <span class=\"co1\"># assume input x is bitonic, and sorted list is returned </span>\n    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:\n        <span class=\"kw1\">return</span> x\n    <span class=\"kw1\">else</span>:\n        bitonic_compare<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>\n        first <span class=\"sy0\">=</span> bitonic_merge<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">[</span>:<span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n        second <span class=\"sy0\">=</span> bitonic_merge<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> first + second\n \n<span class=\"kw1\">def</span> bitonic_compare<span class=\"br0\">(</span>up<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>:\n    dist <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>dist<span class=\"br0\">)</span>:  \n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> x<span class=\"br0\">[</span>i+dist<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> up:\n            x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i+dist<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>i+dist<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"co1\">#swap</span>\n \n<span class=\"sy0\">&gt;&gt;&gt;</span> bitonic_sort<span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">330</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span><span class=\"nu0\">110</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">110</span><span class=\"sy0\">,</span> <span class=\"nu0\">330</span><span class=\"br0\">]</span>\n<span class=\"sy0\">&gt;&gt;&gt;</span> bitonic_sort<span class=\"br0\">(</span><span class=\"kw2\">False</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">330</span><span class=\"sy0\">,</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span><span class=\"nu0\">110</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">[</span><span class=\"nu0\">330</span><span class=\"sy0\">,</span> <span class=\"nu0\">110</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>\n</pre>',2,1,NULL),(133,50,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> xmin=purecmaes   <span class=\"co1\">% (mu/mu_w, lambda)-CMA-ES </span>\n \n  <span class=\"co1\">% --------------------  Initialization --------------------------------  </span>\n  <span class=\"co1\">% User defined input parameters (need to be edited)</span>\n  strfitnessfct = <span class=\"co2\">\'frosenbrock\'</span>;  <span class=\"co1\">% name of objective/fitness function</span>\n  N = <span class=\"nu0\">20</span>;               <span class=\"co1\">% number of objective variables/problem dimension</span>\n  xmean = <span class=\"kw2\">rand</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"co1\">% objective variables initial point</span>\n  sigma = <span class=\"nu0\">0.3</span>;          <span class=\"co1\">% coordinate wise standard deviation (step size)</span>\n  stopfitness = 1e-10;  <span class=\"co1\">% stop if fitness &lt; stopfitness (minimization)</span>\n  stopeval = 1e3*N^<span class=\"nu0\">2</span>;   <span class=\"co1\">% stop after stopeval number of function evaluations</span>\n \n  <span class=\"co1\">% Strategy parameter setting: Selection  </span>\n  lambda = <span class=\"nu0\">4</span>+<span class=\"kw2\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>*<span class=\"kw2\">log</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% population size, offspring number</span>\n  mu = lambda/<span class=\"nu0\">2</span>;               <span class=\"co1\">% number of parents/points for recombination</span>\n  weights = <span class=\"kw2\">log</span><span class=\"br0\">(</span>mu+<span class=\"nu0\">1</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>-<span class=\"kw2\">log</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span>\'; <span class=\"co1\">% muXone array for weighted recombination</span>\n  mu = <span class=\"kw2\">floor</span><span class=\"br0\">(</span>mu<span class=\"br0\">)</span>;        \n  weights = weights/<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span>;     <span class=\"co1\">% normalize recombination weights array</span>\n  mueff=<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span>^<span class=\"nu0\">2</span>/<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"co1\">% variance-effectiveness of sum w_i x_i</span>\n \n  <span class=\"co1\">% Strategy parameter setting: Adaptation</span>\n  cc = <span class=\"br0\">(</span><span class=\"nu0\">4</span>+mueff/N<span class=\"br0\">)</span> / <span class=\"br0\">(</span>N+<span class=\"nu0\">4</span> + <span class=\"nu0\">2</span>*mueff/N<span class=\"br0\">)</span>;  <span class=\"co1\">% time constant for cumulation for C</span>\n  cs = <span class=\"br0\">(</span>mueff+<span class=\"nu0\">2</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>N+mueff+<span class=\"nu0\">5</span><span class=\"br0\">)</span>;  <span class=\"co1\">% t-const for cumulation for sigma control</span>\n  c1 = <span class=\"nu0\">2</span> / <span class=\"br0\">(</span><span class=\"br0\">(</span>N+<span class=\"nu0\">1.3</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span>+mueff<span class=\"br0\">)</span>;    <span class=\"co1\">% learning rate for rank-one update of C</span>\n  cmu = <span class=\"kw2\">min</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>-c1, <span class=\"nu0\">2</span> * <span class=\"br0\">(</span>mueff-<span class=\"nu0\">2</span>+<span class=\"nu0\">1</span>/mueff<span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"br0\">(</span>N+<span class=\"nu0\">2</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span>+mueff<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% and for rank-mu update</span>\n  damps = <span class=\"nu0\">1</span> + <span class=\"nu0\">2</span>*<span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>mueff-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span>N+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + cs; <span class=\"co1\">% damping for sigma </span>\n                                                      <span class=\"co1\">% usually close to 1</span>\n  <span class=\"co1\">% Initialize dynamic (internal) strategy parameters and constants</span>\n  pc = <span class=\"kw2\">zeros</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; ps = <span class=\"kw2\">zeros</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"co1\">% evolution paths for C and sigma</span>\n  B = <span class=\"kw2\">eye</span><span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>;                       <span class=\"co1\">% B defines the coordinate system</span>\n  D = <span class=\"kw2\">ones</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;                      <span class=\"co1\">% diagonal D defines the scaling</span>\n  C = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^<span class=\"nu0\">2</span><span class=\"br0\">)</span> * B\';            <span class=\"co1\">% covariance matrix C</span>\n  invsqrtC = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^-<span class=\"nu0\">1</span><span class=\"br0\">)</span> * B\';    <span class=\"co1\">% C^-1/2 </span>\n  eigeneval = <span class=\"nu0\">0</span>;                      <span class=\"co1\">% track update of B and D</span>\n  chiN=N^<span class=\"nu0\">0.5</span>*<span class=\"br0\">(</span><span class=\"nu0\">1</span>-<span class=\"nu0\">1</span>/<span class=\"br0\">(</span><span class=\"nu0\">4</span>*N<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>/<span class=\"br0\">(</span><span class=\"nu0\">21</span>*N^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% expectation of </span>\n                                      <span class=\"co1\">%   ||N(0,I)|| == norm(randn(N,1))</span>\n \n  <span class=\"co1\">% -------------------- Generation Loop --------------------------------</span>\n  counteval = <span class=\"nu0\">0</span>;  <span class=\"co1\">% the next 40 lines contain the 20 lines of interesting code </span>\n  <span class=\"kw1\">while</span> counteval &lt; stopeval\n \n      <span class=\"co1\">% Generate and evaluate lambda offspring</span>\n      <span class=\"kw1\">for</span> k=<span class=\"nu0\">1</span>:lambda,\n          arx<span class=\"br0\">(</span>:,k<span class=\"br0\">)</span> = xmean + sigma * B * <span class=\"br0\">(</span>D .* <span class=\"kw2\">randn</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% m + sig * Normal(0,C) </span>\n          arfitness<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"kw2\">feval</span><span class=\"br0\">(</span>strfitnessfct, arx<span class=\"br0\">(</span>:,k<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% objective function call</span>\n          counteval = counteval+<span class=\"nu0\">1</span>;\n      <span class=\"kw1\">end</span>\n \n      <span class=\"co1\">% Sort by fitness and compute weighted mean into xmean</span>\n      <span class=\"br0\">[</span>arfitness, arindex<span class=\"br0\">]</span> = <span class=\"kw2\">sort</span><span class=\"br0\">(</span>arfitness<span class=\"br0\">)</span>; <span class=\"co1\">% minimization</span>\n      xold = xmean;\n      xmean = arx<span class=\"br0\">(</span>:,arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span><span class=\"br0\">)</span>*weights;   <span class=\"co1\">% recombination, new mean value</span>\n \n      <span class=\"co1\">% Cumulation: Update evolution paths</span>\n      ps = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-cs<span class=\"br0\">)</span>*ps <span class=\"sy0\">...</span> \n            + <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>cs*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cs<span class=\"br0\">)</span>*mueff<span class=\"br0\">)</span> * invsqrtC * <span class=\"br0\">(</span>xmean-xold<span class=\"br0\">)</span> / sigma; \n      hsig = <span class=\"kw2\">norm</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span>/<span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>-<span class=\"br0\">(</span><span class=\"nu0\">1</span>-cs<span class=\"br0\">)</span>^<span class=\"br0\">(</span><span class=\"nu0\">2</span>*counteval/lambda<span class=\"br0\">)</span><span class=\"br0\">)</span>/chiN &lt; <span class=\"nu0\">1.4</span> + <span class=\"nu0\">2</span>/<span class=\"br0\">(</span>N+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n      pc = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-cc<span class=\"br0\">)</span>*pc <span class=\"sy0\">...</span>\n            + hsig * <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>cc*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cc<span class=\"br0\">)</span>*mueff<span class=\"br0\">)</span> * <span class=\"br0\">(</span>xmean-xold<span class=\"br0\">)</span> / sigma; \n \n      <span class=\"co1\">% Adapt covariance matrix C</span>\n      artmp = <span class=\"br0\">(</span><span class=\"nu0\">1</span>/sigma<span class=\"br0\">)</span> * <span class=\"br0\">(</span>arx<span class=\"br0\">(</span>:,arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"kw2\">repmat</span><span class=\"br0\">(</span>xold,<span class=\"nu0\">1</span>,mu<span class=\"br0\">)</span><span class=\"br0\">)</span>;\n      C = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-c1-cmu<span class=\"br0\">)</span> * C <span class=\"sy0\">...</span>                  <span class=\"co1\">% regard old matrix  </span>\n           + c1 * <span class=\"br0\">(</span>pc*pc\' <span class=\"sy0\">...</span>                 <span class=\"co1\">% plus rank one update</span>\n                   + <span class=\"br0\">(</span><span class=\"nu0\">1</span>-hsig<span class=\"br0\">)</span> * cc*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cc<span class=\"br0\">)</span> * C<span class=\"br0\">)</span> <span class=\"sy0\">...</span> <span class=\"co1\">% minor correction if hsig==0</span>\n           + cmu * artmp * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span> * artmp\'; <span class=\"co1\">% plus rank mu update </span>\n \n      <span class=\"co1\">% Adapt step size sigma</span>\n      sigma = sigma * <span class=\"kw2\">exp</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cs/damps<span class=\"br0\">)</span>*<span class=\"br0\">(</span><span class=\"kw2\">norm</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span>/chiN - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; \n \n      <span class=\"co1\">% Decomposition of C into B*diag(D.^2)*B\' (diagonalization)</span>\n      <span class=\"kw1\">if</span> counteval - eigeneval &gt; lambda/<span class=\"br0\">(</span>c1+cmu<span class=\"br0\">)</span>/N/<span class=\"nu0\">10</span>  <span class=\"co1\">% to achieve O(N^2)</span>\n          eigeneval = counteval;\n          C = <span class=\"kw2\">triu</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> + <span class=\"kw2\">triu</span><span class=\"br0\">(</span>C,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\'; <span class=\"co1\">% enforce symmetry</span>\n          <span class=\"br0\">[</span>B,D<span class=\"br0\">]</span> = <span class=\"kw2\">eig</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>;           <span class=\"co1\">% eigen decomposition, B==normalized eigenvectors</span>\n          D = <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"kw2\">diag</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>;        <span class=\"co1\">% D is a vector of standard deviations now</span>\n          invsqrtC = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^-<span class=\"nu0\">1</span><span class=\"br0\">)</span> * B\';\n      <span class=\"kw1\">end</span>\n \n      <span class=\"co1\">% Break, if fitness is good enough or condition exceeds 1e14, better termination methods are advisable </span>\n      <span class=\"kw1\">if</span> arfitness<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt;= stopfitness || <span class=\"kw2\">max</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span> &gt; 1e7 * <span class=\"kw2\">min</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span>\n          <span class=\"kw1\">break</span>;\n      <span class=\"kw1\">end</span>\n \n  <span class=\"kw1\">end</span> <span class=\"co1\">% while, end generation loop</span>\n \n  xmin = arx<span class=\"br0\">(</span>:, arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% Return best point of last iteration.</span>\n                             <span class=\"co1\">% Notice that xmean is expected to be even</span>\n                             <span class=\"co1\">% better.</span>\n \n<span class=\"co1\">% ---------------------------------------------------------------  </span>\n<span class=\"kw1\">function</span> f=frosenbrock<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"kw2\">size</span><span class=\"br0\">(</span>x,<span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"kw2\">error</span><span class=\"br0\">(</span><span class=\"co2\">\'dimension must be greater one\'</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span>\n    f = <span class=\"nu0\">100</span>*<span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span> - x<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span><span class=\"br0\">)</span> + <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>;\n</pre>',16,1,NULL),(134,51,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> xmin=purecmaes   <span class=\"co1\">% (mu/mu_w, lambda)-CMA-ES </span>\n \n  <span class=\"co1\">% --------------------  Initialization --------------------------------  </span>\n  <span class=\"co1\">% User defined input parameters (need to be edited)</span>\n  strfitnessfct = <span class=\"co2\">\'frosenbrock\'</span>;  <span class=\"co1\">% name of objective/fitness function</span>\n  N = <span class=\"nu0\">20</span>;               <span class=\"co1\">% number of objective variables/problem dimension</span>\n  xmean = <span class=\"kw2\">rand</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"co1\">% objective variables initial point</span>\n  sigma = <span class=\"nu0\">0.3</span>;          <span class=\"co1\">% coordinate wise standard deviation (step size)</span>\n  stopfitness = 1e-10;  <span class=\"co1\">% stop if fitness &lt; stopfitness (minimization)</span>\n  stopeval = 1e3*N^<span class=\"nu0\">2</span>;   <span class=\"co1\">% stop after stopeval number of function evaluations</span>\n \n  <span class=\"co1\">% Strategy parameter setting: Selection  </span>\n  lambda = <span class=\"nu0\">4</span>+<span class=\"kw2\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>*<span class=\"kw2\">log</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% population size, offspring number</span>\n  mu = lambda/<span class=\"nu0\">2</span>;               <span class=\"co1\">% number of parents/points for recombination</span>\n  weights = <span class=\"kw2\">log</span><span class=\"br0\">(</span>mu+<span class=\"nu0\">1</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>-<span class=\"kw2\">log</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span>\'; <span class=\"co1\">% muXone array for weighted recombination</span>\n  mu = <span class=\"kw2\">floor</span><span class=\"br0\">(</span>mu<span class=\"br0\">)</span>;        \n  weights = weights/<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span>;     <span class=\"co1\">% normalize recombination weights array</span>\n  mueff=<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span>^<span class=\"nu0\">2</span>/<span class=\"kw2\">sum</span><span class=\"br0\">(</span>weights.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>; <span class=\"co1\">% variance-effectiveness of sum w_i x_i</span>\n \n  <span class=\"co1\">% Strategy parameter setting: Adaptation</span>\n  cc = <span class=\"br0\">(</span><span class=\"nu0\">4</span>+mueff/N<span class=\"br0\">)</span> / <span class=\"br0\">(</span>N+<span class=\"nu0\">4</span> + <span class=\"nu0\">2</span>*mueff/N<span class=\"br0\">)</span>;  <span class=\"co1\">% time constant for cumulation for C</span>\n  cs = <span class=\"br0\">(</span>mueff+<span class=\"nu0\">2</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>N+mueff+<span class=\"nu0\">5</span><span class=\"br0\">)</span>;  <span class=\"co1\">% t-const for cumulation for sigma control</span>\n  c1 = <span class=\"nu0\">2</span> / <span class=\"br0\">(</span><span class=\"br0\">(</span>N+<span class=\"nu0\">1.3</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span>+mueff<span class=\"br0\">)</span>;    <span class=\"co1\">% learning rate for rank-one update of C</span>\n  cmu = <span class=\"kw2\">min</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>-c1, <span class=\"nu0\">2</span> * <span class=\"br0\">(</span>mueff-<span class=\"nu0\">2</span>+<span class=\"nu0\">1</span>/mueff<span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"br0\">(</span>N+<span class=\"nu0\">2</span><span class=\"br0\">)</span>^<span class=\"nu0\">2</span>+mueff<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% and for rank-mu update</span>\n  damps = <span class=\"nu0\">1</span> + <span class=\"nu0\">2</span>*<span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>mueff-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span>N+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + cs; <span class=\"co1\">% damping for sigma </span>\n                                                      <span class=\"co1\">% usually close to 1</span>\n  <span class=\"co1\">% Initialize dynamic (internal) strategy parameters and constants</span>\n  pc = <span class=\"kw2\">zeros</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; ps = <span class=\"kw2\">zeros</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"co1\">% evolution paths for C and sigma</span>\n  B = <span class=\"kw2\">eye</span><span class=\"br0\">(</span>N,N<span class=\"br0\">)</span>;                       <span class=\"co1\">% B defines the coordinate system</span>\n  D = <span class=\"kw2\">ones</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;                      <span class=\"co1\">% diagonal D defines the scaling</span>\n  C = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^<span class=\"nu0\">2</span><span class=\"br0\">)</span> * B\';            <span class=\"co1\">% covariance matrix C</span>\n  invsqrtC = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^-<span class=\"nu0\">1</span><span class=\"br0\">)</span> * B\';    <span class=\"co1\">% C^-1/2 </span>\n  eigeneval = <span class=\"nu0\">0</span>;                      <span class=\"co1\">% track update of B and D</span>\n  chiN=N^<span class=\"nu0\">0.5</span>*<span class=\"br0\">(</span><span class=\"nu0\">1</span>-<span class=\"nu0\">1</span>/<span class=\"br0\">(</span><span class=\"nu0\">4</span>*N<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>/<span class=\"br0\">(</span><span class=\"nu0\">21</span>*N^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% expectation of </span>\n                                      <span class=\"co1\">%   ||N(0,I)|| == norm(randn(N,1))</span>\n \n  <span class=\"co1\">% -------------------- Generation Loop --------------------------------</span>\n  counteval = <span class=\"nu0\">0</span>;  <span class=\"co1\">% the next 40 lines contain the 20 lines of interesting code </span>\n  <span class=\"kw1\">while</span> counteval &lt; stopeval\n \n      <span class=\"co1\">% Generate and evaluate lambda offspring</span>\n      <span class=\"kw1\">for</span> k=<span class=\"nu0\">1</span>:lambda,\n          arx<span class=\"br0\">(</span>:,k<span class=\"br0\">)</span> = xmean + sigma * B * <span class=\"br0\">(</span>D .* <span class=\"kw2\">randn</span><span class=\"br0\">(</span>N,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% m + sig * Normal(0,C) </span>\n          arfitness<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"kw2\">feval</span><span class=\"br0\">(</span>strfitnessfct, arx<span class=\"br0\">(</span>:,k<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% objective function call</span>\n          counteval = counteval+<span class=\"nu0\">1</span>;\n      <span class=\"kw1\">end</span>\n \n      <span class=\"co1\">% Sort by fitness and compute weighted mean into xmean</span>\n      <span class=\"br0\">[</span>arfitness, arindex<span class=\"br0\">]</span> = <span class=\"kw2\">sort</span><span class=\"br0\">(</span>arfitness<span class=\"br0\">)</span>; <span class=\"co1\">% minimization</span>\n      xold = xmean;\n      xmean = arx<span class=\"br0\">(</span>:,arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span><span class=\"br0\">)</span>*weights;   <span class=\"co1\">% recombination, new mean value</span>\n \n      <span class=\"co1\">% Cumulation: Update evolution paths</span>\n      ps = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-cs<span class=\"br0\">)</span>*ps <span class=\"sy0\">...</span> \n            + <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>cs*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cs<span class=\"br0\">)</span>*mueff<span class=\"br0\">)</span> * invsqrtC * <span class=\"br0\">(</span>xmean-xold<span class=\"br0\">)</span> / sigma; \n      hsig = <span class=\"kw2\">norm</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span>/<span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>-<span class=\"br0\">(</span><span class=\"nu0\">1</span>-cs<span class=\"br0\">)</span>^<span class=\"br0\">(</span><span class=\"nu0\">2</span>*counteval/lambda<span class=\"br0\">)</span><span class=\"br0\">)</span>/chiN &lt; <span class=\"nu0\">1.4</span> + <span class=\"nu0\">2</span>/<span class=\"br0\">(</span>N+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;\n      pc = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-cc<span class=\"br0\">)</span>*pc <span class=\"sy0\">...</span>\n            + hsig * <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>cc*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cc<span class=\"br0\">)</span>*mueff<span class=\"br0\">)</span> * <span class=\"br0\">(</span>xmean-xold<span class=\"br0\">)</span> / sigma; \n \n      <span class=\"co1\">% Adapt covariance matrix C</span>\n      artmp = <span class=\"br0\">(</span><span class=\"nu0\">1</span>/sigma<span class=\"br0\">)</span> * <span class=\"br0\">(</span>arx<span class=\"br0\">(</span>:,arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span>:mu<span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"kw2\">repmat</span><span class=\"br0\">(</span>xold,<span class=\"nu0\">1</span>,mu<span class=\"br0\">)</span><span class=\"br0\">)</span>;\n      C = <span class=\"br0\">(</span><span class=\"nu0\">1</span>-c1-cmu<span class=\"br0\">)</span> * C <span class=\"sy0\">...</span>                  <span class=\"co1\">% regard old matrix  </span>\n           + c1 * <span class=\"br0\">(</span>pc*pc\' <span class=\"sy0\">...</span>                 <span class=\"co1\">% plus rank one update</span>\n                   + <span class=\"br0\">(</span><span class=\"nu0\">1</span>-hsig<span class=\"br0\">)</span> * cc*<span class=\"br0\">(</span><span class=\"nu0\">2</span>-cc<span class=\"br0\">)</span> * C<span class=\"br0\">)</span> <span class=\"sy0\">...</span> <span class=\"co1\">% minor correction if hsig==0</span>\n           + cmu * artmp * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>weights<span class=\"br0\">)</span> * artmp\'; <span class=\"co1\">% plus rank mu update </span>\n \n      <span class=\"co1\">% Adapt step size sigma</span>\n      sigma = sigma * <span class=\"kw2\">exp</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cs/damps<span class=\"br0\">)</span>*<span class=\"br0\">(</span><span class=\"kw2\">norm</span><span class=\"br0\">(</span>ps<span class=\"br0\">)</span>/chiN - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; \n \n      <span class=\"co1\">% Decomposition of C into B*diag(D.^2)*B\' (diagonalization)</span>\n      <span class=\"kw1\">if</span> counteval - eigeneval &gt; lambda/<span class=\"br0\">(</span>c1+cmu<span class=\"br0\">)</span>/N/<span class=\"nu0\">10</span>  <span class=\"co1\">% to achieve O(N^2)</span>\n          eigeneval = counteval;\n          C = <span class=\"kw2\">triu</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span> + <span class=\"kw2\">triu</span><span class=\"br0\">(</span>C,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\'; <span class=\"co1\">% enforce symmetry</span>\n          <span class=\"br0\">[</span>B,D<span class=\"br0\">]</span> = <span class=\"kw2\">eig</span><span class=\"br0\">(</span>C<span class=\"br0\">)</span>;           <span class=\"co1\">% eigen decomposition, B==normalized eigenvectors</span>\n          D = <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span><span class=\"kw2\">diag</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>;        <span class=\"co1\">% D is a vector of standard deviations now</span>\n          invsqrtC = B * <span class=\"kw2\">diag</span><span class=\"br0\">(</span>D.^-<span class=\"nu0\">1</span><span class=\"br0\">)</span> * B\';\n      <span class=\"kw1\">end</span>\n \n      <span class=\"co1\">% Break, if fitness is good enough or condition exceeds 1e14, better termination methods are advisable </span>\n      <span class=\"kw1\">if</span> arfitness<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt;= stopfitness || <span class=\"kw2\">max</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span> &gt; 1e7 * <span class=\"kw2\">min</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span>\n          <span class=\"kw1\">break</span>;\n      <span class=\"kw1\">end</span>\n \n  <span class=\"kw1\">end</span> <span class=\"co1\">% while, end generation loop</span>\n \n  xmin = arx<span class=\"br0\">(</span>:, arindex<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">% Return best point of last iteration.</span>\n                             <span class=\"co1\">% Notice that xmean is expected to be even</span>\n                             <span class=\"co1\">% better.</span>\n \n<span class=\"co1\">% ---------------------------------------------------------------  </span>\n<span class=\"kw1\">function</span> f=frosenbrock<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"kw2\">size</span><span class=\"br0\">(</span>x,<span class=\"nu0\">1</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"kw2\">error</span><span class=\"br0\">(</span><span class=\"co2\">\'dimension must be greater one\'</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span>\n    f = <span class=\"nu0\">100</span>*<span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span> - x<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span><span class=\"br0\">)</span> + <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span>:end-<span class=\"nu0\">1</span><span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>;\n</pre>',16,1,NULL),(135,52,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> threeWayPartition<span class=\"br0\">(</span><span class=\"kw4\">int</span> data<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> low<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> high<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> q<span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> low<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      swap<span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> data<span class=\"br0\">[</span><span class=\"sy0\">++</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"sy0\">++</span>i<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> high<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      swap<span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> data<span class=\"br0\">[</span><span class=\"sy0\">--</span>q<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n      <span class=\"sy0\">++</span>i<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(136,52,'<pre class=\"de1\">\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> DutchNationalFlag <span class=\"br0\">{</span>\n \n    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> dutchFlagSort<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr, <span class=\"kw4\">int</span> p, <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> p_index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> k_index <span class=\"sy0\">=</span> arr.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> k_index<span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        swap<span class=\"br0\">(</span>arr, i, p_index<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        p_index<span class=\"sy0\">++;</span>\n                        i<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        swap<span class=\"br0\">(</span>arr, i, k_index<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        k_index<span class=\"sy0\">--;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n                        i<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr, <span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> temp <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n \n <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(137,53,'<pre class=\"de1\">\n<span class=\"co2\">#include&lt;stdio.h&gt;</span>\n<span class=\"co2\">#include&lt;stdlib.h&gt;</span>\n<span class=\"co2\">#include&lt;string.h&gt;</span>\n<span class=\"co2\">#define swap(a,b) (a)=(b)+(a)-((b)=(a))</span>\n<span class=\"kw4\">int</span> last<span class=\"sy0\">,</span>queue<span class=\"br0\">[</span><span class=\"nu0\">1000008</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n \n<span class=\"co1\">//This routine rebalances the array..i.e. inserts the given number of spaces </span>\n<span class=\"co1\">//in between numbers with the help of a queue</span>\n<span class=\"kw4\">void</span> balance<span class=\"br0\">(</span><span class=\"kw4\">int</span> f<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> e<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> inserted<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> top<span class=\"sy0\">,</span>bottom<span class=\"sy0\">;</span>\n        top<span class=\"sy0\">=</span>bottom<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>s<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>t<span class=\"sy0\">;</span>\n        <span class=\"kw1\">while</span><span class=\"br0\">(</span>s<span class=\"sy0\">&lt;</span>inserted<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                t<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">while</span><span class=\"br0\">(</span>t<span class=\"sy0\">&lt;</span>e<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n                        <span class=\"br0\">{</span>\n                                queue<span class=\"br0\">[</span>bottom<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                        <span class=\"br0\">}</span>\n                        f<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n                        t<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n                        queue<span class=\"br0\">[</span>bottom<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                f<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>queue<span class=\"br0\">[</span>top<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                s<span class=\"sy0\">++;</span>\n        <span class=\"br0\">}</span>\n        last<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">//This routine inserts the element in the position found</span>\n<span class=\"co1\">//by binary search and then swaps the positions of the following </span>\n<span class=\"co1\">//elements till an empty space is hit</span>\n<span class=\"kw4\">void</span> insert<span class=\"br0\">(</span><span class=\"kw4\">int</span> f<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> element <span class=\"sy0\">,</span> <span class=\"kw4\">int</span> position<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"sy0\">=</span>element<span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>position<span class=\"sy0\">&gt;</span>last<span class=\"br0\">)</span>\n                        last<span class=\"sy0\">=</span>position<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n                <span class=\"kw4\">int</span> temp<span class=\"sy0\">=</span>element<span class=\"sy0\">;</span>\n                swap<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span>f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                position<span class=\"sy0\">++;</span>\n                <span class=\"kw1\">while</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        swap<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span>f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        position<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span>\n                f<span class=\"br0\">[</span>position<span class=\"br0\">]</span><span class=\"sy0\">=</span>temp<span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>position<span class=\"sy0\">&gt;</span>last<span class=\"br0\">)</span>\n                        last<span class=\"sy0\">=</span>position<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">//This routine applies a binary search on the final array for</span>\n<span class=\"co1\">//finding the place where the new element will be inserted</span>\n<span class=\"kw4\">void</span> find_place<span class=\"br0\">(</span><span class=\"kw4\">int</span> f<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> element<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> end<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> mid<span class=\"sy0\">=</span>start<span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span>end<span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>start<span class=\"sy0\">==</span>end<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        f<span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"sy0\">=</span>element<span class=\"sy0\">;</span>\n                        <span class=\"kw1\">if</span><span class=\"br0\">(</span>mid<span class=\"sy0\">&gt;</span>last<span class=\"br0\">)</span>\n                                last<span class=\"sy0\">=</span>mid<span class=\"sy0\">;</span>\n                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span>element<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        insert<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>mid<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span>\n                <span class=\"br0\">{</span>\n                        insert<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>mid<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw4\">int</span> m<span class=\"sy0\">=</span>mid<span class=\"sy0\">;</span>\n        <span class=\"kw1\">while</span><span class=\"br0\">(</span> m <span class=\"sy0\">&lt;</span> end <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">[</span>m<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span>\n                m<span class=\"sy0\">++;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>m<span class=\"sy0\">==</span>end<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"sy0\">&amp;&amp;</span>f<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span>element<span class=\"br0\">)</span>\n                        insert<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span>\n                        find_place<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>mid<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>m<span class=\"sy0\">==</span>start<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>element<span class=\"br0\">)</span>\n                        insert<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span>\n                        find_place<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">==</span>element<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        insert<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>element<span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        find_place<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">else</span>\n                        find_place<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>element<span class=\"sy0\">,</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">//The main function :)</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>e<span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,*</span>f<span class=\"sy0\">;</span>\n        <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>                              <span class=\"co1\">//Scan the number of elements.</span>\n        s<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"kw3\">malloc</span><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n                <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,&amp;</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span>                              <span class=\"co1\">// Choose the gap size.</span>\n        f<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"kw3\">malloc</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>e<span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>e<span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n                f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        last<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> inserted<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">while</span><span class=\"br0\">(</span> inserted <span class=\"sy0\">&lt;</span> n <span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n                k<span class=\"sy0\">=</span>inserted<span class=\"sy0\">;</span>\n                <span class=\"kw1\">while</span><span class=\"br0\">(</span>inserted <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">&amp;&amp;</span> k<span class=\"sy0\">--</span><span class=\"br0\">)</span>\n                <span class=\"br0\">{</span>\n                        find_place<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>last<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        inserted<span class=\"sy0\">++;</span>\n                        i<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span>\n                balance<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>e<span class=\"sy0\">,</span>inserted<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>e<span class=\"br0\">)</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n                        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(138,54,'<pre class=\"de1\">\n<span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span>  <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n          <span class=\"kw3\">sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"co1\"># use numeric comparison</span>\n          <span class=\"kw3\">map</span>  <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>    <span class=\"co1\"># calculate the length of the string</span>\n               <span class=\"re0\">@unsorted</span><span class=\"sy0\">;</span>\n</pre>',20,1,NULL),(139,54,'<pre class=\"de1\">\n<span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <span class=\"kw3\">map</span>  <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n          <span class=\"kw3\">sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n          <span class=\"kw3\">map</span>  <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> foo<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n               <span class=\"re0\">@unsorted</span><span class=\"sy0\">;</span>\n</pre>',20,1,NULL),(140,54,'<pre class=\"de1\">\n<span class=\"re0\">@sorted</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span> <span class=\"br0\">{</span> foo<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"kw1\">cmp</span> foo<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"re0\">@unsorted</span><span class=\"sy0\">;</span>\n</pre>',20,1,NULL),(141,54,'<pre class=\"de1\">\n<span class=\"co1\">#!/usr/bin/perl</span>\n<span class=\"kw3\">require</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\"># new features, new bugs!</span>\n<span class=\"kw3\">print</span>\n    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n    <span class=\"kw3\">sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">cmp</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"re0\">\\S</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"co5\">$/</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>\n    <span class=\"sy0\">&lt;&gt;;</span>\n</pre>',20,1,NULL),(142,55,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> \nRoughLog2<span class=\"br0\">(</span>DATATYPE input<span class=\"br0\">)</span> \n<span class=\"br0\">{</span>\n        <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> cResult <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"co1\">// The &amp;&amp; is necessary on some compilers to avoid infinite loops; it doesn\'t</span>\n        <span class=\"co1\">// significantly impair performance</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>input <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>input <span class=\"sy0\">&gt;&gt;</span> cResult<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>cResult <span class=\"sy0\">&lt;</span> DATA_SIZE<span class=\"br0\">)</span><span class=\"br0\">)</span> cResult<span class=\"sy0\">++;</span>\n        <span class=\"kw1\">else</span>\n                <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>input <span class=\"sy0\">&gt;&gt;</span> cResult<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>cResult <span class=\"sy0\">&lt;</span> DATA_SIZE<span class=\"br0\">)</span><span class=\"br0\">)</span> cResult<span class=\"sy0\">++;</span>\n        <span class=\"kw1\">return</span> cResult<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\nSIZETYPE\nGetMaxCount<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> logRange<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> uCount<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">unsigned</span> logSize <span class=\"sy0\">=</span> RoughLog2Size<span class=\"br0\">(</span>uCount<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">unsigned</span> uRelativeWidth <span class=\"sy0\">=</span> <span class=\"br0\">(</span>LOG_CONST <span class=\"sy0\">*</span> logRange<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span>logSize <span class=\"sy0\">&gt;</span> MAX_SPLITS<span class=\"br0\">)</span> <span class=\"sy0\">?</span> MAX_SPLITS <span class=\"sy0\">:</span> logSize<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"co1\">// Don\'t try to bitshift more than the size of an element</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>DATA_SIZE <span class=\"sy0\">&lt;=</span> uRelativeWidth<span class=\"br0\">)</span>\n                uRelativeWidth <span class=\"sy0\">=</span> DATA_SIZE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>uRelativeWidth <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>LOG_MEAN_BIN_SIZE <span class=\"sy0\">+</span> LOG_MIN_SPLIT_COUNT<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> \n                <span class=\"br0\">(</span>LOG_MEAN_BIN_SIZE <span class=\"sy0\">+</span> LOG_MIN_SPLIT_COUNT<span class=\"br0\">)</span> <span class=\"sy0\">:</span>  uRelativeWidth<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> \nFindExtremes<span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span>Array<span class=\"sy0\">,</span> SIZETYPE uCount<span class=\"sy0\">,</span> DATATYPE <span class=\"sy0\">&amp;</span> piMax<span class=\"sy0\">,</span> DATATYPE <span class=\"sy0\">&amp;</span> piMin<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        SIZETYPE u<span class=\"sy0\">;</span>\n        piMin <span class=\"sy0\">=</span> piMax <span class=\"sy0\">=</span> Array<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> u <span class=\"sy0\">&lt;</span> uCount<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>u<span class=\"br0\">)</span><span class=\"br0\">{</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> piMax<span class=\"br0\">)</span>\n                        piMax<span class=\"sy0\">=</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> piMin<span class=\"br0\">)</span>\n                        piMin<span class=\"sy0\">=</span> Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>       \n \n<span class=\"co1\">//---------------------SpreadSort Source-----------------</span>\n \nBin <span class=\"sy0\">*</span>\nSpreadSortCore<span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span>Array<span class=\"sy0\">,</span> SIZETYPE uCount<span class=\"sy0\">,</span> SIZETYPE <span class=\"sy0\">&amp;</span> uBinCount<span class=\"sy0\">,</span> DATATYPE <span class=\"sy0\">&amp;</span>iMax<span class=\"sy0\">,</span> DATATYPE <span class=\"sy0\">&amp;</span>iMin<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"co1\">// This step is roughly 10% of runtime but it helps avoid worst-case</span>\n        <span class=\"co1\">// behavior and improves behavior with real data.  If you know the</span>\n        <span class=\"co1\">// maximum and minimum ahead of time, you can pass those values in</span>\n        <span class=\"co1\">// and skip this step for the first iteration</span>\n        FindExtremes<span class=\"br0\">(</span><span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span><span class=\"br0\">)</span> Array<span class=\"sy0\">,</span> uCount<span class=\"sy0\">,</span> iMax<span class=\"sy0\">,</span> iMin<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>iMax <span class=\"sy0\">==</span> iMin<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span>\n        DATATYPE divMin<span class=\"sy0\">,</span>divMax<span class=\"sy0\">;</span>\n        SIZETYPE u<span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> LogDivisor<span class=\"sy0\">;</span>\n        Bin <span class=\"sy0\">*</span> BinArray<span class=\"sy0\">;</span>\n        Bin<span class=\"sy0\">*</span> CurrentBin<span class=\"sy0\">;</span>\n        <span class=\"kw4\">unsigned</span> logRange<span class=\"sy0\">;</span>\n        logRange <span class=\"sy0\">=</span> RoughLog2Size<span class=\"br0\">(</span><span class=\"br0\">(</span>SIZETYPE<span class=\"br0\">)</span>iMax<span class=\"sy0\">-</span>iMin<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>LogDivisor <span class=\"sy0\">=</span> logRange <span class=\"sy0\">-</span> RoughLog2Size<span class=\"br0\">(</span>uCount<span class=\"br0\">)</span> <span class=\"sy0\">+</span> LOG_MEAN_BIN_SIZE<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n                LogDivisor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"co1\">// The below if statement is only necessary on systems with high memory</span>\n        <span class=\"co1\">// latency relative to processor speed (most modern processors)</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>logRange <span class=\"sy0\">-</span> LogDivisor<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> MAX_SPLITS<span class=\"br0\">)</span>\n                LogDivisor <span class=\"sy0\">=</span> logRange <span class=\"sy0\">-</span> MAX_SPLITS<span class=\"sy0\">;</span>\n        divMin <span class=\"sy0\">=</span> iMin <span class=\"sy0\">&gt;&gt;</span> LogDivisor<span class=\"sy0\">;</span>\n        divMax <span class=\"sy0\">=</span> iMax <span class=\"sy0\">&gt;&gt;</span> LogDivisor<span class=\"sy0\">;</span>\n        uBinCount <span class=\"sy0\">=</span> divMax <span class=\"sy0\">-</span> divMin <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n \n        <span class=\"co1\">// Allocate the bins and determine their sizes</span>\n        BinArray <span class=\"sy0\">=</span> <span class=\"kw3\">calloc</span><span class=\"br0\">(</span>uBinCount<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Bin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"co1\">// Memory allocation failure check and clean return with sorted results</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>BinArray<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Using std::sort because of memory allocation failure<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                std<span class=\"sy0\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> Array <span class=\"sy0\">+</span> uCount<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co1\">// Calculating the size of each bin; this takes roughly 10% of runtime</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> u <span class=\"sy0\">&lt;</span> uCount<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>u<span class=\"br0\">)</span>\n                BinArray<span class=\"br0\">[</span><span class=\"br0\">(</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> LogDivisor<span class=\"br0\">)</span> <span class=\"sy0\">-</span> divMin<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span><span class=\"sy0\">++;</span>\n        <span class=\"co1\">// Assign the bin positions</span>\n        BinArray<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span><span class=\"br0\">)</span>Array<span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> u <span class=\"sy0\">&lt;</span> uBinCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> u<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                BinArray<span class=\"br0\">[</span>u <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">=</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">+</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span><span class=\"sy0\">;</span>\n                BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span> <span class=\"sy0\">=</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">-</span> Array<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span> <span class=\"sy0\">=</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">-</span> Array<span class=\"sy0\">;</span>\n \n        <span class=\"co1\">// Swap into place.  This dominates runtime, especially in the swap;</span>\n        <span class=\"co1\">// std::sort calls are the other main time-user.</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> u <span class=\"sy0\">&lt;</span> uCount<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>u<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw1\">for</span><span class=\"br0\">(</span>CurrentBin <span class=\"sy0\">=</span> BinArray <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> LogDivisor<span class=\"br0\">)</span> <span class=\"sy0\">-</span> divMin<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"br0\">(</span>CurrentBin<span class=\"sy0\">-&gt;</span>uCount <span class=\"sy0\">&gt;</span> u<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n                        CurrentBin <span class=\"sy0\">=</span> BinArray <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Array<span class=\"br0\">[</span>u<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> LogDivisor<span class=\"br0\">)</span> <span class=\"sy0\">-</span> divMin<span class=\"br0\">)</span><span class=\"br0\">)</span>\n                                SWAP<span class=\"br0\">(</span>Array <span class=\"sy0\">+</span> u<span class=\"sy0\">,</span> CurrentBin<span class=\"sy0\">-&gt;</span>CurrentPosition<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"co1\">// Now that we\'ve found the item belonging in this position,</span>\n                <span class=\"co1\">// increment the bucket count</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>CurrentBin<span class=\"sy0\">-&gt;</span>CurrentPosition <span class=\"sy0\">==</span> Array <span class=\"sy0\">+</span> u<span class=\"br0\">)</span>\n                        <span class=\"sy0\">++</span><span class=\"br0\">(</span>CurrentBin<span class=\"sy0\">-&gt;</span>CurrentPosition<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co1\">// If we\'ve bucketsorted, the array is sorted and we should skip recursion</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>LogDivisor<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">free</span><span class=\"br0\">(</span>BinArray<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> BinArray<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span>\nSpreadSortBins<span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span>Array<span class=\"sy0\">,</span> SIZETYPE uCount<span class=\"sy0\">,</span> SIZETYPE uBinCount<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> DATATYPE <span class=\"sy0\">&amp;</span>iMax\n                                <span class=\"sy0\">,</span> <span class=\"kw4\">const</span> DATATYPE <span class=\"sy0\">&amp;</span>iMin<span class=\"sy0\">,</span> Bin <span class=\"sy0\">*</span> BinArray<span class=\"sy0\">,</span> SIZETYPE uMaxCount<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        SIZETYPE u<span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>u <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> u <span class=\"sy0\">&lt;</span> uBinCount<span class=\"sy0\">;</span> u<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n                SIZETYPE count <span class=\"sy0\">=</span> <span class=\"br0\">(</span>BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span> <span class=\"sy0\">-</span> Array<span class=\"br0\">)</span> <span class=\"sy0\">-</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span><span class=\"sy0\">;</span>\n                <span class=\"co1\">// Don\'t sort unless there are at least two items to compare</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">if</span><span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> uMaxCount<span class=\"br0\">)</span>\n                        std<span class=\"sy0\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span>Array <span class=\"sy0\">+</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span><span class=\"sy0\">,</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">CurrentPosition</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">else</span>\n                        SpreadSortRec<span class=\"br0\">(</span>Array <span class=\"sy0\">+</span> BinArray<span class=\"br0\">[</span>u<span class=\"br0\">]</span>.<span class=\"me1\">uCount</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw3\">free</span><span class=\"br0\">(</span>BinArray<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> \nSpreadSortRec<span class=\"br0\">(</span>DATATYPE <span class=\"sy0\">*</span>Array<span class=\"sy0\">,</span> SIZETYPE uCount<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>uCount <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span><span class=\"sy0\">;</span>         \n        DATATYPE iMax<span class=\"sy0\">,</span> iMin<span class=\"sy0\">;</span>\n        SIZETYPE uBinCount<span class=\"sy0\">;</span>\n        Bin <span class=\"sy0\">*</span> BinArray <span class=\"sy0\">=</span> SpreadSortCore<span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> uCount<span class=\"sy0\">,</span> uBinCount<span class=\"sy0\">,</span> iMax<span class=\"sy0\">,</span> iMin<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>BinArray<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n        SpreadSortBins<span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> uCount<span class=\"sy0\">,</span> uBinCount<span class=\"sy0\">,</span> iMax<span class=\"sy0\">,</span> iMin<span class=\"sy0\">,</span> BinArray<span class=\"sy0\">,</span>\n                       GetMaxCount<span class=\"br0\">(</span>RoughLog2Size<span class=\"br0\">(</span><span class=\"br0\">(</span>SIZETYPE<span class=\"br0\">)</span>iMax<span class=\"sy0\">-</span>iMin<span class=\"br0\">)</span><span class=\"sy0\">,</span> uCount<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(143,56,'<pre class=\"de1\">\n algorithm stoogesort<span class=\"br0\">(</span>array L<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> length<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n     <span class=\"kw1\">if</span> L<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> L<span class=\"br0\">[</span>i<span class=\"br0\">]</span> then\n         L<span class=\"br0\">[</span>i<span class=\"br0\">]</span> ↔ L<span class=\"br0\">[</span>j<span class=\"br0\">]</span>\n     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> then\n         t <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span>\n         stoogesort<span class=\"br0\">(</span>L<span class=\"sy0\">,</span> i  <span class=\"sy0\">,</span> j<span class=\"sy0\">-</span>t<span class=\"br0\">)</span>\n         stoogesort<span class=\"br0\">(</span>L<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span>t<span class=\"sy0\">,</span> j  <span class=\"br0\">)</span>\n         stoogesort<span class=\"br0\">(</span>L<span class=\"sy0\">,</span> i  <span class=\"sy0\">,</span> j<span class=\"sy0\">-</span>t<span class=\"br0\">)</span>\n     <span class=\"kw1\">return</span> L\n</pre>',10,1,NULL),(144,57,'<pre class=\"de1\">\nmerge <span class=\"br0\">[</span><span class=\"br0\">]</span> l <span class=\"sy0\">=</span> l\nmerge l <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l\nmerge l1@<span class=\"br0\">(</span>x1<span class=\"sy0\">:</span>r1<span class=\"br0\">)</span> l2@<span class=\"br0\">(</span>x2<span class=\"sy0\">:</span>r2<span class=\"br0\">)</span> <span class=\"sy0\">=</span>\n    <span class=\"kw1\">if</span> x1 <span class=\"sy0\">&lt;</span> x2 <span class=\"kw1\">then</span> x1<span class=\"sy0\">:</span><span class=\"br0\">(</span>merge r1 l2<span class=\"br0\">)</span> <span class=\"kw1\">else</span> x2<span class=\"sy0\">:</span><span class=\"br0\">(</span>merge l1 r2<span class=\"br0\">)</span>\n \nssort <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\nssort l <span class=\"sy0\">=</span> merge strand <span class=\"br0\">(</span>ssort rest<span class=\"br0\">)</span>\n    where <span class=\"br0\">(</span>strand, rest<span class=\"br0\">)</span> <span class=\"sy0\">=</span> foldr extend <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> l\n          extend x <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>,r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span>,r<span class=\"br0\">)</span>\n          extend x <span class=\"br0\">(</span>s<span class=\"sy0\">:</span>ss,r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;=</span> s <span class=\"kw1\">then</span> <span class=\"br0\">(</span>x<span class=\"sy0\">:</span>s<span class=\"sy0\">:</span>ss,r<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span>ss,x<span class=\"sy0\">:</span>r<span class=\"br0\">)</span>\n</pre>',13,1,NULL),(145,57,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> strandsort<span class=\"br0\">(</span><span class=\"kw3\">array</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw3\">count</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"re0\">$sublist</span> <span class=\"sy0\">=</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"re0\">$sublist</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">array_shift</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"kw3\">count</span><span class=\"br0\">(</span><span class=\"re0\">$sublist</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$arr</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$val</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$sublist</span><span class=\"br0\">[</span><span class=\"re0\">$last</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"re0\">$sublist</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$val</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">unset</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"re0\">$last</span><span class=\"sy0\">++;</span>\n      <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw3\">empty</span><span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$sublist</span> <span class=\"kw1\">as</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"re0\">$spliced</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$result</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$rval</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$val</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$rval</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"kw3\">array_splice</span><span class=\"br0\">(</span><span class=\"re0\">$result</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            <span class=\"re0\">$spliced</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span>\n            <span class=\"kw1\">break</span><span class=\"sy0\">;</span>\n          <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$spliced</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n          <span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$val</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n      <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n      <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sublist</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',3,1,NULL),(146,57,'<pre class=\"de1\">\nitems <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>unsorted<span class=\"br0\">)</span>\nsortedBins <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>unsorted<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>:\n    highest <span class=\"sy0\">=</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">\"-inf\"</span><span class=\"br0\">)</span>\n    newBin <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">while</span><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>unsorted<span class=\"br0\">)</span> <span class=\"br0\">)</span>:\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span> unsorted<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> highest <span class=\"br0\">)</span>:\n            highest <span class=\"sy0\">=</span> unsorted.<span class=\"me1\">pop</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>\n            newBin.<span class=\"me1\">append</span><span class=\"br0\">(</span> highest <span class=\"br0\">)</span>\n        <span class=\"kw1\">else</span>:\n            i<span class=\"sy0\">=</span>i+<span class=\"nu0\">1</span>\n    sortedBins.<span class=\"me1\">append</span><span class=\"br0\">(</span>newBin<span class=\"br0\">)</span>\n \n<span class=\"kw2\">sorted</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> items <span class=\"br0\">)</span>:\n    lowBin <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>sortedBins<span class=\"br0\">)</span> <span class=\"br0\">)</span>:\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span> sortedBins<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> sortedBins<span class=\"br0\">[</span>lowBin<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span>:\n            lowBin <span class=\"sy0\">=</span> j\n    <span class=\"kw2\">sorted</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> sortedBins<span class=\"br0\">[</span>lowBin<span class=\"br0\">]</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>sortedBins<span class=\"br0\">[</span>lowBin<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>:\n        <span class=\"kw1\">del</span> sortedBins<span class=\"br0\">[</span>lowBin<span class=\"br0\">]</span>\n</pre>',2,1,NULL),(147,58,'<pre class=\"de1\">\nSTRUCTURE BinaryTree\n    BinaryTree:LeftSubTree\n    Object:Node\n    BinaryTree:RightSubTree\n<span class=\"kw3\">END</span> STRUCTURE\n \nPROCEDURE Insert<span class=\"br0\">(</span>BinaryTree:searchTree<span class=\"sy0\">,</span> Object:item<span class=\"br0\">)</span>\n    <span class=\"kw1\">IF</span> searchTree <span class=\"kw3\">IS</span> NULL <span class=\"kw1\">THEN</span>\n        SET searchTree.Node <span class=\"kw1\">TO</span> item\n    <span class=\"kw1\">ELSE</span>\n        <span class=\"kw1\">IF</span> item <span class=\"kw3\">IS</span> LESS THAN searchTree.Node <span class=\"kw1\">THEN</span>\n            Insert<span class=\"br0\">(</span>searchTree.LeftSubTree<span class=\"sy0\">,</span> item<span class=\"br0\">)</span>\n        <span class=\"kw1\">ELSE</span>\n            Insert<span class=\"br0\">(</span>searchTree.RightSubTree<span class=\"sy0\">,</span> item<span class=\"br0\">)</span>\n        <span class=\"kw3\">END</span> <span class=\"kw1\">IF</span>\n    <span class=\"kw3\">END</span> <span class=\"kw1\">IF</span>\n<span class=\"kw3\">END</span> PROCEDURE\n \nPROCEDURE InOrder<span class=\"br0\">(</span>BinaryTree:searchTree<span class=\"br0\">)</span>\n    <span class=\"kw1\">IF</span> searchTree <span class=\"kw3\">IS</span> NULL <span class=\"kw1\">THEN</span>\n        <span class=\"kw3\">EXIT</span> PROCEDURE\n    <span class=\"kw1\">ELSE</span>\n        InOrder<span class=\"br0\">(</span>searchTree.LeftSubTree<span class=\"br0\">)</span>\n        <span class=\"kw3\">PRINT</span> searchTree.Node\n        InOrder<span class=\"br0\">(</span>searchTree.RightSubTree<span class=\"br0\">)</span>\n    <span class=\"kw3\">END</span> <span class=\"kw1\">IF</span>\n<span class=\"kw3\">END</span> PROCEDURE\n \nPROCEDURE TreeSort<span class=\"br0\">(</span>Array:items<span class=\"br0\">)</span>\n    BinaryTree:searchTree\n \n    <span class=\"kw1\">FOR</span> EACH individualItem IN items\n        Insert<span class=\"br0\">(</span>searchTree<span class=\"sy0\">,</span> individualItem<span class=\"br0\">)</span>\n    <span class=\"kw3\">END</span> <span class=\"kw1\">FOR</span>\n \n    InOrder<span class=\"br0\">(</span>searchTree<span class=\"br0\">)</span>\n<span class=\"kw3\">END</span> PROCEDURE\n</pre>',22,1,NULL),(148,58,'<pre class=\"de1\">\n<span class=\"kw1\">data</span> Tree a <span class=\"sy0\">=</span> Leaf <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span> a <span class=\"br0\">(</span>Tree a<span class=\"br0\">)</span>\n \ninsert <span class=\"sy0\">::</span> <span class=\"kw4\">Ord</span> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> Tree a <span class=\"sy0\">-&gt;</span> Tree a\ninsert x Leaf <span class=\"sy0\">=</span> Node Leaf x Leaf\ninsert x <span class=\"br0\">(</span>Node t y s<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;=</span> y <span class=\"sy0\">=</span> Node <span class=\"br0\">(</span>insert x t<span class=\"br0\">)</span> y s\ninsert x <span class=\"br0\">(</span>Node t y s<span class=\"br0\">)</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&gt;</span> y <span class=\"sy0\">=</span> Node t y <span class=\"br0\">(</span>insert x s<span class=\"br0\">)</span>\n \nflatten <span class=\"sy0\">::</span> Tree a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span>\nflatten Leaf <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\nflatten <span class=\"br0\">(</span>Node t x s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> flatten t <span class=\"sy0\">++</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">++</span> flatten s\n \ntreesort <span class=\"sy0\">::</span> <span class=\"kw4\">Ord</span> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span>\ntreesort <span class=\"sy0\">=</span> flatten <span class=\"sy0\">.</span> <span class=\"kw3\">foldr</span> insert Leaf\n</pre>',15,1,NULL),(149,59,'<pre class=\"de1\">\n<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> samplesToProduce<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"co1\">//select the middle six digits for the next seed</span>\n        newseed <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span>\n \n        <span class=\"co1\">//The sequence will almost always go to zero, so an improvement </span>\n        <span class=\"co1\">//to the algorithm would be reseeding with the time as seen below.</span>\n        <span class=\"coMULTI\">/*\n        if (newseed &lt; threshHold){\n                newseed = time(NULL);\n        }\n        */</span>\n \n        x <span class=\"sy0\">=</span> newseed <span class=\"sy0\">*</span> newseed<span class=\"sy0\">;</span> \n        storageArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span>            \n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(150,60,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> compare_and_swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:\n    <span class=\"kw1\">if</span> x<span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span>:\n        x<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>a<span class=\"br0\">]</span>\n \n<span class=\"kw1\">def</span> oddeven_merge<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> r<span class=\"br0\">)</span>:\n    step <span class=\"sy0\">=</span> r * <span class=\"nu0\">2</span>\n    <span class=\"kw1\">if</span> step <span class=\"sy0\">&lt;</span> hi - lo:\n        oddeven_merge<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> step<span class=\"br0\">)</span>\n        oddeven_merge<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo + r<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> step<span class=\"br0\">)</span>\n        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>lo + r<span class=\"sy0\">,</span> hi - r<span class=\"sy0\">,</span> step<span class=\"br0\">)</span>:\n            compare_and_swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i + r<span class=\"br0\">)</span>\n    <span class=\"kw1\">else</span>:\n        compare_and_swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> lo + r<span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> oddeven_merge_sort_range<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> hi<span class=\"br0\">)</span>:\n    <span class=\"st0\">\"\"\" sort the part of x with indices between lo and hi.\n \n    Note: endpoints (lo and hi) are included.\n    \"\"\"</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hi - lo<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span>:\n        <span class=\"co1\"># if there is more than one element, split the input</span>\n        <span class=\"co1\"># down the middle and first sort the first and second</span>\n        <span class=\"co1\"># half, followed by merging them.</span>\n        mid <span class=\"sy0\">=</span> lo + <span class=\"br0\">(</span><span class=\"br0\">(</span>hi - lo<span class=\"br0\">)</span> // <span class=\"nu0\">2</span><span class=\"br0\">)</span>\n        oddeven_merge_sort_range<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> mid<span class=\"br0\">)</span>\n        oddeven_merge_sort_range<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> mid + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> hi<span class=\"br0\">)</span>\n        oddeven_merge<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> lo<span class=\"sy0\">,</span> hi<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n<span class=\"kw1\">def</span> oddeven_merge_sort<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:\n    oddeven_merge_sort_range<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n<span class=\"sy0\">&gt;&gt;&gt;</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>\n<span class=\"sy0\">&gt;&gt;&gt;</span> oddeven_merge_sort<span class=\"br0\">(</span>data<span class=\"br0\">)</span>\n<span class=\"sy0\">&gt;&gt;&gt;</span> data\n<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span>\n</pre>',2,1,NULL),(151,61,'<pre class=\"de1\">\n    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> runTest<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> array.<span class=\"me1\">length</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> t <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>N<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n        b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> l<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                d <span class=\"sy0\">^=</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> array<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">System</span>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>c, <span class=\"nu0\">0</span>, t, <span class=\"nu0\">0</span>, N<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw4\">int</span> N_M <span class=\"sy0\">=</span> n − m<span class=\"sy0\">;</span>\n                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> N − N_M<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                    c<span class=\"br0\">[</span>N_M <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">^=</span> b<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                    l <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> l<span class=\"sy0\">;</span>\n                    m <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span>\n                    <span class=\"kw3\">System</span>.<span class=\"me1\">arraycopy</span><span class=\"br0\">(</span>t, <span class=\"nu0\">0</span>, b, <span class=\"nu0\">0</span>, N<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"br0\">}</span>\n            <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> l<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(152,61,'<pre class=\"de1\">\n  polynomial<span class=\"br0\">(</span>field K<span class=\"br0\">)</span> s<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ... <span class=\"coMULTI\">/* coeffs are s_j; output sequence as N-1 degree polynomial) */</span>\n  <span class=\"coMULTI\">/* connection polynomial */</span>\n  polynomial<span class=\"br0\">(</span>field K<span class=\"br0\">)</span> C<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* coeffs are c_j */</span>\n  polynomial<span class=\"br0\">(</span>field K<span class=\"br0\">)</span> B<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  field K b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* calculate discrepancy */</span>\n      field K d <span class=\"sy0\">=</span> s_n <span class=\"sy0\">+</span> \\Sigma_<span class=\"br0\">{</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">^</span>L c_i <span class=\"sy0\">*</span> s_<span class=\"br0\">{</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* annihilation continues */</span>\n          m <span class=\"sy0\">=</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> L <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* temporary copy of C(x) */</span>\n          polynomial<span class=\"br0\">(</span>field K<span class=\"br0\">)</span> T<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n          C<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> d b<span class=\"sy0\">^</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> x<span class=\"sy0\">^</span>m B<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n          L <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> L<span class=\"sy0\">;</span>\n          B<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> T<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n          b <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span>\n          m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n      <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n          C<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> d b<span class=\"sy0\">^</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> x<span class=\"sy0\">^</span>m B<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n          m <span class=\"sy0\">=</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n  <span class=\"kw1\">return</span> L<span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(153,62,'<pre class=\"de1\">\nfindingA_LV<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"sy1\">,</span> n<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n    <span class=\"kw1\">repeat</span>\n        Randomly select one element out <span class=\"kw1\">of</span> n elements<span class=\"sy1\">.</span>\n    <span class=\"kw1\">until</span> <span class=\"st0\">\'a\'</span> is found\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(154,62,'<pre class=\"de1\">\nfindingA_MC<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> k<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n    i<span class=\"sy3\">=</span><span class=\"nu0\">0</span>\n    <span class=\"kw1\">repeat</span>\n        Randomly select one element out <span class=\"kw1\">of</span> n elements<span class=\"sy1\">.</span>\n        <span class=\"me1\">i</span> <span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">until</span> i<span class=\"sy3\">=</span>k <span class=\"kw1\">or</span> <span class=\"st0\">\'a\'</span> is found\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(155,63,'<pre class=\"de1\">\nfindingA_LV<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"sy1\">,</span> n<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n    <span class=\"kw1\">repeat</span>\n        Randomly select one element out <span class=\"kw1\">of</span> n elements<span class=\"sy1\">.</span>\n    <span class=\"kw1\">until</span> <span class=\"st0\">\'a\'</span> is found\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(156,63,'<pre class=\"de1\">\nfindingA_MC<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> k<span class=\"br0\">)</span>\n<span class=\"kw1\">begin</span>\n    i<span class=\"sy3\">=</span><span class=\"nu0\">0</span>\n    <span class=\"kw1\">repeat</span>\n        Randomly select one element out <span class=\"kw1\">of</span> n elements<span class=\"sy1\">.</span>\n        <span class=\"me1\">i</span> <span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>\n    <span class=\"kw1\">until</span> i<span class=\"sy3\">=</span>k <span class=\"kw1\">or</span> <span class=\"st0\">\'a\'</span> is found\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(157,64,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdint.h&gt;</span>\n<span class=\"kw4\">uint32_t</span> xor128<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">123456789</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">362436069</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> z <span class=\"sy0\">=</span> <span class=\"nu0\">521288629</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> w <span class=\"sy0\">=</span> <span class=\"nu0\">88675123</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">uint32_t</span> t<span class=\"sy0\">;</span>\n \n  t <span class=\"sy0\">=</span> x <span class=\"sy0\">^</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  x <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span> y <span class=\"sy0\">=</span> z<span class=\"sy0\">;</span> z <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span>\n  <span class=\"kw1\">return</span> w <span class=\"sy0\">=</span> w <span class=\"sy0\">^</span> <span class=\"br0\">(</span>w <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>t <span class=\"sy0\">^</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(158,65,'<pre class=\"de1\">\nstates <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'Healthy\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span><span class=\"br0\">)</span>\nend_state <span class=\"sy0\">=</span> <span class=\"st0\">\'E\'</span>\n \nobservations <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'normal\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span><span class=\"br0\">)</span>\n \nstart_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.6</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.4</span><span class=\"br0\">}</span>\n \ntransition_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.69</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"st0\">\'E\'</span>: <span class=\"nu0\">0.01</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.59</span><span class=\"sy0\">,</span> <span class=\"st0\">\'E\'</span>: <span class=\"nu0\">0.01</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n \nemission_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.6</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n</pre>',2,1,NULL),(159,65,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> fwd_bkw<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> states<span class=\"sy0\">,</span> a_0<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> end_st<span class=\"br0\">)</span>:\n    L <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>\n \n    fwd <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    f_prev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"co1\"># forward part of the algorithm</span>\n    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x_i <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>:\n        f_curr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n        <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n                <span class=\"co1\"># base case for the forward part</span>\n                prev_f_sum <span class=\"sy0\">=</span> a_0<span class=\"br0\">[</span>st<span class=\"br0\">]</span>\n            <span class=\"kw1\">else</span>:\n                prev_f_sum <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f_prev<span class=\"br0\">[</span>k<span class=\"br0\">]</span>*a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n            f_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>x_i<span class=\"br0\">]</span> * prev_f_sum\n \n        fwd.<span class=\"me1\">append</span><span class=\"br0\">(</span>f_curr<span class=\"br0\">)</span>\n        f_prev <span class=\"sy0\">=</span> f_curr\n \n    p_fwd <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f_curr<span class=\"br0\">[</span>k<span class=\"br0\">]</span>*a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>end_st<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n    bkw <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    b_prev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"co1\"># backward part of the algorithm</span>\n    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x_i_plus <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span><span class=\"kw2\">reversed</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>+<span class=\"br0\">(</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        b_curr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n        <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n                <span class=\"co1\"># base case for backward part</span>\n                b_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>end_st<span class=\"br0\">]</span>\n            <span class=\"kw1\">else</span>:\n                b_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span>*e<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span>x_i_plus<span class=\"br0\">]</span>*b_prev<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n        bkw.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>b_curr<span class=\"br0\">)</span>\n        b_prev <span class=\"sy0\">=</span> b_curr\n \n    p_bkw <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>a_0<span class=\"br0\">[</span>l<span class=\"br0\">]</span> * e<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> * b_curr<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n    <span class=\"co1\"># merging the two parts</span>\n    posterior <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n        posterior<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>fwd<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span>*bkw<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span>/p_fwd <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">]</span>\n \n    <span class=\"kw1\">assert</span> p_fwd <span class=\"sy0\">==</span> p_bkw\n    <span class=\"kw1\">return</span> fwd<span class=\"sy0\">,</span> bkw<span class=\"sy0\">,</span> posterior\n</pre>',2,1,NULL),(160,65,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> fwd_bkw<span class=\"br0\">(</span>observations<span class=\"sy0\">,</span>\n                   states<span class=\"sy0\">,</span>\n                   start_probability<span class=\"sy0\">,</span>\n                   transition_probability<span class=\"sy0\">,</span>\n                   emission_probability<span class=\"sy0\">,</span>\n                   end_state<span class=\"br0\">)</span>\n \n<span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\' \'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(161,66,'<pre class=\"de1\">\nstates <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'Healthy\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span><span class=\"br0\">)</span>\nend_state <span class=\"sy0\">=</span> <span class=\"st0\">\'E\'</span>\n \nobservations <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\'normal\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span><span class=\"br0\">)</span>\n \nstart_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.6</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.4</span><span class=\"br0\">}</span>\n \ntransition_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.69</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"st0\">\'E\'</span>: <span class=\"nu0\">0.01</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'Healthy\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'Fever\'</span>: <span class=\"nu0\">0.59</span><span class=\"sy0\">,</span> <span class=\"st0\">\'E\'</span>: <span class=\"nu0\">0.01</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n \nemission_probability <span class=\"sy0\">=</span> <span class=\"br0\">{</span>\n   <span class=\"st0\">\'Healthy\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.5</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.4</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"st0\">\'Fever\'</span> : <span class=\"br0\">{</span><span class=\"st0\">\'normal\'</span>: <span class=\"nu0\">0.1</span><span class=\"sy0\">,</span> <span class=\"st0\">\'cold\'</span>: <span class=\"nu0\">0.3</span><span class=\"sy0\">,</span> <span class=\"st0\">\'dizzy\'</span>: <span class=\"nu0\">0.6</span><span class=\"br0\">}</span><span class=\"sy0\">,</span>\n   <span class=\"br0\">}</span>\n</pre>',2,1,NULL),(162,66,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> fwd_bkw<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> states<span class=\"sy0\">,</span> a_0<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> end_st<span class=\"br0\">)</span>:\n    L <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>\n \n    fwd <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    f_prev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"co1\"># forward part of the algorithm</span>\n    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x_i <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>:\n        f_curr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n        <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n                <span class=\"co1\"># base case for the forward part</span>\n                prev_f_sum <span class=\"sy0\">=</span> a_0<span class=\"br0\">[</span>st<span class=\"br0\">]</span>\n            <span class=\"kw1\">else</span>:\n                prev_f_sum <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f_prev<span class=\"br0\">[</span>k<span class=\"br0\">]</span>*a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n            f_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> e<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>x_i<span class=\"br0\">]</span> * prev_f_sum\n \n        fwd.<span class=\"me1\">append</span><span class=\"br0\">(</span>f_curr<span class=\"br0\">)</span>\n        f_prev <span class=\"sy0\">=</span> f_curr\n \n    p_fwd <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>f_curr<span class=\"br0\">[</span>k<span class=\"br0\">]</span>*a<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>end_st<span class=\"br0\">]</span> <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n    bkw <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    b_prev <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"co1\"># backward part of the algorithm</span>\n    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> x_i_plus <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span><span class=\"kw2\">reversed</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>+<span class=\"br0\">(</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        b_curr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n        <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n            <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n                <span class=\"co1\"># base case for backward part</span>\n                b_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>end_st<span class=\"br0\">]</span>\n            <span class=\"kw1\">else</span>:\n                b_curr<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>st<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span>*e<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span>x_i_plus<span class=\"br0\">]</span>*b_prev<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n        bkw.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>b_curr<span class=\"br0\">)</span>\n        b_prev <span class=\"sy0\">=</span> b_curr\n \n    p_bkw <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>a_0<span class=\"br0\">[</span>l<span class=\"br0\">]</span> * e<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> * b_curr<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"kw1\">for</span> l <span class=\"kw1\">in</span> states<span class=\"br0\">)</span>\n \n    <span class=\"co1\"># merging the two parts</span>\n    posterior <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n    <span class=\"kw1\">for</span> st <span class=\"kw1\">in</span> states:\n        posterior<span class=\"br0\">[</span>st<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>fwd<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span>*bkw<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>st<span class=\"br0\">]</span>/p_fwd <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">]</span>\n \n    <span class=\"kw1\">assert</span> p_fwd <span class=\"sy0\">==</span> p_bkw\n    <span class=\"kw1\">return</span> fwd<span class=\"sy0\">,</span> bkw<span class=\"sy0\">,</span> posterior\n</pre>',2,1,NULL),(163,66,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> fwd_bkw<span class=\"br0\">(</span>observations<span class=\"sy0\">,</span>\n                   states<span class=\"sy0\">,</span>\n                   start_probability<span class=\"sy0\">,</span>\n                   transition_probability<span class=\"sy0\">,</span>\n                   emission_probability<span class=\"sy0\">,</span>\n                   end_state<span class=\"br0\">)</span>\n \n<span class=\"kw1\">for</span> line <span class=\"kw1\">in</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span>:\n    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\' \'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',2,1,NULL),(164,67,'<pre class=\"de1\">\n    <span class=\"kw1\">def</span> cmp_zorder<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:\n        j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>dim<span class=\"br0\">)</span>:\n            y <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>k<span class=\"br0\">]</span> ^ b<span class=\"br0\">[</span>k<span class=\"br0\">]</span>\n            <span class=\"kw1\">if</span> less_msb<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:\n                j <span class=\"sy0\">=</span> k\n                x <span class=\"sy0\">=</span> y\n        <span class=\"kw1\">return</span> a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> - b<span class=\"br0\">[</span>j<span class=\"br0\">]</span>\n</pre>',2,1,NULL),(165,67,'<pre class=\"de1\">\n    <span class=\"kw1\">def</span> less_msb<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> x <span class=\"sy0\">&lt;</span> y <span class=\"kw1\">and</span> x <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>x ^ y<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(166,68,'<pre class=\"de1\">\n    G1 = <span class=\"nu0\">7</span>;<span class=\"co1\">% octal 7 corresponds to binary 111 n1 = m1 + m0 + m-1 </span>\n    G2 = <span class=\"nu0\">3</span>;<span class=\"co1\">% octal 3 corresponds to binary 011 n1 = m0  + m-1 </span>\n    G3 = <span class=\"nu0\">5</span>;<span class=\"co1\">% octal 5 corresponds to binary 101 n1 = m1  + m-1 </span>\n    constLen = <span class=\"nu0\">3</span>;   <span class=\"co1\">% Constraint length </span>\n \n    <span class=\"co1\">% Create the trellis that represents the convolutional code</span>\n    convCodeTrellis = poly2trellis<span class=\"br0\">(</span>constLen, <span class=\"br0\">[</span> G1 G2 G3 <span class=\"br0\">]</span><span class=\"br0\">)</span>;\n    uncodedWord = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"br0\">]</span>;\n    codedWord1 = convenc<span class=\"br0\">(</span>uncodedWord, convCodeTrellis<span class=\"br0\">)</span> \n    uncodedWord = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>;\n    codedWord2 = convenc<span class=\"br0\">(</span>uncodedWord, convCodeTrellis<span class=\"br0\">)</span>\n</pre>',16,1,NULL),(167,70,'<pre class=\"de1\">\n<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DrawCircle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0, <span class=\"kw4\">int</span> y0, <span class=\"kw4\">int</span> radius<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> radius, y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> radiusError <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">-</span>x<span class=\"sy0\">;</span>\n \n  <span class=\"kw1\">while</span><span class=\"br0\">(</span>x <span class=\"sy0\">&gt;=</span> y<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    DrawPixel<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> x0, y <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span>y <span class=\"sy0\">+</span> x0, x <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span><span class=\"sy0\">-</span>x <span class=\"sy0\">+</span> x0, y <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span><span class=\"sy0\">-</span>y <span class=\"sy0\">+</span> x0, x <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span><span class=\"sy0\">-</span>x <span class=\"sy0\">+</span> x0, <span class=\"sy0\">-</span>y <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span><span class=\"sy0\">-</span>y <span class=\"sy0\">+</span> x0, <span class=\"sy0\">-</span>x <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> x0, <span class=\"sy0\">-</span>y <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    DrawPixel<span class=\"br0\">(</span>y <span class=\"sy0\">+</span> x0, <span class=\"sy0\">-</span>x <span class=\"sy0\">+</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    y<span class=\"sy0\">++;</span>\n        <span class=\"kw1\">if</span><span class=\"br0\">(</span>radiusError<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>\n                radiusError<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n                x<span class=\"sy0\">--;</span>\n                radiusError<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>y<span class=\"sy0\">-</span>x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',6,1,NULL),(168,70,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> rasterCircle<span class=\"br0\">(</span><span class=\"kw4\">int</span> x0<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y0<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> radius<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> radius<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> ddF_x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> ddF_y <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> radius<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> radius<span class=\"sy0\">;</span>\n \n  setPixel<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> radius<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  setPixel<span class=\"br0\">(</span>x0<span class=\"sy0\">,</span> y0 <span class=\"sy0\">-</span> radius<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">+</span> radius<span class=\"sy0\">,</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">-</span> radius<span class=\"sy0\">,</span> y0<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n  <span class=\"kw1\">while</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> y<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"co1\">// ddF_x == 2 * x + 1;</span>\n    <span class=\"co1\">// ddF_y == -2 * y;</span>\n    <span class=\"co1\">// f == x*x + y*y - radius*radius + 2*x - y + 1;</span>\n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>f <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> \n    <span class=\"br0\">{</span>\n      y<span class=\"sy0\">--;</span>\n      ddF_y <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n      f <span class=\"sy0\">+=</span> ddF_y<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    x<span class=\"sy0\">++;</span>\n    ddF_x <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n    f <span class=\"sy0\">+=</span> ddF_x<span class=\"sy0\">;</span>    \n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> y0 <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> y0 <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">-</span> y<span class=\"sy0\">,</span> y0 <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> y0 <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    setPixel<span class=\"br0\">(</span>x0 <span class=\"sy0\">-</span> y<span class=\"sy0\">,</span> y0 <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(169,70,'<pre class=\"de1\">\n<span class=\"co1\">// \'cx\' and \'cy\' denote the offset of the circle center from the origin.</span>\n<span class=\"kw4\">void</span> circle<span class=\"br0\">(</span><span class=\"kw4\">int</span> cx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> cy<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> radius<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> error <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>radius<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> radius<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n  <span class=\"co1\">// The following while loop may be altered to \'while (x &gt; y)\' for a</span>\n  <span class=\"co1\">// performance benefit, as long as a call to \'plot4points\' follows</span>\n  <span class=\"co1\">// the body of the loop. This allows for the elimination of the</span>\n  <span class=\"co1\">// \'(x != y)\' test in \'plot8points\', providing a further benefit.</span>\n  <span class=\"co1\">//</span>\n  <span class=\"co1\">// For the sake of clarity, this is not shown here.</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;=</span> y<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    plot8points<span class=\"br0\">(</span>cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    error <span class=\"sy0\">+=</span> y<span class=\"sy0\">;</span>\n    <span class=\"sy0\">++</span>y<span class=\"sy0\">;</span>\n    error <span class=\"sy0\">+=</span> y<span class=\"sy0\">;</span>\n \n    <span class=\"co1\">// The following test may be implemented in assembly language in</span>\n    <span class=\"co1\">// most machines by testing the carry flag after adding \'y\' to</span>\n    <span class=\"co1\">// the value of \'error\' in the previous step, since \'error\'</span>\n    <span class=\"co1\">// nominally has a negative value.</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>error <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      error <span class=\"sy0\">-=</span> x<span class=\"sy0\">;</span>\n      <span class=\"sy0\">--</span>x<span class=\"sy0\">;</span>\n      error <span class=\"sy0\">-=</span> x<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> plot8points<span class=\"br0\">(</span><span class=\"kw4\">int</span> cx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> cy<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  plot4points<span class=\"br0\">(</span>cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> y<span class=\"br0\">)</span> plot4points<span class=\"br0\">(</span>cx<span class=\"sy0\">,</span> cy<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// The \'(x != 0 &amp;&amp; y != 0)\' test in the last line of this function</span>\n<span class=\"co1\">// may be omitted for a performance benefit if the radius of the</span>\n<span class=\"co1\">// circle is known to be non-zero.</span>\n<span class=\"kw4\">void</span> plot4points<span class=\"br0\">(</span><span class=\"kw4\">int</span> cx<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> cy<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  setPixel<span class=\"br0\">(</span>cx <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> cy <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> setPixel<span class=\"br0\">(</span>cx <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> cy <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> setPixel<span class=\"br0\">(</span>cx <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> cy <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> y <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> setPixel<span class=\"br0\">(</span>cx <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> cy <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(170,71,'<pre class=\"de1\">\n<span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fix f x <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>fix f<span class=\"br0\">)</span> x <span class=\"co1\">(* note the extra x *)</span>\n \n<span class=\"kw1\">let</span> factabs fact <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"co1\">(* factabs now has extra level of lambda abstraction *)</span>\n <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span>\n <span class=\"sy0\">|</span> x <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> fact <span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n<span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fix factabs<span class=\"br0\">)</span> <span class=\"nu0\">5</span> <span class=\"co1\">(* evaluates to \"120\" *)</span>\n</pre>',13,1,NULL),(171,71,'<pre class=\"de1\">\nIn <span class=\"sy0\">::</span> <span class=\"br0\">(</span>Rec a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Rec a\nout <span class=\"sy0\">::</span> Rec a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Rec a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span>\n</pre>',15,1,NULL),(172,71,'<pre class=\"de1\">\n<span class=\"kw1\">newtype</span> Rec a <span class=\"sy0\">=</span> In <span class=\"br0\">{</span> out <span class=\"sy0\">::</span> Rec a <span class=\"sy0\">-&gt;</span> a <span class=\"br0\">}</span>\n \ny <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a\ny <span class=\"sy0\">=</span> \\f <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>out x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>In <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>out x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',15,1,NULL),(173,71,'<pre class=\"de1\">\n<span class=\"kw1\">type</span> <span class=\"sy0\">\'</span>a recc <span class=\"sy0\">=</span> <span class=\"kw1\">In</span> <span class=\"kw1\">of</span> <span class=\"br0\">(</span><span class=\"sy0\">\'</span>a recc <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">\'</span>a<span class=\"br0\">)</span>\n<span class=\"kw1\">let</span> out <span class=\"br0\">(</span><span class=\"kw1\">In</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x\n \n<span class=\"kw1\">let</span> y f <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x a <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>out x x<span class=\"br0\">)</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">In</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x a <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>out x x<span class=\"br0\">)</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',13,1,NULL),(174,74,'<pre class=\"de1\">\n <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> interpolationSearch<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sortedArray, <span class=\"kw4\">int</span> toFind<span class=\"br0\">)</span><span class=\"br0\">{</span>\n  <span class=\"co1\">// Returns index of toFind in sortedArray, or -1 if not found</span>\n  <span class=\"kw4\">int</span> low <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> high <span class=\"sy0\">=</span> sortedArray.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> mid<span class=\"sy0\">;</span>\n \n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sortedArray<span class=\"br0\">[</span>low<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> toFind <span class=\"sy0\">&amp;&amp;</span> sortedArray<span class=\"br0\">[</span>high<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> toFind<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   mid <span class=\"sy0\">=</span> low <span class=\"sy0\">+</span>\n         <span class=\"br0\">(</span><span class=\"br0\">(</span>toFind <span class=\"sy0\">-</span> sortedArray<span class=\"br0\">[</span>low<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>high <span class=\"sy0\">-</span> low<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>\n         <span class=\"br0\">(</span>sortedArray<span class=\"br0\">[</span>high<span class=\"br0\">]</span> <span class=\"sy0\">-</span> sortedArray<span class=\"br0\">[</span>low<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">//out of range is possible  here</span>\n \n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sortedArray<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> toFind<span class=\"br0\">)</span>\n    low <span class=\"sy0\">=</span> mid <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sortedArray<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> toFind<span class=\"br0\">)</span>\n    <span class=\"co1\">// Repetition of the comparison code is forced by syntax limitations.</span>\n    high <span class=\"sy0\">=</span> mid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">else</span>\n    <span class=\"kw1\">return</span> mid<span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sortedArray<span class=\"br0\">[</span>low<span class=\"br0\">]</span> <span class=\"sy0\">==</span> toFind<span class=\"br0\">)</span>\n   <span class=\"kw1\">return</span> low<span class=\"sy0\">;</span>\n  <span class=\"kw1\">else</span>\n   <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// Not found</span>\n <span class=\"br0\">}</span>\n</pre>',7,1,NULL),(175,75,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Nancy said \"</span>Hello World<span class=\"sy0\">!</span><span class=\"st0\">\" to the crowd.\"</span><span class=\"sy0\">;</span>\n</pre>',20,1,NULL),(176,75,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Nancy said <span class=\"es0\">\\\"</span>Hello World!<span class=\"es0\">\\\"</span> to the crowd.\"</span><span class=\"sy0\">;</span>  <span class=\"co1\">### example of \\\"</span>\n</pre>',20,1,NULL),(177,75,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Nancy said <span class=\"es0\">\\x</span>22Hello World!<span class=\"es0\">\\x</span>22 to the crowd.\"</span><span class=\"sy0\">;</span>  <span class=\"co1\">### example of \\x22</span>\n</pre>',20,1,NULL),(178,75,'<pre class=\"de1\">\n<span class=\"kw2\">rm</span> <span class=\"sy0\">*</span>    <span class=\"co0\"># delete all files in the current directory</span>\n \n<span class=\"kw2\">rm</span> \\<span class=\"sy0\">*</span>   <span class=\"co0\"># delete the file named *</span>\n</pre>',4,1,NULL),(179,75,'<pre class=\"de1\">\n<span class=\"kw3\">echo</span> <span class=\"sy0\">&lt;</span>wiki<span class=\"sy0\">&gt;</span>\n</pre>',23,1,NULL),(180,75,'<pre class=\"de1\">\n<span class=\"kw3\">echo</span> <span class=\"co3\">^&lt;</span>wiki<span class=\"co3\">^&gt;</span>\n</pre>',23,1,NULL),(181,76,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">def</span> digits_of<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span>\n    digits <span class=\"sy0\">=</span> digits_of<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>\n    odd_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">1</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    even_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>odd_digits<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> even_digits:\n        checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>digits_of<span class=\"br0\">(</span>d*<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> checksum % <span class=\"nu0\">10</span>\n \n<span class=\"kw1\">def</span> is_luhn_valid<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>\n</pre>',2,1,NULL),(182,76,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> calculate_luhn<span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span>:\n    check_digit <span class=\"sy0\">=</span> luhn_checksum<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span> * <span class=\"nu0\">10</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> check_digit <span class=\"kw1\">if</span> check_digit <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">10</span> - check_digit\n</pre>',2,1,NULL),(183,77,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> + x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"co1\"># Here x*10 =&gt; x*[(2^2+1)*2]</span>\n<span class=\"br0\">(</span>x <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\"># Here x*10 =&gt; x*[(2^3+2)]</span>\n</pre>',2,1,NULL),(184,78,'<pre class=\"de1\">\ncksum <span class=\"br0\">[</span> File ... <span class=\"br0\">]</span>\n</pre>',4,1,NULL),(185,78,'<pre class=\"de1\">\n$ cksum test.txt\n<span class=\"nu0\">4038471504</span> <span class=\"nu0\">75</span> test.txt\n$\n</pre>',4,1,NULL),(186,79,'<pre class=\"de1\">\nC<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span>\n<span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> step <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> N <span class=\"kw1\">do</span>\n   C<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span>\n \n<span class=\"kw1\">for</span> m <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> step <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> M <span class=\"kw1\">do</span>\n<span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> step <span class=\"nu0\">1</span> <span class=\"kw1\">until</span> N <span class=\"kw1\">do</span>\n   C<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> C<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy3\">+</span> X<span class=\"br0\">[</span>m<span class=\"br0\">]</span><span class=\"sy3\">*</span>C<span class=\"br0\">[</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span>\n</pre>',12,1,NULL),(187,80,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> minimax<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>depth<span class=\"br0\">)</span>\n   <span class=\"kw1\">if</span> depth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span>\n      <span class=\"co1\">-- positive values are good for the maximizing player</span>\n      <span class=\"co1\">-- negative values are good for the minimizing player</span>\n      <span class=\"kw1\">return</span> objective_value<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n   <span class=\"co1\">-- maximizing player is (+1)</span>\n   <span class=\"co1\">-- minimizing player is (-1)</span>\n   <span class=\"kw1\">local</span> alpha <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>node<span class=\"sy0\">.</span>player <span class=\"sy0\">*</span> INFINITY\n \n   <span class=\"kw1\">local</span> child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span><span class=\"kw4\">nil</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">while</span> child <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">do</span>\n      <span class=\"kw1\">local</span> score <span class=\"sy0\">=</span> minimax<span class=\"br0\">(</span>child<span class=\"sy0\">,</span>depth<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n      alpha <span class=\"sy0\">=</span> node<span class=\"sy0\">.</span>player<span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw3\">math.min</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span>\n      child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>child<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n \n   <span class=\"kw1\">return</span> alpha\n<span class=\"kw1\">end</span>\n</pre>',9,1,NULL),(188,81,'<pre class=\"de1\">\n<span class=\"kw4\">int</span> binary_search<span class=\"br0\">(</span><span class=\"kw4\">int</span> A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> key<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imin<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imax<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\">// test if array is empty</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>imax <span class=\"sy0\">&lt;</span> imin<span class=\"br0\">)</span>\n    <span class=\"co1\">// set is empty, so return value showing not found</span>\n    <span class=\"kw1\">return</span> KEY_NOT_FOUND<span class=\"sy0\">;</span>\n  <span class=\"kw1\">else</span>\n    <span class=\"br0\">{</span>\n      <span class=\"co1\">// calculate midpoint to cut set in half</span>\n      <span class=\"kw4\">int</span> imid <span class=\"sy0\">=</span> midpoint<span class=\"br0\">(</span>imin<span class=\"sy0\">,</span> imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n      <span class=\"co1\">// three-way comparison</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imid<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> key<span class=\"br0\">)</span>\n        <span class=\"co1\">// key is in lower subset</span>\n        <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> key<span class=\"sy0\">,</span> imin<span class=\"sy0\">,</span> imid<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imid<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> key<span class=\"br0\">)</span>\n        <span class=\"co1\">// key is in upper subset</span>\n        <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> key<span class=\"sy0\">,</span> imid<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span>\n        <span class=\"co1\">// key has been found</span>\n        <span class=\"kw1\">return</span> imid<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(189,81,'<pre class=\"de1\">\n<span class=\"kw4\">int</span> binary_search<span class=\"br0\">(</span><span class=\"kw4\">int</span> A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> key<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imin<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imax<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\">// continue searching while [imin,imax] is not empty</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>imax <span class=\"sy0\">&gt;=</span> imin<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* calculate the midpoint for roughly equal partition */</span>\n      <span class=\"kw4\">int</span> imid <span class=\"sy0\">=</span> midpoint<span class=\"br0\">(</span>imin<span class=\"sy0\">,</span> imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n      <span class=\"co1\">// determine which subarray to search</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imid<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> key<span class=\"br0\">)</span>\n        <span class=\"co1\">// change min index to search upper subarray</span>\n        imin <span class=\"sy0\">=</span> imid <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imid<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> key<span class=\"br0\">)</span>\n        <span class=\"co1\">// change max index to search lower subarray</span>\n        imax <span class=\"sy0\">=</span> imid <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span>\n        <span class=\"co1\">// key found at index imid</span>\n        <span class=\"kw1\">return</span> imid<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"co1\">// key not found</span>\n  <span class=\"kw1\">return</span> KEY_NOT_FOUND<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(190,81,'<pre class=\"de1\">\n<span class=\"co1\">// inclusive indices</span>\n<span class=\"co1\">//   0 &lt;= imin when using truncate toward zero divide</span>\n<span class=\"co1\">//     imid = (imin+imax)/2;</span>\n<span class=\"co1\">//   imin unrestricted when using truncate toward minus infinity divide</span>\n<span class=\"co1\">//     imid = (imin+imax)&gt;&gt;1; or</span>\n<span class=\"co1\">//     imid = (int)floor((imin+imax)/2.0);</span>\n<span class=\"kw4\">int</span> binary_search<span class=\"br0\">(</span><span class=\"kw4\">int</span> A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> key<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imin<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> imax<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"co1\">// continually narrow search until just one element remains</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>imin <span class=\"sy0\">&lt;</span> imax<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"kw4\">int</span> imid <span class=\"sy0\">=</span> midpoint<span class=\"br0\">(</span>imin<span class=\"sy0\">,</span> imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n      <span class=\"co1\">// code must guarantee the interval is reduced at each iteration</span>\n      <span class=\"kw3\">assert</span><span class=\"br0\">(</span>imid <span class=\"sy0\">&lt;</span> imax<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"co1\">// note: 0 &lt;= imin &lt; imax implies imid will always be less than imax</span>\n \n      <span class=\"co1\">// reduce the search</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imid<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> key<span class=\"br0\">)</span>\n        imin <span class=\"sy0\">=</span> imid <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span>\n        imax <span class=\"sy0\">=</span> imid<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"co1\">// At exit of while:</span>\n  <span class=\"co1\">//   if A[] is empty, then imax &lt; imin</span>\n  <span class=\"co1\">//   otherwise imax == imin</span>\n \n  <span class=\"co1\">// deferred test for equality</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>imax <span class=\"sy0\">==</span> imin<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>imin<span class=\"br0\">]</span> <span class=\"sy0\">==</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> imin<span class=\"sy0\">;</span>\n  <span class=\"kw1\">else</span>\n    <span class=\"kw1\">return</span> KEY_NOT_FOUND<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(191,82,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> IanTaylorEasterJscr<span class=\"br0\">(</span>year<span class=\"br0\">)</span>:\n    a <span class=\"sy0\">=</span> year % <span class=\"nu0\">19</span>\n    b <span class=\"sy0\">=</span> year <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">2</span>\n    c <span class=\"sy0\">=</span> b // <span class=\"nu0\">25</span> + <span class=\"nu0\">1</span>\n    d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c * <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">2</span>\n    e <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a * <span class=\"nu0\">19</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"br0\">(</span>c * <span class=\"nu0\">8</span> + <span class=\"nu0\">5</span><span class=\"br0\">)</span> // <span class=\"nu0\">25</span><span class=\"br0\">)</span> + d + <span class=\"nu0\">15</span><span class=\"br0\">)</span> % <span class=\"nu0\">30</span>\n    e +<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">29578</span> - a - e * <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">10</span>\n    e -<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>year % <span class=\"nu0\">7</span><span class=\"br0\">)</span> + b - d + e + <span class=\"nu0\">2</span><span class=\"br0\">)</span> % <span class=\"nu0\">7</span>\n    d <span class=\"sy0\">=</span> e <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">5</span>\n    day <span class=\"sy0\">=</span> e - d * <span class=\"nu0\">31</span>\n    month <span class=\"sy0\">=</span> d + <span class=\"nu0\">3</span>\n    <span class=\"kw1\">return</span> year<span class=\"sy0\">,</span> month<span class=\"sy0\">,</span> day\n</pre>',2,1,NULL),(192,82,'<pre class=\"de1\">\n<span class=\"kw1\">Function</span> Easter<span class=\"br0\">(</span>X<span class=\"br0\">)</span>                                  <span class=\"co1\">\' X = year to compute</span>\n    <span class=\"kw1\">Dim</span> K, M, S, A, D, R, OG, SZ, OE\n \n    K  <span class=\"sy0\">=</span> X \\ <span class=\"nu0\">100</span>                                    <span class=\"co1\">\' Secular number</span>\n    M  <span class=\"sy0\">=</span> <span class=\"nu0\">15</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> K <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">4</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"sy0\">*</span> K <span class=\"sy0\">+</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">25</span>   <span class=\"co1\">\' Secular Moon shift</span>\n    S  <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> K <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">4</span>                        <span class=\"co1\">\' Secular sun shift</span>\n    A  <span class=\"sy0\">=</span> X <span class=\"kw1\">Mod</span> <span class=\"nu0\">19</span>                                   <span class=\"co1\">\' Moon parameter</span>\n    D  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">19</span> <span class=\"sy0\">*</span> A <span class=\"sy0\">+</span> M<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">30</span>                        <span class=\"co1\">\' Seed for 1st full Moon in spring</span>\n    R  <span class=\"sy0\">=</span> D \\ <span class=\"nu0\">29</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>D \\ <span class=\"nu0\">28</span> <span class=\"sy0\">-</span> D \\ <span class=\"nu0\">29</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>A \\ <span class=\"nu0\">11</span><span class=\"br0\">)</span>      <span class=\"co1\">\' Calendarian correction quantity</span>\n    OG <span class=\"sy0\">=</span> <span class=\"nu0\">21</span> <span class=\"sy0\">+</span> D <span class=\"sy0\">-</span> R                                 <span class=\"co1\">\' Easter limit</span>\n    SZ <span class=\"sy0\">=</span> <span class=\"nu0\">7</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>X <span class=\"sy0\">+</span> X \\ <span class=\"nu0\">4</span> <span class=\"sy0\">+</span> S<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">7</span>                  <span class=\"co1\">\' 1st sunday in March</span>\n    OE <span class=\"sy0\">=</span> <span class=\"nu0\">7</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>OG <span class=\"sy0\">-</span> SZ<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">7</span>                        <span class=\"co1\">\' Distance Easter sunday from Easter limit in days</span>\n \n    Easter <span class=\"sy0\">=</span> <span class=\"kw7\">DateSerial</span><span class=\"br0\">(</span>X, <span class=\"nu0\">3</span>, OG <span class=\"sy0\">+</span> OE<span class=\"br0\">)</span>              <span class=\"co1\">\' Result: Easter sunday as number of days in March</span>\n<span class=\"kw1\">End</span> <span class=\"kw1\">Function</span>\n</pre>',24,1,NULL),(193,83,'<pre class=\"de1\">\n \nfname,lname,age,salary\nnancy,davolio,33,$30000\nerin,borakova,28,$25250\ntony,raphael,35,$28700\n</pre>',5,1,NULL),(194,83,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Nancy said <span class=\"es0\">\\x</span>22Hello World!<span class=\"es0\">\\x</span>22 to the crowd.\"</span><span class=\"sy0\">;</span>  <span class=\"co1\">### use \\x22</span>\n</pre>',20,1,NULL),(195,83,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st0\">\"Nancy said <span class=\"es0\">\\\"</span>Hello World!<span class=\"es0\">\\\"</span> to the crowd.\"</span><span class=\"sy0\">;</span>      <span class=\"co1\">### use escape char</span>\n</pre>',20,1,NULL),(196,83,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"st_h\">\'Nancy said \"Hello World!\" to the crowd.\'</span><span class=\"sy0\">;</span>\n</pre>',20,1,NULL),(197,83,'<pre class=\"de1\">\n<span class=\"kw4\">print</span> <span class=\"st0\">\"Nancy said \"</span><span class=\"st0\">\"Hello World!\"</span><span class=\"st0\">\" to the crowd.\"</span>\n</pre>',21,1,NULL),(198,83,'<pre class=\"de1\">\n<span class=\"kw4\">print</span> <span class=\"st0\">\"print \"</span><span class=\"st0\">\"Nancy said \"</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"Hello World!\"</span><span class=\"st0\">\"\"</span><span class=\"st0\">\" to the crowd.\"</span><span class=\"st0\">\"\"</span>\n</pre>',21,1,NULL),(199,83,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st_h\">\'Nancy said \"Hello World!\" to the crowd.\'</span><span class=\"sy0\">;</span>    <span class=\"co1\"># specify a target string</span>\n<span class=\"kw3\">print</span> <span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/[aeiou]+/</span><span class=\"sy0\">;</span>                           <span class=\"co1\"># match one or more vowels</span>\n</pre>',20,1,NULL),(200,83,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st_h\">\'Nancy said \"http://Hello/World.htm\" is not a valid address.\'</span><span class=\"sy0\">;</span> <span class=\"co1\"># target string</span>\n \n<span class=\"kw3\">print</span> <span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"kw3\">m</span><span class=\"re0\">@http</span><span class=\"sy0\">://@;</span>       <span class=\"co1\"># match using alternate regular expression delimiter</span>\n<span class=\"kw3\">print</span> <span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"kw3\">m</span><span class=\"br0\">{</span>http<span class=\"sy0\">://</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>       <span class=\"co1\"># same as previous, but different delimiter</span>\n<span class=\"kw3\">print</span> <span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"kw3\">m</span><span class=\"sy0\">!</span>http<span class=\"sy0\">://!;</span>       <span class=\"co1\"># same as previous, but different delimiter.</span>\n</pre>',20,1,NULL),(201,83,'<pre class=\"de1\">\n<span class=\"kw3\">print</span> <span class=\"co4\">&lt;&lt;ENDOFHEREDOC;\nIt\'s very hard to encode a string with \"certain characters\".\n \nNewlines, commas, and other characters can cause delimiter collisions.\nENDOFHEREDOC</span>\n</pre>',20,1,NULL),(202,83,'<pre class=\"de1\">\n<span class=\"sc3\"><span class=\"re1\">&lt;input</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"hidden\"</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"__VIEWSTATE\"</span> <span class=\"re0\">value</span>=<span class=\"st0\">\"BookTitle:Nancy doesn\'t say \"</span>Hello World!<span class=\"st0\">\" anymore.\"</span> <span class=\"re2\">/&gt;</span></span>\n</pre>',25,1,NULL),(203,83,'<pre class=\"de1\">\n<span class=\"sc3\"><span class=\"re1\">&lt;input</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"hidden\"</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"__VIEWSTATE\"</span> <span class=\"re0\">value</span>=<span class=\"st0\">\"Qm9va1RpdGxlOk5hbmN5IGRvZXNuJ3Qgc2F5ICJIZWxsbyBXb3JsZCEiIGFueW1vcmUu\"</span> <span class=\"re2\">/&gt;</span></span>\n</pre>',25,1,NULL),(204,83,'<pre class=\"de1\">\n<span class=\"sc3\"><span class=\"re1\">&lt;input</span> <span class=\"re0\">type</span>=<span class=\"st0\">\"hidden\"</span> <span class=\"re0\">name</span>=<span class=\"st0\">\"__VIEWSTATE\"</span> <span class=\"re0\">value</span>=<span class=\"st0\">\"BookTitle:Nancy%20doesn%27t%20say%20%22Hello%20World!%22%20anymore.\"</span> <span class=\"re2\">/&gt;</span></span>\n</pre>',25,1,NULL),(205,85,'<pre class=\"de1\">\n<span class=\"kw1\">program</span> fizzbuzz\n<span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> \n    set print_number <span class=\"kw1\">to</span> true\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">3</span>\n        print <span class=\"st0\">\"Fizz\"</span>\n        set print_number <span class=\"kw1\">to</span> false\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">5</span>\n        print <span class=\"st0\">\"Buzz\"</span> \n        set print_number <span class=\"kw1\">to</span> false\n    <span class=\"kw1\">if</span> print_number, print i\n    print a newline\n<span class=\"kw1\">end</span> <span class=\"kw1\">do</span>\n</pre>',26,1,NULL),(206,85,'<pre class=\"de1\">\n<span class=\"kw1\">procedure</span> fizzbuzz\n<span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span>\n    <span class=\"kw4\">set</span> print_number <span class=\"kw1\">to</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">3</span> <span class=\"kw1\">then</span>\n        print \"Fizz\"<span class=\"sy1\">;</span>\n        <span class=\"kw4\">set</span> print_number <span class=\"kw1\">to</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">5</span> <span class=\"kw1\">then</span>\n        print \"Buzz\"<span class=\"sy1\">;</span>\n        <span class=\"kw4\">set</span> print_number <span class=\"kw1\">to</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">if</span> print_number<span class=\"sy1\">,</span> print i<span class=\"sy1\">;</span>\n    print a newline<span class=\"sy1\">;</span>\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(207,85,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> <span class=\"kw2\">function</span> fizzbuzz\n<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;=</span><span class=\"nu0\">100</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    set print_number to <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">3</span>\n        print <span class=\"st0\">\"Fizz\"</span><span class=\"sy0\">;</span>\n        set print_number to <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> i is divisible by <span class=\"nu0\">5</span>\n        print <span class=\"st0\">\"Buzz\"</span><span class=\"sy0\">;</span>\n        set print_number to <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> print_number<span class=\"sy0\">,</span> print i<span class=\"sy0\">;</span>\n    print a newline<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(208,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/...../</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 has length &gt;= 5<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(209,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/(H..).(o..)/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"We matched \'$1\' and \'$2\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(210,86,'<pre class=\"de1\">\nWe matched \'Hel\' and \'o W\'\n</pre>',5,1,NULL),(211,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/l+/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There are one or more consecutive letter <span class=\"es0\">\\\"</span>l<span class=\"es0\">\\\"</span>\'s in $string1<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(212,86,'<pre class=\"de1\">\nThere are one or more consecutive letter \"l\"\'s in Hello World\n</pre>',5,1,NULL),(213,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/H.?e/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There is an \'H\' and a \'e\' separated by \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"0-1 characters (Ex: He Hoe)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(214,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/(l.+?o)/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"The non-greedy match with \'l\' followed by one or \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"more characters is \'llo\' rather than \'llo wo\'.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(215,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/el*o/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There is an \'e\' followed by zero to many \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"\'l\' followed by \'o\' (eo, elo, ello, elllo)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(216,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/l{1,2}/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n <span class=\"kw3\">print</span> <span class=\"st0\">\"There exists a substring with at least 1 \"</span><span class=\"sy0\">;</span>\n \n <span class=\"kw3\">print</span> <span class=\"st0\">\"and at most 2 l\'s in $string1<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(217,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/[aeiou]+/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 contains one or more vowels.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(218,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/(Hello|Hi|Pogo)/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"At least one of Hello, Hi, or Pogo is \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"contained in $string1.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(219,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/llo\\b/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There is a word that ends with \'llo\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(220,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\w/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There is at least one alphanumeric \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"character in $string1 (A-Z, a-z, 0-9, _)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(221,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\W/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"The space between Hello and \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"World is not alphanumeric<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(222,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\s.*\\s/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There are TWO whitespace characters, which may\"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\" be separated by other characters, in $string1\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(223,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\S.*\\S/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There are TWO non-whitespace characters, which\"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\" may be separated by other characters, in $string1\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(224,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"99 bottles of beer on the wall.\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/(\\d+)/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$1 is the first number in \'$string1\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(225,86,'<pre class=\"de1\">\n99 is the first number in \'99 bottles of beer on the wall.\'\n</pre>',5,1,NULL),(226,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\D/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"There is at least one character in $string1\"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\" that is not a digit.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(227,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/^He/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 starts with the characters \'He\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(228,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/rld$/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 is a line or string \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"that ends with \'rld\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(229,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello<span class=\"es0\">\\n</span>World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\AH/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 is a string \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"that starts with \'H\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(230,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello<span class=\"es0\">\\n</span>World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/d\\n\\z/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 is a string \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"that ends with \'d<span class=\"es0\">\\\\</span>n\'<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(231,86,'<pre class=\"de1\">\n<span class=\"re0\">$string1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$string1</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/[^abc]/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"$string1 contains a character other than \"</span><span class=\"sy0\">;</span>\n  <span class=\"kw3\">print</span> <span class=\"st0\">\"a, b, and c<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',20,1,NULL),(232,87,'<pre class=\"de1\">\nrsync <span class=\"br0\">[</span>OPTION<span class=\"br0\">]</span> … SRC <span class=\"br0\">[</span>SRC<span class=\"br0\">]</span> … <span class=\"br0\">[</span>USER<span class=\"sy0\">@</span><span class=\"br0\">]</span>HOST:DEST\nrsync <span class=\"br0\">[</span>OPTION<span class=\"br0\">]</span> … <span class=\"br0\">[</span>USER<span class=\"sy0\">@</span><span class=\"br0\">]</span>HOST:SRC <span class=\"br0\">[</span>DEST<span class=\"br0\">]</span>\n</pre>',4,1,NULL),(233,88,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#include &lt;stdlib.h&gt;</span>\n<span class=\"co2\">#include &lt;string.h&gt;</span>\n \n<span class=\"coMULTI\">/*\n   This function takes an array of n unsigned integers,\n   each holding a value in the range [0, 65535],\n   representing a number in the range [0, 2**(16n)-1].\n   arr[0] is the most significant \"digit\".\n   This function returns a new array containing the given\n   number as a string of decimal digits.\n \n   For the sake of brevity, this example assumes that\n   calloc and realloc will never fail.\n*/</span>\n<span class=\"kw4\">void</span> double_dabble<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>arr<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>result<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> nbits <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><span class=\"sy0\">*</span>n<span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* length of arr in bits */</span>\n    <span class=\"kw4\">int</span> nscratch <span class=\"sy0\">=</span> nbits<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* length of scratch in bytes */</span>\n    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>scratch <span class=\"sy0\">=</span> <span class=\"kw3\">calloc</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> nscratch<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>scratch<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> smin <span class=\"sy0\">=</span> nscratch<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* speed optimization */</span>\n \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"coMULTI\">/* This bit will be shifted in on the right. */</span>\n            <span class=\"kw4\">int</span> shifted_in <span class=\"sy0\">=</span> <span class=\"br0\">(</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">-</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n            <span class=\"coMULTI\">/* Add 3 everywhere that scratch[k] &gt;= 5. */</span>\n            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span>smin<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> nscratch<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span>\n              scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n \n            <span class=\"coMULTI\">/* Shift scratch to the left by one position. */</span>\n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>scratch<span class=\"br0\">[</span>smin<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>\n              smin <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span>smin<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> nscratch<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n                scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> <span class=\"nu12\">0xF</span><span class=\"sy0\">;</span>\n                scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">|=</span> <span class=\"br0\">(</span>scratch<span class=\"br0\">[</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n \n            <span class=\"coMULTI\">/* Shift in the new bit from arr. */</span>\n            scratch<span class=\"br0\">[</span>nscratch<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n            scratch<span class=\"br0\">[</span>nscratch<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;=</span> <span class=\"nu12\">0xF</span><span class=\"sy0\">;</span>\n            scratch<span class=\"br0\">[</span>nscratch<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|=</span> shifted_in<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"coMULTI\">/* Remove leading zeros from the scratch space. */</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> nscratch<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span>\n    nscratch <span class=\"sy0\">-=</span> k<span class=\"sy0\">;</span>\n    <span class=\"kw3\">memmove</span><span class=\"br0\">(</span>scratch<span class=\"sy0\">,</span> scratch<span class=\"sy0\">+</span>k<span class=\"sy0\">,</span> nscratch<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* Convert the scratch space from BCD digits to ASCII. */</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> nscratch<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>k<span class=\"br0\">)</span>\n      scratch<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\'0\'</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* Resize and return the resulting string. */</span>\n    <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <span class=\"kw3\">realloc</span><span class=\"br0\">(</span>scratch<span class=\"sy0\">,</span> nscratch<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"coMULTI\">/*\n   This test driver should print the following decimal values:\n   246\n   16170604\n   1059756703745\n*/</span>\n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">246</span><span class=\"sy0\">,</span> <span class=\"nu0\">48748</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>text <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        double_dabble<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> arr<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>text<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> text<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">free</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(234,89,'<pre class=\"de1\">\n<span class=\"re0\">0a1,6</span>\n<span class=\"re2\">&gt; This is an important</span>\n<span class=\"re2\">&gt; notice! It should</span>\n<span class=\"re2\">&gt; therefore be located at</span>\n<span class=\"re2\">&gt; the beginning of this</span>\n<span class=\"re2\">&gt; document!</span>\n<span class=\"re2\">&gt;</span>\n<span class=\"re0\">8,14c14</span>\n<span class=\"re1\">&lt; compress the size of the</span>\n<span class=\"re1\">&lt; changes.</span>\n<span class=\"re1\">&lt;</span>\n<span class=\"re1\">&lt; This paragraph contains</span>\n<span class=\"re1\">&lt; text that is outdated.</span>\n<span class=\"re1\">&lt; It will be deleted in the</span>\n<span class=\"re1\">&lt; near future.</span>\n<span class=\"re3\">---\n<span class=\"re2\">&gt; compress anything.</span></span>\n<span class=\"re0\">17c17</span>\n<span class=\"re1\">&lt; check this dokument. On</span>\n<span class=\"re3\">---\n<span class=\"re2\">&gt; check this document. On</span></span>\n<span class=\"re0\">24a25,28</span>\n<span class=\"re2\">&gt;</span>\n<span class=\"re2\">&gt; This paragraph contains</span>\n<span class=\"re2\">&gt; important new additions</span>\n<span class=\"re2\">&gt; to this document.</span>\n</pre>',27,1,NULL),(235,89,'<pre class=\"de1\">\n 24a\n \n This paragraph contains\n important new additions\n to this document.\n .\n 17c\n check this document. On\n .\n <span class=\"nu0\">8</span>,14c\n compress anything.\n .\n 0a\n This is an important\n notice! It should\n therefore be located at\n the beginning of this\n document!\n \n .\n</pre>',27,1,NULL),(236,89,'<pre class=\"de1\">\n<span class=\"re9\">*** /path/to/original   \'\'timestamp\'\'</span>\n<span class=\"re3\">--- /path/to/new        \'\'timestamp\'\'</span>\n***************\n<span class=\"re9\">*** 1,3 ****</span>\n<span class=\"re3\">--- 1,9 ----</span>\n<span class=\"re8\">+ This is an important</span>\n<span class=\"re8\">+ notice! It should</span>\n<span class=\"re8\">+ therefore be located at</span>\n<span class=\"re8\">+ the beginning of this</span>\n<span class=\"re8\">+ document!</span>\n<span class=\"re8\">+</span>\n  This part of the\n  document has stayed the\n  same from version to\n***************\n<span class=\"re9\">*** 5,20 ****</span>\n  be shown if it doesn\'t\n  change.  Otherwise, that\n  would not be helping to\n<span class=\"re5\">! compress the size of the</span>\n<span class=\"re5\">! changes.</span>\n<span class=\"re5\">!</span>\n<span class=\"re5\">! This paragraph contains</span>\n<span class=\"re5\">! text that is outdated.</span>\n<span class=\"re5\">! It will be deleted in the</span>\n<span class=\"re5\">! near future.</span>\n \n  It is important to spell\n<span class=\"re5\">! check this dokument. On</span>\n  the other hand, a\n  misspelled word isn\'t\n  the end of the world.\n<span class=\"re3\">--- 11,20 ----</span>\n  be shown if it doesn\'t\n  change.  Otherwise, that\n  would not be helping to\n<span class=\"re5\">! compress anything.</span>\n \n  It is important to spell\n<span class=\"re5\">! check this document. On</span>\n  the other hand, a\n  misspelled word isn\'t\n  the end of the world.\n***************\n<span class=\"re9\">*** 22,24 ****</span>\n<span class=\"re3\">--- 22,28 ----</span>\n  this paragraph needs to\n  be changed. Things can\n  be added after it.\n<span class=\"re8\">+</span>\n<span class=\"re8\">+ This paragraph contains</span>\n<span class=\"re8\">+ important new additions</span>\n<span class=\"re8\">+ to this document.</span>\n</pre>',27,1,NULL),(237,89,'<pre class=\"de1\">\n<span class=\"re3\">--- /path/to/original   \'\'timestamp\'\'</span>\n<span class=\"re4\">+++ /path/to/new        \'\'timestamp\'\'</span>\n<span class=\"re6\">@@ -1,3 +1,9 @@</span>\n<span class=\"re8\">+This is an important</span>\n<span class=\"re8\">+notice! It should</span>\n<span class=\"re8\">+therefore be located at</span>\n<span class=\"re8\">+the beginning of this</span>\n<span class=\"re8\">+document!</span>\n<span class=\"re8\">+</span>\n This part of the\n document has stayed the\n same from version to\n<span class=\"re6\">@@ -5,16 +11,10 @@</span>\n be shown if it doesn\'t\n change.  Otherwise, that\n would not be helping to\n<span class=\"re7\">-compress the size of the</span>\n<span class=\"re7\">-changes.</span>\n<span class=\"re7\">-</span>\n<span class=\"re7\">-This paragraph contains</span>\n<span class=\"re7\">-text that is outdated.</span>\n<span class=\"re7\">-It will be deleted in the</span>\n<span class=\"re7\">-near future.</span>\n<span class=\"re8\">+compress anything.</span>\n \n It is important to spell\n<span class=\"re7\">-check this dokument. On</span>\n<span class=\"re8\">+check this document. On</span>\n the other hand, a\n misspelled word isn\'t\n the end of the world.\n<span class=\"re6\">@@ -22,3 +22,7 @@</span>\n this paragraph needs to\n be changed. Things can\n be added after it.\n<span class=\"re8\">+</span>\n<span class=\"re8\">+This paragraph contains</span>\n<span class=\"re8\">+important new additions</span>\n<span class=\"re8\">+to this document.</span>\n</pre>',27,1,NULL),(238,90,'<pre class=\"de1\">\n <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span>x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/*x&gt;12?*/</span>                                                 \n <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> T<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* 0-based table \'if 30 days =1,else 0\'  */</span>\n <span class=\"kw1\">return</span> T<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span>                                       <span class=\"coMULTI\">/* return with boolean 1 = true, 0=false */</span>\n</pre>',1,1,NULL),(239,90,'<pre class=\"de1\">\n \n <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> M<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* 1-based table to increment x          */</span>\n <span class=\"kw1\">return</span> M<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span>                                          <span class=\"coMULTI\">/* return with new month number          */</span>\n</pre>',1,1,NULL),(240,91,'<pre class=\"de1\">\npData<span class=\"br0\">[</span>hk_2<span class=\"br0\">]</span><span class=\"br0\">[</span>hk_1<span class=\"br0\">]</span>\n \n<span class=\"kw4\">int</span> hv_1 <span class=\"sy0\">=</span> Hash<span class=\"br0\">(</span>v<span class=\"br0\">)</span>\n<span class=\"kw4\">int</span> hv_2 <span class=\"sy0\">=</span> Hash2<span class=\"br0\">(</span>v<span class=\"br0\">)</span>\n \n<span class=\"kw4\">int</span> original_hash <span class=\"sy0\">=</span> hv_1\n<span class=\"kw1\">while</span><span class=\"br0\">(</span>pData<span class=\"br0\">[</span>hv_2<span class=\"br0\">]</span><span class=\"br0\">[</span>hv_1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\n  hv_1 <span class=\"sy0\">=</span> hv_1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(241,92,'<pre class=\"de1\">\nalgorithm IDA*<span class=\"br0\">(</span>start<span class=\"br0\">)</span>:\n    loop:\n        solution<span class=\"sy0\">,</span> cost_limit <span class=\"sy0\">=</span> depth_limited_search<span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"br0\">]</span><span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> solution <span class=\"sy0\">!=</span> <span class=\"kw2\">None</span>:\n            <span class=\"kw1\">return</span> solution\n        <span class=\"kw1\">if</span> cost_limit <span class=\"sy0\">==</span> ∞:\n            <span class=\"kw1\">return</span> <span class=\"kw2\">None</span>\n \n<span class=\"co1\"># returns (solution-sequence or None, new cost limit)</span>\nalgorithm depth_limited_search<span class=\"br0\">(</span>path_so_far<span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>:\n    node <span class=\"sy0\">=</span> last_element<span class=\"br0\">(</span>path_so_far<span class=\"br0\">)</span>\n    minimum_cost <span class=\"sy0\">=</span> cost<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> minimum_cost <span class=\"sy0\">&gt;</span> cost_limit:\n        <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> minimum_cost\n    <span class=\"kw1\">if</span> is_goal<span class=\"br0\">(</span>node<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> path_so_far<span class=\"sy0\">,</span> cost_limit\n \n    next_cost_limit <span class=\"sy0\">=</span> ∞\n    solutions <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> successors<span class=\"br0\">(</span>node<span class=\"br0\">)</span>:\n        new_start_cost <span class=\"sy0\">=</span> cost<span class=\"br0\">(</span>s<span class=\"br0\">)</span>\n        solution<span class=\"sy0\">,</span> new_cost_limit <span class=\"sy0\">=</span> depth_limited_search<span class=\"br0\">(</span>new_start_cost<span class=\"sy0\">,</span> extend<span class=\"br0\">(</span>path_so_far<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> solution <span class=\"sy0\">!=</span> <span class=\"kw2\">None</span>:\n            solutions.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span>solution<span class=\"sy0\">,</span> new_cost_limit<span class=\"br0\">]</span><span class=\"br0\">)</span>\n        next_cost_limit <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span>next_cost_limit<span class=\"sy0\">,</span> new_cost_limit<span class=\"br0\">)</span>\n \n    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>solutions<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:\n      <span class=\"kw1\">return</span> lowest_cost_solution_in<span class=\"br0\">(</span>solutions<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> next_cost_limit\n</pre>',2,1,NULL),(242,93,'<pre class=\"de1\">\nalgorithm IDA*<span class=\"br0\">(</span>start<span class=\"br0\">)</span>:\n    loop:\n        solution<span class=\"sy0\">,</span> cost_limit <span class=\"sy0\">=</span> depth_limited_search<span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"br0\">]</span><span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> solution <span class=\"sy0\">!=</span> <span class=\"kw2\">None</span>:\n            <span class=\"kw1\">return</span> solution\n        <span class=\"kw1\">if</span> cost_limit <span class=\"sy0\">==</span> ∞:\n            <span class=\"kw1\">return</span> <span class=\"kw2\">None</span>\n \n<span class=\"co1\"># returns (solution-sequence or None, new cost limit)</span>\nalgorithm depth_limited_search<span class=\"br0\">(</span>path_so_far<span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>:\n    node <span class=\"sy0\">=</span> last_element<span class=\"br0\">(</span>path_so_far<span class=\"br0\">)</span>\n    minimum_cost <span class=\"sy0\">=</span> cost<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> minimum_cost <span class=\"sy0\">&gt;</span> cost_limit:\n        <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> minimum_cost\n    <span class=\"kw1\">if</span> is_goal<span class=\"br0\">(</span>node<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> path_so_far<span class=\"sy0\">,</span> cost_limit\n \n    next_cost_limit <span class=\"sy0\">=</span> ∞\n    solutions <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> successors<span class=\"br0\">(</span>node<span class=\"br0\">)</span>:\n        new_start_cost <span class=\"sy0\">=</span> cost<span class=\"br0\">(</span>s<span class=\"br0\">)</span>\n        solution<span class=\"sy0\">,</span> new_cost_limit <span class=\"sy0\">=</span> depth_limited_search<span class=\"br0\">(</span>new_start_cost<span class=\"sy0\">,</span> extend<span class=\"br0\">(</span>path_so_far<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">,</span> cost_limit<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> solution <span class=\"sy0\">!=</span> <span class=\"kw2\">None</span>:\n            solutions.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span>solution<span class=\"sy0\">,</span> new_cost_limit<span class=\"br0\">]</span><span class=\"br0\">)</span>\n        next_cost_limit <span class=\"sy0\">=</span> <span class=\"kw2\">min</span><span class=\"br0\">(</span>next_cost_limit<span class=\"sy0\">,</span> new_cost_limit<span class=\"br0\">)</span>\n \n    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>solutions<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:\n      <span class=\"kw1\">return</span> lowest_cost_solution_in<span class=\"br0\">(</span>solutions<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> next_cost_limit\n</pre>',2,1,NULL),(243,94,'<pre class=\"de1\">\n<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> MOD_ADLER <span class=\"sy0\">=</span> <span class=\"nu0\">65521</span><span class=\"sy0\">;</span>\n \n<span class=\"kw4\">uint32_t</span> adler32<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">int32_t</span> len<span class=\"br0\">)</span> <span class=\"coMULTI\">/* where data is the location of the data in physical memory and \n                                                       len is the length of the data in bytes */</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw4\">uint32_t</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n    <span class=\"kw4\">int32_t</span> index<span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* Process each byte of the data in order */</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> index <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>index<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> data<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> MOD_ADLER<span class=\"sy0\">;</span>\n        b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">+</span> a<span class=\"br0\">)</span> <span class=\"sy0\">%</span> MOD_ADLER<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> a<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(244,95,'<pre class=\"de1\">\n function A<span class=\"sy2\">*</span><span class=\"br0\">(</span>start,goal<span class=\"br0\">)</span>\n     closedset <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the empty set    <span class=\"co1\">// The set of nodes already evaluated.</span>\n     openset <span class=\"sy4\">:</span><span class=\"sy1\">=</span> <span class=\"br0\">{</span>start<span class=\"br0\">}</span>    <span class=\"co1\">// The set of tentative nodes to be evaluated, initially containing the start node</span>\n     came_from <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the empty map    <span class=\"co1\">// The map of navigated nodes.</span>\n \n     g_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span>    <span class=\"co1\">// Cost from start along best known path.</span>\n     <span class=\"co1\">// Estimated total cost from start to goal through y.</span>\n     f_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy2\">+</span> heuristic_cost_estimate<span class=\"br0\">(</span>start, goal<span class=\"br0\">)</span>\n \n     <span class=\"kw1\">while</span> openset is not empty\n         current <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the node in openset having the lowest f_score<span class=\"br0\">[</span><span class=\"br0\">]</span> value\n         <span class=\"kw1\">if</span> current <span class=\"sy1\">=</span> goal\n             <span class=\"kw1\">return</span> reconstruct_path<span class=\"br0\">(</span>came_from, goal<span class=\"br0\">)</span>\n \n         <span class=\"kw3\">remove</span> current from openset\n         add current to closedset\n         <span class=\"kw1\">for</span> each neighbor in neighbor_nodes<span class=\"br0\">(</span>current<span class=\"br0\">)</span>\n             tentative_g_score <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>current<span class=\"br0\">]</span> <span class=\"sy2\">+</span> dist_between<span class=\"br0\">(</span>current,neighbor<span class=\"br0\">)</span>\n             <span class=\"kw1\">if</span> neighbor in closedset and tentative_g_score <span class=\"sy1\">&gt;=</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span>\n                     <span class=\"kw1\">continue</span>\n \n             <span class=\"kw1\">if</span> neighbor not in openset or tentative_g_score <span class=\"sy1\">&lt;</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> \n                 came_from<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> current\n                 g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> tentative_g_score\n                 f_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy2\">+</span> heuristic_cost_estimate<span class=\"br0\">(</span>neighbor, goal<span class=\"br0\">)</span>\n                 <span class=\"kw1\">if</span> neighbor not in openset\n                     add neighbor to openset\n \n     <span class=\"kw1\">return</span> failure\n \n function reconstruct_path<span class=\"br0\">(</span>came_from, current_node<span class=\"br0\">)</span>\n     <span class=\"kw1\">if</span> current_node in came_from\n         p <span class=\"sy4\">:</span><span class=\"sy1\">=</span> reconstruct_path<span class=\"br0\">(</span>came_from, came_from<span class=\"br0\">[</span>current_node<span class=\"br0\">]</span><span class=\"br0\">)</span>\n         <span class=\"kw1\">return</span> <span class=\"br0\">(</span>p <span class=\"sy2\">+</span> current_node<span class=\"br0\">)</span>\n     <span class=\"kw1\">else</span>\n         <span class=\"kw1\">return</span> current_node\n</pre>',11,1,NULL),(245,96,'<pre class=\"de1\">\n function A<span class=\"sy2\">*</span><span class=\"br0\">(</span>start,goal<span class=\"br0\">)</span>\n     closedset <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the empty set    <span class=\"co1\">// The set of nodes already evaluated.</span>\n     openset <span class=\"sy4\">:</span><span class=\"sy1\">=</span> <span class=\"br0\">{</span>start<span class=\"br0\">}</span>    <span class=\"co1\">// The set of tentative nodes to be evaluated, initially containing the start node</span>\n     came_from <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the empty map    <span class=\"co1\">// The map of navigated nodes.</span>\n \n     g_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span>    <span class=\"co1\">// Cost from start along best known path.</span>\n     <span class=\"co1\">// Estimated total cost from start to goal through y.</span>\n     f_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>start<span class=\"br0\">]</span> <span class=\"sy2\">+</span> heuristic_cost_estimate<span class=\"br0\">(</span>start, goal<span class=\"br0\">)</span>\n \n     <span class=\"kw1\">while</span> openset is not empty\n         current <span class=\"sy4\">:</span><span class=\"sy1\">=</span> the node in openset having the lowest f_score<span class=\"br0\">[</span><span class=\"br0\">]</span> value\n         <span class=\"kw1\">if</span> current <span class=\"sy1\">=</span> goal\n             <span class=\"kw1\">return</span> reconstruct_path<span class=\"br0\">(</span>came_from, goal<span class=\"br0\">)</span>\n \n         <span class=\"kw3\">remove</span> current from openset\n         add current to closedset\n         <span class=\"kw1\">for</span> each neighbor in neighbor_nodes<span class=\"br0\">(</span>current<span class=\"br0\">)</span>\n             tentative_g_score <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>current<span class=\"br0\">]</span> <span class=\"sy2\">+</span> dist_between<span class=\"br0\">(</span>current,neighbor<span class=\"br0\">)</span>\n             <span class=\"kw1\">if</span> neighbor in closedset and tentative_g_score <span class=\"sy1\">&gt;=</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span>\n                     <span class=\"kw1\">continue</span>\n \n             <span class=\"kw1\">if</span> neighbor not in openset or tentative_g_score <span class=\"sy1\">&lt;</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> \n                 came_from<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> current\n                 g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> tentative_g_score\n                 f_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy4\">:</span><span class=\"sy1\">=</span> g_score<span class=\"br0\">[</span>neighbor<span class=\"br0\">]</span> <span class=\"sy2\">+</span> heuristic_cost_estimate<span class=\"br0\">(</span>neighbor, goal<span class=\"br0\">)</span>\n                 <span class=\"kw1\">if</span> neighbor not in openset\n                     add neighbor to openset\n \n     <span class=\"kw1\">return</span> failure\n \n function reconstruct_path<span class=\"br0\">(</span>came_from, current_node<span class=\"br0\">)</span>\n     <span class=\"kw1\">if</span> current_node in came_from\n         p <span class=\"sy4\">:</span><span class=\"sy1\">=</span> reconstruct_path<span class=\"br0\">(</span>came_from, came_from<span class=\"br0\">[</span>current_node<span class=\"br0\">]</span><span class=\"br0\">)</span>\n         <span class=\"kw1\">return</span> <span class=\"br0\">(</span>p <span class=\"sy2\">+</span> current_node<span class=\"br0\">)</span>\n     <span class=\"kw1\">else</span>\n         <span class=\"kw1\">return</span> current_node\n</pre>',11,1,NULL),(246,97,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> MTDF(root, f, d)\n      g := f\n      upperBound := +∞\n      lowerBound := -∞\n      <span class=\"kw3\">while</span> lowerBound &lt; upperBound\n         <span class=\"kw3\">if</span> g = lowerBound <span class=\"kw3\">then</span> \n              β := g+1 \n         <span class=\"kw3\">else</span> \n              β := g\n         g := AlphaBetaWithMemory(root, β-1, β, d)\n         <span class=\"kw3\">if</span> g &lt; β <span class=\"kw3\">then</span>\n              upperBound := g \n         <span class=\"kw3\">else</span>\n              lowerBound := g\n     return g\n</pre>',21,1,NULL),(247,98,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> ternarySearch<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> absolutePrecision<span class=\"br0\">)</span>:\n    <span class=\"co1\">#left and right are the current bounds; the maximum is between them</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>right - left<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> absolutePrecision:\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>left + right<span class=\"br0\">)</span>/<span class=\"nu0\">2</span>\n \n    leftThird <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>*left + right<span class=\"br0\">)</span>/<span class=\"nu0\">3</span>\n    rightThird <span class=\"sy0\">=</span> <span class=\"br0\">(</span>left + <span class=\"nu0\">2</span>*right<span class=\"br0\">)</span>/<span class=\"nu0\">3</span>\n \n    <span class=\"kw1\">if</span> f<span class=\"br0\">(</span>leftThird<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> f<span class=\"br0\">(</span>rightThird<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> ternarySearch<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> leftThird<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> absolutePrecision<span class=\"br0\">)</span>\n    <span class=\"kw1\">else</span>:\n        <span class=\"kw1\">return</span> ternarySearch<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> rightThird<span class=\"sy0\">,</span> absolutePrecision<span class=\"br0\">)</span>\n</pre>',2,1,NULL),(248,99,'<pre class=\"de1\">\ncurrentEnergy <span class=\"sy0\">=</span> system.<span class=\"me1\">randomConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># a random initial configuration</span>\n \n<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span>:\n    system.<span class=\"me1\">proposeConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># a proposed configuration is proposed</span>\n    proposedEnergy <span class=\"sy0\">=</span> system.<span class=\"me1\">proposedEnergy</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># the energy of the proposed configuration computed</span>\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> exp<span class=\"br0\">(</span>entropy<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span>-entropy<span class=\"br0\">[</span>proposedEnergy<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        <span class=\"co1\"># if accepted, update the energy and the system:</span>\n        currentEnergy <span class=\"sy0\">=</span> proposedEnergy\n        system.<span class=\"me1\">acceptProposedConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">else</span>:\n        <span class=\"co1\"># if rejected</span>\n        system.<span class=\"me1\">rejectProposedConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n \n    H<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    entropy<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> f\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isFlat<span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"co1\"># isFlat tests whether the histogram is flat (e.g. 95% flatness)</span>\n        H<span class=\"br0\">[</span>:<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        f *<span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span> <span class=\"co1\"># refine the f parameter</span>\n</pre>',2,1,NULL),(249,100,'<pre class=\"de1\">\ncurrentEnergy <span class=\"sy0\">=</span> system.<span class=\"me1\">randomConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># a random initial configuration</span>\n \n<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&gt;</span> epsilon<span class=\"br0\">)</span>:\n    system.<span class=\"me1\">proposeConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># a proposed configuration is proposed</span>\n    proposedEnergy <span class=\"sy0\">=</span> system.<span class=\"me1\">proposedEnergy</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># the energy of the proposed configuration computed</span>\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> exp<span class=\"br0\">(</span>entropy<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span>-entropy<span class=\"br0\">[</span>proposedEnergy<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:\n        <span class=\"co1\"># if accepted, update the energy and the system:</span>\n        currentEnergy <span class=\"sy0\">=</span> proposedEnergy\n        system.<span class=\"me1\">acceptProposedConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">else</span>:\n        <span class=\"co1\"># if rejected</span>\n        system.<span class=\"me1\">rejectProposedConfiguration</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\n \n    H<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    entropy<span class=\"br0\">[</span>currentEnergy<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> f\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isFlat<span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"co1\"># isFlat tests whether the histogram is flat (e.g. 95% flatness)</span>\n        H<span class=\"br0\">[</span>:<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        f *<span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span> <span class=\"co1\"># refine the f parameter</span>\n</pre>',2,1,NULL),(250,101,'<pre class=\"de1\">\n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Employee <span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span>        employeeId<span class=\"sy0\">;</span>\n    <span class=\"kw3\">String</span>     name<span class=\"sy0\">;</span>\n    Department dept<span class=\"sy0\">;</span>\n \n    <span class=\"co1\">// other methods would be in here </span>\n \n    @Override\n    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> hashCode<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> hash <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        hash <span class=\"sy0\">=</span> hash <span class=\"sy0\">*</span> <span class=\"nu0\">17</span> <span class=\"sy0\">+</span> employeeId<span class=\"sy0\">;</span>\n        hash <span class=\"sy0\">=</span> hash <span class=\"sy0\">*</span> <span class=\"nu0\">31</span> <span class=\"sy0\">+</span> name.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        hash <span class=\"sy0\">=</span> hash <span class=\"sy0\">*</span> <span class=\"nu0\">13</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>dept <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> dept.<span class=\"me1\">hashCode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> hash<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',7,1,NULL),(251,102,'<pre class=\"de1\">\n<span class=\"coMULTI\">/*\n * Simple MD5 implementation\n *\n * Compile with: gcc -o md5 md5.c\n */</span>\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#include &lt;stdlib.h&gt;</span>\n<span class=\"co2\">#include &lt;string.h&gt;</span>\n<span class=\"co2\">#include &lt;stdint.h&gt;</span>\n \n<span class=\"co1\">// Constants are the integer part of the sines of integers (in radians) * 2^32.</span>\n<span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> k<span class=\"br0\">[</span><span class=\"nu0\">64</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span>\n<span class=\"nu12\">0xd76aa478</span>, <span class=\"nu12\">0xe8c7b756</span>, <span class=\"nu12\">0x242070db</span>, <span class=\"nu12\">0xc1bdceee</span> ,\n<span class=\"nu12\">0xf57c0faf</span>, <span class=\"nu12\">0x4787c62a</span>, <span class=\"nu12\">0xa8304613</span>, <span class=\"nu12\">0xfd469501</span> ,\n<span class=\"nu12\">0x698098d8</span>, <span class=\"nu12\">0x8b44f7af</span>, <span class=\"nu12\">0xffff5bb1</span>, <span class=\"nu12\">0x895cd7be</span> ,\n<span class=\"nu12\">0x6b901122</span>, <span class=\"nu12\">0xfd987193</span>, <span class=\"nu12\">0xa679438e</span>, <span class=\"nu12\">0x49b40821</span> ,\n<span class=\"nu12\">0xf61e2562</span>, <span class=\"nu12\">0xc040b340</span>, <span class=\"nu12\">0x265e5a51</span>, <span class=\"nu12\">0xe9b6c7aa</span> ,\n<span class=\"nu12\">0xd62f105d</span>, <span class=\"nu12\">0x02441453</span>, <span class=\"nu12\">0xd8a1e681</span>, <span class=\"nu12\">0xe7d3fbc8</span> ,\n<span class=\"nu12\">0x21e1cde6</span>, <span class=\"nu12\">0xc33707d6</span>, <span class=\"nu12\">0xf4d50d87</span>, <span class=\"nu12\">0x455a14ed</span> ,\n<span class=\"nu12\">0xa9e3e905</span>, <span class=\"nu12\">0xfcefa3f8</span>, <span class=\"nu12\">0x676f02d9</span>, <span class=\"nu12\">0x8d2a4c8a</span> ,\n<span class=\"nu12\">0xfffa3942</span>, <span class=\"nu12\">0x8771f681</span>, <span class=\"nu12\">0x6d9d6122</span>, <span class=\"nu12\">0xfde5380c</span> ,\n<span class=\"nu12\">0xa4beea44</span>, <span class=\"nu12\">0x4bdecfa9</span>, <span class=\"nu12\">0xf6bb4b60</span>, <span class=\"nu12\">0xbebfbc70</span> ,\n<span class=\"nu12\">0x289b7ec6</span>, <span class=\"nu12\">0xeaa127fa</span>, <span class=\"nu12\">0xd4ef3085</span>, <span class=\"nu12\">0x04881d05</span> ,\n<span class=\"nu12\">0xd9d4d039</span>, <span class=\"nu12\">0xe6db99e5</span>, <span class=\"nu12\">0x1fa27cf8</span>, <span class=\"nu12\">0xc4ac5665</span> ,\n<span class=\"nu12\">0xf4292244</span>, <span class=\"nu12\">0x432aff97</span>, <span class=\"nu12\">0xab9423a7</span>, <span class=\"nu12\">0xfc93a039</span> ,\n<span class=\"nu12\">0x655b59c3</span>, <span class=\"nu12\">0x8f0ccc92</span>, <span class=\"nu12\">0xffeff47d</span>, <span class=\"nu12\">0x85845dd1</span> ,\n<span class=\"nu12\">0x6fa87e4f</span>, <span class=\"nu12\">0xfe2ce6e0</span>, <span class=\"nu12\">0xa3014314</span>, <span class=\"nu12\">0x4e0811a1</span> ,\n<span class=\"nu12\">0xf7537e82</span>, <span class=\"nu12\">0xbd3af235</span>, <span class=\"nu12\">0x2ad7d2bb</span>, <span class=\"nu12\">0xeb86d391</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>\n \n<span class=\"co1\">// r specifies the per-round shift amounts</span>\n<span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> r<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">22</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">22</span>,\n                      <span class=\"nu0\">5</span>,  <span class=\"nu0\">9</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">5</span>,  <span class=\"nu0\">9</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">5</span>,  <span class=\"nu0\">9</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">5</span>,  <span class=\"nu0\">9</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">20</span>,\n                      <span class=\"nu0\">4</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">23</span>,\n                      <span class=\"nu0\">6</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">21</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">15</span>, <span class=\"nu0\">21</span><span class=\"br0\">}</span><span class=\"sy4\">;</span>\n \n<span class=\"co1\">// leftrotate function definition</span>\n<span class=\"co2\">#define LEFTROTATE(x, c) (((x) &lt;&lt; (c)) | ((x) &gt;&gt; (32 - (c))))</span>\n \n<span class=\"kw4\">void</span> to_bytes<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> val, <span class=\"kw4\">uint8_t</span> <span class=\"sy2\">*</span>bytes<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    bytes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span> val<span class=\"sy4\">;</span>\n    bytes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>val <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    bytes<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>val <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    bytes<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>val <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">uint32_t</span> to_int32<span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span> <span class=\"sy2\">*</span>bytes<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span> bytes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>\n        <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span> bytes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>\n        <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span> bytes<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span>\n        <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"br0\">)</span> bytes<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> md5<span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span> <span class=\"sy2\">*</span>initial_msg, <span class=\"kw4\">size_t</span> initial_len, <span class=\"kw4\">uint8_t</span> <span class=\"sy2\">*</span>digest<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n    <span class=\"co1\">// These vars will contain the hash</span>\n    <span class=\"kw4\">uint32_t</span> h0, h1, h2, h3<span class=\"sy4\">;</span>\n \n    <span class=\"co1\">// Message (to prepare)</span>\n    <span class=\"kw4\">uint8_t</span> <span class=\"sy2\">*</span>msg <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"sy4\">;</span>\n \n    <span class=\"kw4\">size_t</span> new_len, offset<span class=\"sy4\">;</span>\n    <span class=\"kw4\">uint32_t</span> w<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw4\">uint32_t</span> a, b, c, d, i, f, g, temp<span class=\"sy4\">;</span>\n \n    <span class=\"co1\">// Initialize variables - simple count in nibbles:</span>\n    h0 <span class=\"sy1\">=</span> <span class=\"nu12\">0x67452301</span><span class=\"sy4\">;</span>\n    h1 <span class=\"sy1\">=</span> <span class=\"nu12\">0xefcdab89</span><span class=\"sy4\">;</span>\n    h2 <span class=\"sy1\">=</span> <span class=\"nu12\">0x98badcfe</span><span class=\"sy4\">;</span>\n    h3 <span class=\"sy1\">=</span> <span class=\"nu12\">0x10325476</span><span class=\"sy4\">;</span>\n \n    <span class=\"co1\">//Pre-processing:</span>\n    <span class=\"co1\">//append \"1\" bit to message    </span>\n    <span class=\"co1\">//append \"0\" bits until message length in bits ≡ 448 (mod 512)</span>\n    <span class=\"co1\">//append length mod (2^64) to message</span>\n \n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>new_len <span class=\"sy1\">=</span> initial_len <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> new_len <span class=\"sy2\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"sy2\">/</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">448</span><span class=\"sy2\">/</span><span class=\"nu0\">8</span><span class=\"sy4\">;</span> new_len<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"sy4\">;</span>\n \n    msg <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"kw3\">malloc</span><span class=\"br0\">(</span>new_len <span class=\"sy2\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">memcpy</span><span class=\"br0\">(</span>msg, initial_msg, initial_len<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    msg<span class=\"br0\">[</span>initial_len<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu12\">0x80</span><span class=\"sy4\">;</span> <span class=\"co1\">// append the \"1\" bit; most significant bit is \"first\"</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>offset <span class=\"sy1\">=</span> initial_len <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> offset <span class=\"sy1\">&lt;</span> new_len<span class=\"sy4\">;</span> offset<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        msg<span class=\"br0\">[</span>offset<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"co1\">// append \"0\" bits</span>\n \n    <span class=\"co1\">// append the len in bits at the end of the buffer.</span>\n    to_bytes<span class=\"br0\">(</span>initial_len<span class=\"sy2\">*</span><span class=\"nu0\">8</span>, msg <span class=\"sy2\">+</span> new_len<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"co1\">// initial_len&gt;&gt;29 == initial_len*8&gt;&gt;32, but avoids overflow.</span>\n    to_bytes<span class=\"br0\">(</span>initial_len<span class=\"sy1\">&gt;&gt;</span><span class=\"nu0\">29</span>, msg <span class=\"sy2\">+</span> new_len <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n    <span class=\"co1\">// Process the message in successive 512-bit chunks:</span>\n    <span class=\"co1\">//for each 512-bit chunk of message:</span>\n    <span class=\"kw1\">for</span><span class=\"br0\">(</span>offset<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> offset<span class=\"sy1\">&lt;</span>new_len<span class=\"sy4\">;</span> offset <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">512</span><span class=\"sy2\">/</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n        <span class=\"co1\">// break chunk into sixteen 32-bit words w[j], 0 ≤ j ≤ 15</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n            w<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> to_int32<span class=\"br0\">(</span>msg <span class=\"sy2\">+</span> offset <span class=\"sy2\">+</span> i<span class=\"sy2\">*</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n        <span class=\"co1\">// Initialize hash value for this chunk:</span>\n        a <span class=\"sy1\">=</span> h0<span class=\"sy4\">;</span>\n        b <span class=\"sy1\">=</span> h1<span class=\"sy4\">;</span>\n        c <span class=\"sy1\">=</span> h2<span class=\"sy4\">;</span>\n        d <span class=\"sy1\">=</span> h3<span class=\"sy4\">;</span>\n \n        <span class=\"co1\">// Main loop:</span>\n        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span><span class=\"nu0\">64</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                f <span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>~b<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> d<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n                g <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span>\n            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                f <span class=\"sy1\">=</span> <span class=\"br0\">(</span>d <span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"sy3\">|</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>~d<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n                g <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy2\">*</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span>\n            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">48</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                f <span class=\"sy1\">=</span> b <span class=\"sy3\">^</span> c <span class=\"sy3\">^</span> d<span class=\"sy4\">;</span>\n                g <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span>          \n            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n                f <span class=\"sy1\">=</span> c <span class=\"sy3\">^</span> <span class=\"br0\">(</span>b <span class=\"sy3\">|</span> <span class=\"br0\">(</span>~d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n                g <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy2\">*</span>i<span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span>\n            <span class=\"br0\">}</span>\n \n            temp <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span>\n            d <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span>\n            c <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>\n            b <span class=\"sy1\">=</span> b <span class=\"sy2\">+</span> LEFTROTATE<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy2\">+</span> f <span class=\"sy2\">+</span> k<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">+</span> w<span class=\"br0\">[</span>g<span class=\"br0\">]</span><span class=\"br0\">)</span>, r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n            a <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span>\n \n        <span class=\"br0\">}</span>\n \n        <span class=\"co1\">// Add this chunk\'s hash to result so far:</span>\n        h0 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a<span class=\"sy4\">;</span>\n        h1 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> b<span class=\"sy4\">;</span>\n        h2 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> c<span class=\"sy4\">;</span>\n        h3 <span class=\"sy2\">+</span><span class=\"sy1\">=</span> d<span class=\"sy4\">;</span>\n \n    <span class=\"br0\">}</span>\n \n    <span class=\"co1\">// cleanup</span>\n    <span class=\"kw3\">free</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n    <span class=\"co1\">//var char digest[16] := h0 append h1 append h2 append h3 //(Output is in little-endian)</span>\n    to_bytes<span class=\"br0\">(</span>h0, digest<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    to_bytes<span class=\"br0\">(</span>h1, digest <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    to_bytes<span class=\"br0\">(</span>h2, digest <span class=\"sy2\">+</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    to_bytes<span class=\"br0\">(</span>h3, digest <span class=\"sy2\">+</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span> <span class=\"sy2\">**</span>argv<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>msg <span class=\"sy1\">=</span> argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw4\">size_t</span> len<span class=\"sy4\">;</span>\n    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n    <span class=\"kw4\">uint8_t</span> result<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n \n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"usage: %s \'string\'<span class=\"es1\">\\n</span>\"</span>, argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n    <span class=\"br0\">}</span>\n \n    len <span class=\"sy1\">=</span> <span class=\"kw3\">strlen</span><span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n    <span class=\"co1\">// benchmark</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        md5<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span><span class=\"sy2\">*</span><span class=\"br0\">)</span>msg, len, result<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"co1\">// display result</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">16</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2.2x\"</span>, result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n</pre>',11,1,NULL),(252,103,'<pre class=\"de1\">\nthreshold <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span>\nlearning_rate <span class=\"sy0\">=</span> <span class=\"nu0\">0.1</span>\nweights <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>\ntraining_set <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\n \n<span class=\"kw1\">def</span> dot_product<span class=\"br0\">(</span>values<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>value * weight <span class=\"kw1\">for</span> value<span class=\"sy0\">,</span> weight <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>values<span class=\"sy0\">,</span> weights<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n<span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:\n    <span class=\"kw1\">print</span> <span class=\"st0\">\'-\'</span> * <span class=\"nu0\">60</span>\n    error_count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    <span class=\"kw1\">for</span> input_vector<span class=\"sy0\">,</span> desired_output <span class=\"kw1\">in</span> training_set:\n        <span class=\"kw1\">print</span> weights\n        result <span class=\"sy0\">=</span> dot_product<span class=\"br0\">(</span>input_vector<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> threshold\n        error <span class=\"sy0\">=</span> desired_output - result\n        <span class=\"kw1\">if</span> error <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>:\n            error_count +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n            <span class=\"kw1\">for</span> index<span class=\"sy0\">,</span> value <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>input_vector<span class=\"br0\">)</span>:\n                weights<span class=\"br0\">[</span>index<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> learning_rate * error * value\n    <span class=\"kw1\">if</span> error_count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:\n        <span class=\"kw1\">break</span>\n</pre>',2,1,NULL),(253,104,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> SMA<span class=\"sy3\">-</span>star<span class=\"br0\">(</span>problem<span class=\"br0\">)</span><span class=\"sy1\">:</span> path\n  queue<span class=\"sy1\">:</span> <span class=\"kw4\">set</span> <span class=\"kw1\">of</span> nodes<span class=\"sy1\">,</span> ordered by f<span class=\"sy3\">-</span>cost<span class=\"sy1\">;</span>\n<span class=\"kw1\">begin</span>\n  queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>problem<span class=\"sy1\">.</span><span class=\"me1\">root</span><span class=\"sy3\">-</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n \n  <span class=\"kw1\">while</span> <span class=\"kw2\">True</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n    <span class=\"kw1\">if</span> queue<span class=\"sy1\">.</span><span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> return failure<span class=\"sy1\">;</span> <span class=\"co1\">//there is no solution that fits in the given memory</span>\n    node <span class=\"sy1\">:</span><span class=\"sy3\">=</span> queue<span class=\"sy1\">.</span><span class=\"kw1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// min-f-cost-node</span>\n    <span class=\"kw1\">if</span> problem<span class=\"sy1\">.</span><span class=\"me1\">is</span><span class=\"sy3\">-</span>goal<span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"kw1\">then</span> return success<span class=\"sy1\">;</span>\n \n    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> next<span class=\"sy3\">-</span>successor<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> !problem<span class=\"sy1\">.</span><span class=\"me1\">is</span><span class=\"sy3\">-</span>goal<span class=\"br0\">(</span>s<span class=\"br0\">)</span> &amp;&amp; depth<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy3\">==</span> max_depth <span class=\"kw1\">then</span>\n        f<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> inf<span class=\"sy1\">;</span> \n        <span class=\"co1\">// there is no memory left to go past s, so the entire path is useless</span>\n    <span class=\"kw1\">else</span>\n        f<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max<span class=\"br0\">(</span>f<span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy3\">+</span> h<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\n        <span class=\"co1\">// f-value of the successor is the maximum of</span>\n        <span class=\"co1\">//      f-value of the parent and </span>\n        <span class=\"co1\">//      heuristic of the successor + path length to the successor</span>\n    endif\n    <span class=\"kw1\">if</span> no more successors <span class=\"kw1\">then</span>\n       update node<span class=\"sy3\">-</span>s f<span class=\"sy3\">-</span>cost <span class=\"kw3\">and</span> those <span class=\"kw1\">of</span> its ancestors <span class=\"kw1\">if</span> needed\n \n    <span class=\"kw1\">if</span> node<span class=\"sy1\">.</span><span class=\"me1\">successors</span> ⊆ queue <span class=\"kw1\">then</span> queue<span class=\"sy1\">.</span><span class=\"me1\">remove</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span> \n    <span class=\"co1\">// all children have already been added to the queue via a shorter way</span>\n    <span class=\"kw1\">if</span> memory is full <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span>\n      badNode <span class=\"sy1\">:</span><span class=\"sy3\">=</span> shallowest node <span class=\"kw1\">with</span> highest f<span class=\"sy3\">-</span>cost<span class=\"sy1\">;</span>\n      <span class=\"kw1\">for</span> parent <span class=\"kw1\">in</span> badNode<span class=\"sy1\">.</span><span class=\"me1\">parents</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n        parent<span class=\"sy1\">.</span><span class=\"me1\">successors</span><span class=\"sy1\">.</span><span class=\"me1\">remove</span><span class=\"br0\">(</span>badNode<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">if</span> needed <span class=\"kw1\">then</span> queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy1\">;</span> \n      endfor\n    endif\n \n    queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n  endwhile\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(254,105,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> SMA<span class=\"sy3\">-</span>star<span class=\"br0\">(</span>problem<span class=\"br0\">)</span><span class=\"sy1\">:</span> path\n  queue<span class=\"sy1\">:</span> <span class=\"kw4\">set</span> <span class=\"kw1\">of</span> nodes<span class=\"sy1\">,</span> ordered by f<span class=\"sy3\">-</span>cost<span class=\"sy1\">;</span>\n<span class=\"kw1\">begin</span>\n  queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>problem<span class=\"sy1\">.</span><span class=\"me1\">root</span><span class=\"sy3\">-</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n \n  <span class=\"kw1\">while</span> <span class=\"kw2\">True</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n    <span class=\"kw1\">if</span> queue<span class=\"sy1\">.</span><span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> return failure<span class=\"sy1\">;</span> <span class=\"co1\">//there is no solution that fits in the given memory</span>\n    node <span class=\"sy1\">:</span><span class=\"sy3\">=</span> queue<span class=\"sy1\">.</span><span class=\"kw1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// min-f-cost-node</span>\n    <span class=\"kw1\">if</span> problem<span class=\"sy1\">.</span><span class=\"me1\">is</span><span class=\"sy3\">-</span>goal<span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"kw1\">then</span> return success<span class=\"sy1\">;</span>\n \n    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> next<span class=\"sy3\">-</span>successor<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> !problem<span class=\"sy1\">.</span><span class=\"me1\">is</span><span class=\"sy3\">-</span>goal<span class=\"br0\">(</span>s<span class=\"br0\">)</span> &amp;&amp; depth<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy3\">==</span> max_depth <span class=\"kw1\">then</span>\n        f<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> inf<span class=\"sy1\">;</span> \n        <span class=\"co1\">// there is no memory left to go past s, so the entire path is useless</span>\n    <span class=\"kw1\">else</span>\n        f<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max<span class=\"br0\">(</span>f<span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy3\">+</span> h<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\n        <span class=\"co1\">// f-value of the successor is the maximum of</span>\n        <span class=\"co1\">//      f-value of the parent and </span>\n        <span class=\"co1\">//      heuristic of the successor + path length to the successor</span>\n    endif\n    <span class=\"kw1\">if</span> no more successors <span class=\"kw1\">then</span>\n       update node<span class=\"sy3\">-</span>s f<span class=\"sy3\">-</span>cost <span class=\"kw3\">and</span> those <span class=\"kw1\">of</span> its ancestors <span class=\"kw1\">if</span> needed\n \n    <span class=\"kw1\">if</span> node<span class=\"sy1\">.</span><span class=\"me1\">successors</span> ⊆ queue <span class=\"kw1\">then</span> queue<span class=\"sy1\">.</span><span class=\"me1\">remove</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy1\">;</span> \n    <span class=\"co1\">// all children have already been added to the queue via a shorter way</span>\n    <span class=\"kw1\">if</span> memory is full <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span>\n      badNode <span class=\"sy1\">:</span><span class=\"sy3\">=</span> shallowest node <span class=\"kw1\">with</span> highest f<span class=\"sy3\">-</span>cost<span class=\"sy1\">;</span>\n      <span class=\"kw1\">for</span> parent <span class=\"kw1\">in</span> badNode<span class=\"sy1\">.</span><span class=\"me1\">parents</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n        parent<span class=\"sy1\">.</span><span class=\"me1\">successors</span><span class=\"sy1\">.</span><span class=\"me1\">remove</span><span class=\"br0\">(</span>badNode<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">if</span> needed <span class=\"kw1\">then</span> queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy1\">;</span> \n      endfor\n    endif\n \n    queue<span class=\"sy1\">.</span><span class=\"me1\">insert</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span>\n  endwhile\n<span class=\"kw1\">end</span>\n</pre>',12,1,NULL),(255,106,'<pre class=\"de1\">\n<span class=\"kw4\">uint16_t</span> Fletcher16<span class=\"br0\">(</span> <span class=\"kw4\">uint8_t</span><span class=\"sy0\">*</span> data<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> count <span class=\"br0\">)</span>\n</pre>',1,1,NULL),(256,106,'<pre class=\"de1\">\n      <span class=\"kw4\">uint16_t</span> csum<span class=\"sy0\">;</span>\n      <span class=\"kw4\">uint8_t</span> c0<span class=\"sy0\">,</span>c1<span class=\"sy0\">,</span>f0<span class=\"sy0\">,</span>f1<span class=\"sy0\">;</span>\n \n      csum <span class=\"sy0\">=</span> Fletcher16<span class=\"br0\">(</span> data<span class=\"sy0\">,</span> length<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      f0 <span class=\"sy0\">=</span> csum <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">;</span>\n      f1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>csum <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">;</span>\n      c0 <span class=\"sy0\">=</span> <span class=\"nu12\">0xff</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> f0 <span class=\"sy0\">+</span> f1<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      c1 <span class=\"sy0\">=</span> <span class=\"nu12\">0xff</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> f0 <span class=\"sy0\">+</span> c0 <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n</pre>',1,1,NULL),(257,106,'<pre class=\"de1\">\n \n<span class=\"kw4\">uint32_t</span> fletcher32<span class=\"br0\">(</span> <span class=\"kw4\">uint16_t</span> <span class=\"kw4\">const</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> words <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">uint32_t</span> sum1 <span class=\"sy0\">=</span> <span class=\"nu12\">0xffff</span><span class=\"sy0\">,</span> sum2 <span class=\"sy0\">=</span> <span class=\"nu12\">0xffff</span><span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>words<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw4\">unsigned</span> tlen <span class=\"sy0\">=</span> words <span class=\"sy0\">&gt;</span> <span class=\"nu0\">359</span> <span class=\"sy0\">?</span> <span class=\"nu0\">359</span> <span class=\"sy0\">:</span> words<span class=\"sy0\">;</span>\n                words <span class=\"sy0\">-=</span> tlen<span class=\"sy0\">;</span>\n                <span class=\"kw1\">do</span> <span class=\"br0\">{</span>\n                        sum2 <span class=\"sy0\">+=</span> sum1 <span class=\"sy0\">+=</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>tlen<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xffff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xffff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"coMULTI\">/* Second reduction step to reduce sums to 16 bits */</span>\n        sum1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xffff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        sum2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xffff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> sum2 <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span> <span class=\"sy0\">|</span> sum1<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(258,106,'<pre class=\"de1\">\n \n<span class=\"kw4\">uint16_t</span> fletcher16<span class=\"br0\">(</span> <span class=\"kw4\">uint8_t</span> <span class=\"kw4\">const</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> bytes <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">uint16_t</span> sum1 <span class=\"sy0\">=</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">,</span> sum2 <span class=\"sy0\">=</span> <span class=\"nu12\">0xff</span><span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>bytes<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw4\">size_t</span> tlen <span class=\"sy0\">=</span> bytes <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> <span class=\"sy0\">?</span> <span class=\"nu0\">20</span> <span class=\"sy0\">:</span> bytes<span class=\"sy0\">;</span>\n                bytes <span class=\"sy0\">-=</span> tlen<span class=\"sy0\">;</span>\n                <span class=\"kw1\">do</span> <span class=\"br0\">{</span>\n                        sum2 <span class=\"sy0\">+=</span> sum1 <span class=\"sy0\">+=</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">++;</span>\n                <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>tlen<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"coMULTI\">/* Second reduction step to reduce sums to 8 bits */</span>\n        sum1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum1 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        sum2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&amp;</span> <span class=\"nu12\">0xff</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum2 <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> sum2 <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">|</span> sum1<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(259,107,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> <span class=\"kw4\">int</span> CodePointFromCharacter<span class=\"br0\">(</span><span class=\"kw4\">char</span> character<span class=\"br0\">)</span> <span class=\"br0\">{</span>...<span class=\"br0\">}</span>\n \n<span class=\"kw2\">function</span> <span class=\"kw4\">char</span> CharacterFromCodePoint<span class=\"br0\">(</span><span class=\"kw4\">int</span> codePoint<span class=\"br0\">)</span> <span class=\"br0\">{</span>...<span class=\"br0\">}</span>\n \n<span class=\"kw2\">function</span> <span class=\"kw4\">int</span> NumberOfValidInputCharacters<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>...<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(260,107,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> <span class=\"kw4\">char</span> GenerateCheckCharacter<span class=\"br0\">(</span>string input<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n        <span class=\"kw4\">int</span> factor <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> NumberOfValidInputCharacters<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n        <span class=\"co1\">// Starting from the right and working leftwards is easier since </span>\n        <span class=\"co1\">// the initial \"factor\" will always be \"2\" </span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> input.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw4\">int</span> codePoint <span class=\"sy0\">=</span> CodePointFromCharacter<span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw4\">int</span> addend <span class=\"sy0\">=</span> factor <span class=\"sy0\">*</span> codePoint<span class=\"sy0\">;</span>\n \n                <span class=\"co1\">// Alternate the \"factor\" that each \"codePoint\" is multiplied by</span>\n                factor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>factor <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n \n                <span class=\"co1\">// Sum the digits of the \"addend\" as expressed in base \"n\"</span>\n                addend <span class=\"sy0\">=</span> <span class=\"br0\">(</span>addend <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>addend <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum <span class=\"sy0\">+=</span> addend<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co1\">// Calculate the number that must be added to the \"sum\" </span>\n        <span class=\"co1\">// to make it divisible by \"n\"</span>\n        <span class=\"kw4\">int</span> remainder <span class=\"sy0\">=</span> sum <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> checkCodePoint <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> remainder<span class=\"br0\">)</span> <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">return</span> CharacterFromCodePoint<span class=\"br0\">(</span>checkCodePoint<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(261,107,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> bool ValidateCheckCharacter<span class=\"br0\">(</span>string input<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n \n        <span class=\"kw4\">int</span> factor <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> NumberOfValidInputCharacters<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n        <span class=\"co1\">// Starting from the right, work leftwards</span>\n        <span class=\"co1\">// Now, the initial \"factor\" will always be \"1\" </span>\n        <span class=\"co1\">// since the last character is the check character</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> input.<span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw4\">int</span> codePoint <span class=\"sy0\">=</span> CodePointFromCharacter<span class=\"br0\">(</span>input<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw4\">int</span> addend <span class=\"sy0\">=</span> factor <span class=\"sy0\">*</span> codePoint<span class=\"sy0\">;</span>\n \n                <span class=\"co1\">// Alternate the \"factor\" that each \"codePoint\" is multiplied by</span>\n                factor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>factor <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n \n                <span class=\"co1\">// Sum the digits of the \"addend\" as expressed in base \"n\"</span>\n                addend <span class=\"sy0\">=</span> <span class=\"br0\">(</span>addend <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>addend <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                sum <span class=\"sy0\">+=</span> addend<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"kw4\">int</span> remainder <span class=\"sy0\">=</span> sum <span class=\"sy0\">%</span> n<span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>remainder <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1,NULL),(262,108,'<pre class=\"de1\">\nFIND [/V] [/C] [/N] [/I] \"string\" [[drive:][path]filename[...]]\n</pre>',5,1,NULL),(263,108,'<pre class=\"de1\">\nfind \"keyword\" <span class=\"sy0\">&lt;</span> inputfilename <span class=\"sy0\">&gt;</span> outputfilename\n</pre>',23,1,NULL),(264,109,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> power<span class=\"br0\">(</span>x,n<span class=\"br0\">)</span>\n  result = <span class=\"nu0\">1</span>\n  <span class=\"kw1\">while</span> n.<span class=\"me1\">nonzero</span>?\n    <span class=\"kw1\">if</span> n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">nonzero</span>?\n      result <span class=\"sy0\">*</span>= x\n      n <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span>\n    <span class=\"kw1\">end</span>\n    x <span class=\"sy0\">*</span>= x\n    n <span class=\"sy0\">/</span>= <span class=\"nu0\">2</span>\n  <span class=\"kw1\">end</span>\n  <span class=\"kw2\">return</span> result\n<span class=\"kw1\">end</span>\n</pre>',28,1,NULL),(265,110,'<pre class=\"de1\">\n f <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n</pre>',15,1,NULL),(266,110,'<pre class=\"de1\">\n f n <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> f <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n</pre>',15,1,NULL),(267,110,'<pre class=\"de1\">\n <span class=\"kw1\">data</span> Color <span class=\"sy0\">=</span> ColorConstructor <span class=\"kw4\">Integer</span> <span class=\"kw4\">String</span>\n</pre>',15,1,NULL),(268,110,'<pre class=\"de1\">\n integerPart <span class=\"br0\">(</span>ColorConstructor theInteger <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> theInteger\n</pre>',15,1,NULL),(269,110,'<pre class=\"de1\">\n stringPart <span class=\"br0\">(</span>ColorConstructor <span class=\"sy0\">_</span> theString<span class=\"br0\">)</span> <span class=\"sy0\">=</span> theString\n</pre>',15,1,NULL),(270,110,'<pre class=\"de1\">\n <span class=\"br0\">[</span>A x<span class=\"sy0\">|</span>A x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>A <span class=\"nu0\">1</span><span class=\"sy0\">,</span> B <span class=\"nu0\">1</span><span class=\"sy0\">,</span> A <span class=\"nu0\">2</span><span class=\"sy0\">,</span> B <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span>\n</pre>',15,1,NULL),(271,110,'<pre class=\"de1\">\n <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"co1\">-- an empty list</span>\n x:xs <span class=\"co1\">-- an element x constructed on a list xs</span>\n</pre>',15,1,NULL),(272,110,'<pre class=\"de1\">\n <span class=\"kw3\">head</span> <span class=\"br0\">(</span>element:list<span class=\"br0\">)</span> <span class=\"sy0\">=</span> element\n</pre>',15,1,NULL),(273,110,'<pre class=\"de1\">\n <span class=\"kw3\">head</span> <span class=\"br0\">(</span>element:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> element\n</pre>',15,1,NULL),(274,110,'<pre class=\"de1\">\n <span class=\"br0\">[</span><span class=\"st0\">\'a\'</span><span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">]</span>\n</pre>',15,1,NULL),(275,110,'<pre class=\"de1\">\n <span class=\"br0\">[</span>letter<span class=\"sy0\">,</span> digit<span class=\"br0\">]</span> <span class=\"sy0\">|</span> isAlpha letter <span class=\"sy0\">&amp;&amp;</span> isDigit digit\n</pre>',15,1,NULL),(276,111,'<pre class=\"de1\">\nPAGE_SZ <span class=\"sy0\">=</span> <span class=\"nu0\">20</span>\n \n<span class=\"kw1\">class</span> Page<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:\n \n    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n        <span class=\"kw2\">self</span>.<span class=\"me1\">m</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\n        <span class=\"kw2\">self</span>.<span class=\"me1\">d</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n \n    <span class=\"kw1\">def</span> full<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">m</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> PAGE_SZ \n \n    <span class=\"kw1\">def</span> put<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span>:\n        <span class=\"kw2\">self</span>.<span class=\"me1\">m</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v\n \n    <span class=\"kw1\">def</span> get<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">m</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>\n \n<span class=\"kw1\">class</span> EH<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:\n \n    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:\n        <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> \n        p <span class=\"sy0\">=</span> Page<span class=\"br0\">(</span><span class=\"br0\">)</span>\n        <span class=\"kw2\">self</span>.<span class=\"me1\">pp</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span>p<span class=\"br0\">]</span>\n \n    <span class=\"kw1\">def</span> get_page<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span>:\n        h <span class=\"sy0\">=</span> <span class=\"kw2\">hash</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> \n        p <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">pp</span><span class=\"br0\">[</span> h &amp; <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\n        <span class=\"kw1\">return</span> p        \n \n    <span class=\"kw1\">def</span>  put<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> v<span class=\"br0\">)</span>:\n        p <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">get_page</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>\n        <span class=\"kw1\">if</span> p.<span class=\"me1\">full</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> p.<span class=\"me1\">d</span> <span class=\"sy0\">==</span> <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span>:\n            <span class=\"kw2\">self</span>.<span class=\"me1\">pp</span> *<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\n            <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n        <span class=\"kw1\">if</span> p.<span class=\"me1\">full</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> p.<span class=\"me1\">d</span> <span class=\"sy0\">&lt;</span> <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span>:\n            p.<span class=\"me1\">put</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n            p1 <span class=\"sy0\">=</span> Page<span class=\"br0\">(</span><span class=\"br0\">)</span>\n            p2 <span class=\"sy0\">=</span> Page<span class=\"br0\">(</span><span class=\"br0\">)</span>\n            <span class=\"kw1\">for</span> k2<span class=\"sy0\">,</span>v2 <span class=\"kw1\">in</span> p.<span class=\"me1\">m</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:\n                h <span class=\"sy0\">=</span> <span class=\"kw2\">hash</span><span class=\"br0\">(</span>k2<span class=\"br0\">)</span>\n                h <span class=\"sy0\">=</span> h &amp; <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw2\">self</span>.<span class=\"me1\">gd</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span>\n                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h <span class=\"sy0\">&gt;&gt;</span> p.<span class=\"me1\">d</span><span class=\"br0\">)</span> &amp; <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:\n                    p2.<span class=\"me1\">put</span><span class=\"br0\">(</span>k2<span class=\"sy0\">,</span>v2<span class=\"br0\">)</span>\n                <span class=\"kw1\">else</span>:\n                    p1.<span class=\"me1\">put</span><span class=\"br0\">(</span>k2<span class=\"sy0\">,</span>v2<span class=\"br0\">)</span>\n            <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>x <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">pp</span><span class=\"br0\">)</span>:\n                <span class=\"kw1\">if</span> x <span class=\"sy0\">==</span> p:\n                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;&gt;</span> p.<span class=\"me1\">d</span><span class=\"br0\">)</span> &amp; <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:\n                        <span class=\"kw2\">self</span>.<span class=\"me1\">pp</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p2\n                    <span class=\"kw1\">else</span>:\n                        <span class=\"kw2\">self</span>.<span class=\"me1\">pp</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p1\n \n            p2.<span class=\"me1\">d</span> <span class=\"sy0\">=</span> p1.<span class=\"me1\">d</span> <span class=\"sy0\">=</span> p.<span class=\"me1\">d</span> + <span class=\"nu0\">1</span>\n        <span class=\"kw1\">else</span>:    \n            p.<span class=\"me1\">put</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>  v<span class=\"br0\">)</span>\n \n    <span class=\"kw1\">def</span> get<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span>:\n        p <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">get_page</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> p.<span class=\"me1\">get</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span>\n \n \n \n<span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:\n    eh <span class=\"sy0\">=</span> EH<span class=\"br0\">(</span><span class=\"br0\">)</span>\n    N <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span>\n    l <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n    <span class=\"kw1\">import</span> <span class=\"kw3\">random</span>\n    <span class=\"kw3\">random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> l:\n        eh.<span class=\"me1\">put</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>x<span class=\"br0\">)</span>\n    <span class=\"kw1\">print</span> l\n \n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>:\n        <span class=\"kw1\">print</span> eh.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>\n</pre>',2,1,NULL);
/*!40000 ALTER TABLE `algorithm_implementation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementationquestion`
--

DROP TABLE IF EXISTS `algorithm_implementationquestion`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementationquestion` (
  `question_ptr_id` int(11) NOT NULL,
  PRIMARY KEY (`question_ptr_id`),
  CONSTRAINT `question_ptr_id_refs_id_4a6e9acc` FOREIGN KEY (`question_ptr_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementationquestion`
--

LOCK TABLES `algorithm_implementationquestion` WRITE;
/*!40000 ALTER TABLE `algorithm_implementationquestion` DISABLE KEYS */;
INSERT INTO `algorithm_implementationquestion` VALUES (2),(3),(4);
/*!40000 ALTER TABLE `algorithm_implementationquestion` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementationquestionanswer`
--

DROP TABLE IF EXISTS `algorithm_implementationquestionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementationquestionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `implementation_id` int(11) NOT NULL,
  `implementation_question_id` int(11) NOT NULL,
  `question_answer_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_implementationquestionanswer_6340c63c` (`user_id`),
  KEY `algorithm_implementationquestionanswer_b3719bb6` (`implementation_id`),
  KEY `algorithm_implementationquestionanswer_b4d1904d` (`implementation_question_id`),
  KEY `algorithm_implementationquestionanswer_6ed5681d` (`question_answer_id`),
  CONSTRAINT `implementation_question_id_refs_question_ptr_id_7a2dd5f5` FOREIGN KEY (`implementation_question_id`) REFERENCES `algorithm_implementationquestion` (`question_ptr_id`),
  CONSTRAINT `implementation_id_refs_id_a8cbae5a` FOREIGN KEY (`implementation_id`) REFERENCES `algorithm_implementation` (`id`),
  CONSTRAINT `question_answer_id_refs_id_487687c3` FOREIGN KEY (`question_answer_id`) REFERENCES `algorithm_questionanswer` (`id`),
  CONSTRAINT `user_id_refs_id_376352f9` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementationquestionanswer`
--

LOCK TABLES `algorithm_implementationquestionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_implementationquestionanswer` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_implementationquestionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_interest`
--

DROP TABLE IF EXISTS `algorithm_interest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_interest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `classification_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_interest_d3dde821` (`classification_id`),
  KEY `algorithm_interest_6340c63c` (`user_id`),
  CONSTRAINT `user_id_refs_id_551022bb` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `classification_id_refs_id_fe0553e8` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_interest`
--

LOCK TABLES `algorithm_interest` WRITE;
/*!40000 ALTER TABLE `algorithm_interest` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_interest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_proeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_proeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_proeficiencyscale` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `value` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_proeficiencyscale_6340c63c` (`user_id`),
  CONSTRAINT `user_id_refs_id_00718f22` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_proeficiencyscale`
--

LOCK TABLES `algorithm_proeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_proeficiencyscale` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_proeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_programminglanguage`
--

DROP TABLE IF EXISTS `algorithm_programminglanguage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_programminglanguage` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_programminglanguage`
--

LOCK TABLES `algorithm_programminglanguage` WRITE;
/*!40000 ALTER TABLE `algorithm_programminglanguage` DISABLE KEYS */;
INSERT INTO `algorithm_programminglanguage` VALUES (1,'C'),(2,'PYTHON'),(3,'PHP'),(4,'BASH'),(5,'TEXT'),(6,'CSHARP'),(7,'JAVA'),(8,'BNF'),(9,'LUA'),(10,'JAVASCRIPT'),(11,'CPP'),(12,'PASCAL'),(13,'OCAML'),(14,'SCHEME'),(15,'HASKELL'),(16,'MATLAB'),(17,'PROLOG'),(18,'FREEBASIC'),(19,'ASM'),(20,'PERL'),(21,'VB'),(22,'QBASIC'),(23,'DOS'),(24,'VBNET'),(25,'XML'),(26,'FORTRAN'),(27,'DIFF'),(28,'RUBY');
/*!40000 ALTER TABLE `algorithm_programminglanguage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_programminglanguageproeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_programminglanguageproeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_programminglanguageproeficiencyscale` (
  `proeficiencyscale_ptr_id` int(11) NOT NULL,
  `programming_language_id` int(11) NOT NULL,
  PRIMARY KEY (`proeficiencyscale_ptr_id`),
  KEY `algorithm_programminglanguageproeficiencyscale_4a49299f` (`programming_language_id`),
  CONSTRAINT `programming_language_id_refs_id_11fd400d` FOREIGN KEY (`programming_language_id`) REFERENCES `algorithm_programminglanguage` (`id`),
  CONSTRAINT `proeficiencyscale_ptr_id_refs_id_f868141a` FOREIGN KEY (`proeficiencyscale_ptr_id`) REFERENCES `algorithm_proeficiencyscale` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_programminglanguageproeficiencyscale`
--

LOCK TABLES `algorithm_programminglanguageproeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_programminglanguageproeficiencyscale` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_programminglanguageproeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_question`
--

DROP TABLE IF EXISTS `algorithm_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_question` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `text` longtext NOT NULL,
  `priority` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_question`
--

LOCK TABLES `algorithm_question` WRITE;
/*!40000 ALTER TABLE `algorithm_question` DISABLE KEYS */;
INSERT INTO `algorithm_question` VALUES (1,'What is your profile',2),(2,'This code compiles',3),(3,'How much readable is this code',4),(4,'How is this code\'s performance scalability',5);
/*!40000 ALTER TABLE `algorithm_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_questionanswer`
--

DROP TABLE IF EXISTS `algorithm_questionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_questionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question_id` int(11) NOT NULL,
  `value` int(11) NOT NULL,
  `text` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_questionanswer_25110688` (`question_id`),
  CONSTRAINT `question_id_refs_id_17115741` FOREIGN KEY (`question_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_questionanswer`
--

LOCK TABLES `algorithm_questionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_questionanswer` DISABLE KEYS */;
INSERT INTO `algorithm_questionanswer` VALUES (1,1,10,'Professor, UFRJ, IT'),(2,1,8,'Professional, UFRJ, IT'),(3,1,6,'Student, UFRJ, IT'),(4,1,4,'Professor, non-UFRJ, IT'),(5,1,2,'Professional, non-UFRJ, IT'),(6,1,1,'Student, non-UFRJ, IT'),(7,1,0,'non-IT'),(8,2,0,'No'),(9,2,1,'Yes'),(10,3,1,'1'),(11,3,2,'2'),(12,3,3,'3'),(13,3,4,'4'),(14,3,5,'5'),(15,4,1,'1'),(16,4,2,'2'),(17,4,3,'3'),(18,4,4,'4'),(19,4,5,'5');
/*!40000 ALTER TABLE `algorithm_questionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_userquestion`
--

DROP TABLE IF EXISTS `algorithm_userquestion`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_userquestion` (
  `question_ptr_id` int(11) NOT NULL,
  PRIMARY KEY (`question_ptr_id`),
  CONSTRAINT `question_ptr_id_refs_id_66daba40` FOREIGN KEY (`question_ptr_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_userquestion`
--

LOCK TABLES `algorithm_userquestion` WRITE;
/*!40000 ALTER TABLE `algorithm_userquestion` DISABLE KEYS */;
INSERT INTO `algorithm_userquestion` VALUES (1);
/*!40000 ALTER TABLE `algorithm_userquestion` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_userquestionanswer`
--

DROP TABLE IF EXISTS `algorithm_userquestionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_userquestionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `user_question_id` int(11) NOT NULL,
  `question_answer_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_userquestionanswer_6340c63c` (`user_id`),
  KEY `algorithm_userquestionanswer_b9a81bdf` (`user_question_id`),
  KEY `algorithm_userquestionanswer_6ed5681d` (`question_answer_id`),
  CONSTRAINT `question_answer_id_refs_id_a5315bd3` FOREIGN KEY (`question_answer_id`) REFERENCES `algorithm_questionanswer` (`id`),
  CONSTRAINT `user_id_refs_id_f84ffcfb` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `user_question_id_refs_question_ptr_id_e84c7f23` FOREIGN KEY (`user_question_id`) REFERENCES `algorithm_userquestion` (`question_ptr_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_userquestionanswer`
--

LOCK TABLES `algorithm_userquestionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_userquestionanswer` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_userquestionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group_permissions_5f412f9a` (`group_id`),
  KEY `auth_group_permissions_83d7f98b` (`permission_id`),
  CONSTRAINT `group_id_refs_id_f4b32aac` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `permission_id_refs_id_6ba0f519` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  KEY `auth_permission_37ef4eb4` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_d043b34a` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add permission',1,'add_permission'),(2,'Can change permission',1,'change_permission'),(3,'Can delete permission',1,'delete_permission'),(4,'Can add group',2,'add_group'),(5,'Can change group',2,'change_group'),(6,'Can delete group',2,'delete_group'),(7,'Can add user',3,'add_user'),(8,'Can change user',3,'change_user'),(9,'Can delete user',3,'delete_user'),(10,'Can add log entry',4,'add_logentry'),(11,'Can change log entry',4,'change_logentry'),(12,'Can delete log entry',4,'delete_logentry'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(22,'Can add programming language',8,'add_programminglanguage'),(23,'Can change programming language',8,'change_programminglanguage'),(24,'Can delete programming language',8,'delete_programminglanguage'),(25,'Can add classification',9,'add_classification'),(26,'Can change classification',9,'change_classification'),(27,'Can delete classification',9,'delete_classification'),(28,'Can add algorithm',10,'add_algorithm'),(29,'Can change algorithm',10,'change_algorithm'),(30,'Can delete algorithm',10,'delete_algorithm'),(31,'Can add implementation',11,'add_implementation'),(32,'Can change implementation',11,'change_implementation'),(33,'Can delete implementation',11,'delete_implementation'),(34,'Can add interest',12,'add_interest'),(35,'Can change interest',12,'change_interest'),(36,'Can delete interest',12,'delete_interest'),(37,'Can add proeficiency scale',13,'add_proeficiencyscale'),(38,'Can change proeficiency scale',13,'change_proeficiencyscale'),(39,'Can delete proeficiency scale',13,'delete_proeficiencyscale'),(40,'Can add programming language proeficiency scale',14,'add_programminglanguageproeficiencyscale'),(41,'Can change programming language proeficiency scale',14,'change_programminglanguageproeficiencyscale'),(42,'Can delete programming language proeficiency scale',14,'delete_programminglanguageproeficiencyscale'),(43,'Can add classification proeficiency scale',15,'add_classificationproeficiencyscale'),(44,'Can change classification proeficiency scale',15,'change_classificationproeficiencyscale'),(45,'Can delete classification proeficiency scale',15,'delete_classificationproeficiencyscale'),(46,'Can add question',16,'add_question'),(47,'Can change question',16,'change_question'),(48,'Can delete question',16,'delete_question'),(49,'Can add question answer',17,'add_questionanswer'),(50,'Can change question answer',17,'change_questionanswer'),(51,'Can delete question answer',17,'delete_questionanswer'),(52,'Can add user question',18,'add_userquestion'),(53,'Can change user question',18,'change_userquestion'),(54,'Can delete user question',18,'delete_userquestion'),(55,'Can add user question answer',19,'add_userquestionanswer'),(56,'Can change user question answer',19,'change_userquestionanswer'),(57,'Can delete user question answer',19,'delete_userquestionanswer'),(58,'Can add implementation question',20,'add_implementationquestion'),(59,'Can change implementation question',20,'change_implementationquestion'),(60,'Can delete implementation question',20,'delete_implementationquestion'),(61,'Can add implementation question answer',21,'add_implementationquestionanswer'),(62,'Can change implementation question answer',21,'change_implementationquestionanswer'),(63,'Can delete implementation question answer',21,'delete_implementationquestionanswer');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime NOT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(75) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$10000$3bJEFa3n5UGd$3ulEPa8jqAGMh5tzyjqgjFUzO2EQURjG8YjByqqwIKU=','2013-07-11 02:43:54',1,'alfa','','','andreluiz90@ig.com.br',1,1,'2013-07-11 02:43:54');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_6340c63c` (`user_id`),
  KEY `auth_user_groups_5f412f9a` (`group_id`),
  CONSTRAINT `user_id_refs_id_40c41112` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `group_id_refs_id_274b862c` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_user_permissions_6340c63c` (`user_id`),
  KEY `auth_user_user_permissions_83d7f98b` (`permission_id`),
  CONSTRAINT `user_id_refs_id_4dc23c39` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `permission_id_refs_id_35d9ac25` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `user_id` int(11) NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_6340c63c` (`user_id`),
  KEY `django_admin_log_37ef4eb4` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_93d2d1f8` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `user_id_refs_id_c0d12874` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `app_label` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'permission','auth','permission'),(2,'group','auth','group'),(3,'user','auth','user'),(4,'log entry','admin','logentry'),(5,'content type','contenttypes','contenttype'),(6,'session','sessions','session'),(7,'site','sites','site'),(8,'programming language','algorithm','programminglanguage'),(9,'classification','algorithm','classification'),(10,'algorithm','algorithm','algorithm'),(11,'implementation','algorithm','implementation'),(12,'interest','algorithm','interest'),(13,'proeficiency scale','algorithm','proeficiencyscale'),(14,'programming language proeficiency scale','algorithm','programminglanguageproeficiencyscale'),(15,'classification proeficiency scale','algorithm','classificationproeficiencyscale'),(16,'question','algorithm','question'),(17,'question answer','algorithm','questionanswer'),(18,'user question','algorithm','userquestion'),(19,'user question answer','algorithm','userquestionanswer'),(20,'implementation question','algorithm','implementationquestion'),(21,'implementation question answer','algorithm','implementationquestionanswer');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_b7b81f0c` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_site`
--

LOCK TABLES `django_site` WRITE;
/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
INSERT INTO `django_site` VALUES (1,'example.com','example.com');
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-07-11 10:39:41
