-- MySQL dump 10.14  Distrib 5.5.31-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: AlgPedia
-- ------------------------------------------------------
-- Server version	5.5.31-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `algorithm_algorithm`
--

DROP TABLE IF EXISTS `algorithm_algorithm`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_algorithm` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `description` longtext NOT NULL,
  `classification_id` int(11) DEFAULT NULL,
  `uri` varchar(200) NOT NULL,
  `visible` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_algorithm_d3dde821` (`classification_id`),
  CONSTRAINT `classification_id_refs_id_61331f30` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_algorithm`
--

LOCK TABLES `algorithm_algorithm` WRITE;
/*!40000 ALTER TABLE `algorithm_algorithm` DISABLE KEYS */;
INSERT INTO `algorithm_algorithm` VALUES (1,'Fifo\n','FIFO is an acronym for First In, First Out, which is an abstraction related to ways of organizing and manipulation of data relative to time and prioritization. This expression describes the principle of a queue processing technique or servicing conflicting demands by ordering process by first-come, first-served (FCFS) behaviour: where the persons leave the queue in the order they arrive, or waiting one\'s turn at a traffic control signal.',5,'http://dbpedia.org/resource/FIFO',1),(2,'Cycle Detection\n','In computer science, cycle detection is the algorithmic problem of finding a cycle in a sequence of iterated function values.',14,'http://dbpedia.org/resource/Cycle_detection',1),(3,'Multiply With Carry\n','In computer science, multiply-with-carry (MWC) is a method invented by George Marsaglia for generating sequences of random integers based on an initial set from two to many thousands of randomly chosen seed values. The main advantages of the MWC method are that it invokes simple computer integer arithmetic and leads to very fast generation of sequences of random numbers with immense periods, ranging from around 260 to 22000000.',18,'http://dbpedia.org/resource/Multiply-with-carry',1),(4,'Random Password Generator\n','A random password generator is software program or hardware device that takes input from a random or pseudo-random number generator and automatically generates a password. Random passwords can be generated manually, using simple sources of randomness such as dice or coins, or they can be generated using a computer.',16,'http://dbpedia.org/resource/Random_password_generator',1),(5,'Left Recursion\n','In the formal language theory of computer science, left recursion is a special case of recursion.',2,'http://dbpedia.org/resource/Left_recursion',1),(6,'Longitudinal Redundancy Check\n','In telecommunication, a longitudinal redundancy check (LRC) or horizontal redundancy check is a form of redundancy check that is applied independently to each of a parallel group of bit streams. The data must be divided into transmission blocks, to which the additional check data is added.',4,'http://dbpedia.org/resource/Longitudinal_redundancy_check',1),(7,'Fast Inverse Square Root\n','Fast inverse square root (sometimes referred to as Fast InvSqrt() or by the hexadecimal constant 0x5f3759df) is a method of calculating x−½, the reciprocal (or multiplicative inverse) of a square root for a 32-bit floating point number in IEEE 754 floating point format. The algorithm was probably developed at Silicon Graphics in the early 1990s, and an implementation appeared in 1999 in the Quake III Arena source code, but the method did not appear on public forums such as Usenet until 2002 or 2003.[1] At the time, the primary advantage of the algorithm came from avoiding computationally expensive floating point operations in favor of integer operations. Inverse square roots are used to compute angles of incidence and reflection for lighting and shading in computer graphics.',8,'http://dbpedia.org/resource/Fast_inverse_square_root',1),(8,'Luhn Algorithm\n','The Luhn algorithm or Luhn formula, also known as the \"modulus 10\" or \"mod 10\" algorithm, is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers in US and Canadian Social Insurance Numbers. It was created by IBM scientist Hans Peter Luhn and described in U.S. Patent No. 2,950,048, filed on January 6, 1954, and granted on August 23, 1960.',4,'http://dbpedia.org/resource/Luhn_algorithm',1),(9,'Recursion (computer Science)\n','Recursion in computer science is a method where the solution to a problem depends on solutions to smaller instances of the same problem.[1] The approach can be applied to many types of problems, and recursion is one of the central ideas of computer science.[2]',2,'http://dbpedia.org/resource/Recursion_(computer_science)',1),(10,'Minimax\n','Minimax (sometimes minmax) is a decision rule used in decision theory, game theory, statistics and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario. Alternatively, it can be thought of as maximizing the minimum gain (maximin). Originally formulated for two-player zero-sum game theory, covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision making in the presence of uncertainty.',13,'http://dbpedia.org/resource/Minimax',1),(11,'Counting Sort\n','In computer science, counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence. Its running time is linear in the number of items and the difference between the maximum and minimum key values, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can handle larger keys more efficiently.[1][2][3]',7,'http://dbpedia.org/resource/Counting_sort',1),(12,'Gradient Descent\n','Gradient descent is a first-order optimization algorithm. To find a local minimum of a function using gradient descent, one takes steps proportional to the negative of the gradient (or of the approximate gradient) of the function at the current point. If instead one takes steps proportional to the positive of the gradient, one approaches a local maximum of that function; the procedure is then known as gradient ascent.',13,'http://dbpedia.org/resource/Gradient_descent',1),(13,'Insertion Sort\n','Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:',7,'http://dbpedia.org/resource/Insertion_sort',1),(14,'Merge Sort\n','O(n log n) typical,',7,'http://dbpedia.org/resource/Merge_sort',1),(15,'Quicksort\n','Quicksort, or partition-exchange sort, is a sorting algorithm developed by Tony Hoare that, on average, makes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Quicksort is often faster in practice than other O(n log n) algorithms.[1] Additionally, quicksort\'s sequential and localized memory references work well with a cache. Quicksort is a comparison sort and, in efficient implementations, is not a stable sort. Quicksort can be implemented with an in-place partitioning algorithm, so the entire sort can be done with only O(log n) additional space used by the stack during the recursion.[2]',7,'http://dbpedia.org/resource/Quicksort',1),(16,'Radix Sort\n','In computer science, radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by the individual digits which share the same significant position and value. A positional notation is required, but because integers can represent strings of characters (e.g., names or dates) and specially formatted floating point numbers, radix sort is not limited to integers. Radix sort dates back as far as 1887 to the work of Herman Hollerith on tabulating machines.[1]',7,'http://dbpedia.org/resource/Radix_sort',1),(17,'Recursion\n','Recursion is the process of repeating items in a self-similar way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, in which it refers to a method of defining functions in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.',2,'http://dbpedia.org/resource/Recursion',1),(18,'Selection Sort\n','In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.',7,'http://dbpedia.org/resource/Selection_sort',1),(19,'Mutual Recursion\n','In mathematics and computer science, mutual recursion is a form of recursion where two mathematical or computational objects, such as functions or data types, are defined in terms of each other.[1] Mutual recursion is very common in functional programming and in some problem domains, such as recursive descent parsers, where the data types are naturally mutually recursive, but is uncommon in other domains.',2,'http://dbpedia.org/resource/Mutual_recursion',1),(20,'Shellsort\n','Shellsort, also known as Shell sort or Shell\'s method, is an in-place comparison sort. It generalizes an exchanging sort, such as insertion or bubble sort, by starting the comparison and exchange of elements with elements that are far apart before finishing with neighboring elements. Starting with far apart elements can move some out-of-place elements into position faster than a simple nearest neighbor exchange. Donald Shell published the first version of this sort in 1959.[1][2] The running time of Shellsort is heavily dependent on the gap sequence it uses. For many practical variants, determining their time complexity remains an open problem.',7,'http://dbpedia.org/resource/Shellsort',1),(21,'Polymorphic Recursion\n','In computer science, polymorphic recursion (also referred to as Milner–Mycroft typability or the Milner–Mycroft calculus) refers to a recursive parametrically polymorph function where the type parameter changes with each recursive invocation made instead of staying constant. Type inference for polymorphic recursion is equivalent to semi-unification and thefore undecidable and requires the use of a semi-algorithm or programmer supplied type annotations.[1]',2,'http://dbpedia.org/resource/Polymorphic_recursion',1),(22,'Newton\'s Method\n','In numerical analysis, Newton\'s method (also known as the Newton–Raphson method), named after Isaac Newton and Joseph Raphson, is a method for finding successively better approximations to the roots (or zeroes) of a real-valued function.',13,'http://dbpedia.org/resource/Newton\'s_method',1),(23,'Newton\'s Method\n','In numerical analysis, Newton\'s method (also known as the Newton–Raphson method), named after Isaac Newton and Joseph Raphson, is a method for finding successively better approximations to the roots (or zeroes) of a real-valued function.',8,'http://dbpedia.org/resource/Newton\'s_method',1),(24,'Fold (higher Order Function)\n','In functional programming, fold – also known variously as reduce, accumulate, aggregate, compress, or inject – refers to a family of higher-order functions that analyze a recursive data structure and recombine through use of a given combining operation the results of recursively processing its constituent parts, building up a return value. Typically, a fold is presented with a combining function, a top node of a data structure, and possibly some default values to be used under certain conditions. The fold then proceeds to combine elements of the data structure\'s hierarchy, using the function in a systematic way.',2,'http://dbpedia.org/resource/Fold_(higher-order_function)',1),(25,'Golden Section Search\n','The golden section search is a technique for finding the extremum (minimum or maximum) of a strictly unimodal function by successively narrowing the range of values inside which the extremum is known to exist. The technique derives its name from the fact that the algorithm maintains the function values for triples of points whose distances form a golden ratio. The algorithm is the limit of Fibonacci search (also described below) for a large number of function evaluations. Fibonacci search and Golden section search were discovered by Kiefer (1953). (see also Avriel and Wilde (1966)).',13,'http://dbpedia.org/resource/Golden_section_search',1);
/*!40000 ALTER TABLE `algorithm_algorithm` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_classification`
--

DROP TABLE IF EXISTS `algorithm_classification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_classification` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(35) NOT NULL,
  `uri` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_classification`
--

LOCK TABLES `algorithm_classification` WRITE;
/*!40000 ALTER TABLE `algorithm_classification` DISABLE KEYS */;
INSERT INTO `algorithm_classification` VALUES (1,'Digital Signal Processing','http://dbpedia.org/resource/Category:Digital_signal_processing'),(2,'Recursion','http://dbpedia.org/resource/Category:Recursion'),(3,'Data Mining','http://dbpedia.org/resource/Category:Data_mining'),(4,'Error Detection And Correction','http://dbpedia.org/resource/Category:Error_detection_and_correction'),(5,'Scheduling Algorithms','http://dbpedia.org/resource/Category:Scheduling_algorithms'),(6,'Bioinformatics Algorithms','http://dbpedia.org/resource/Category:Bioinformatics_algorithms'),(7,'Sorting Algorithms','http://dbpedia.org/resource/Category:Sorting_algorithms'),(8,'Root-Finding Algorithms','http://dbpedia.org/resource/Category:Root-finding_algorithms'),(9,'Data Clustering Algorithms','http://dbpedia.org/resource/Category:Data_clustering_algorithms'),(10,'Geometric Algorithms','http://dbpedia.org/resource/Category:Geometric_algorithms'),(11,'Algorithms On Strings','http://dbpedia.org/resource/Category:Algorithms_on_strings'),(12,'Machine Learning Algorithms','http://dbpedia.org/resource/Category:Machine_learning_algorithms'),(13,'Optimization Algorithms And Methods','http://dbpedia.org/resource/Category:Optimization_algorithms_and_methods'),(14,'Combinatorial Algorithms','http://dbpedia.org/resource/Category:Combinatorial_algorithms'),(15,'Heuristic Algorithms','http://dbpedia.org/resource/Category:Heuristic_algorithms'),(16,'Cryptographic Algorithms','http://dbpedia.org/resource/Category:Cryptographic_algorithms'),(17,'Computational Number Theory','http://dbpedia.org/resource/Category:Computational_number_theory'),(18,'Pseudorandom Number Generators','http://dbpedia.org/resource/Category:Pseudorandom_number_generators'),(19,'Database Algorithms','http://dbpedia.org/resource/Category:Database_algorithms'),(20,'Memory Management Algorithms','http://dbpedia.org/resource/Category:Memory_management_algorithms'),(21,'Computational Statistics','http://dbpedia.org/resource/Category:Computational_statistics'),(22,'Computational Group Theory','http://dbpedia.org/resource/Category:Computational_group_theory'),(23,'Randomized Algorithms','http://dbpedia.org/resource/Category:Randomized_algorithms'),(24,'Approximation Algorithms','http://dbpedia.org/resource/Category:Approximation_algorithms'),(25,'Stochastic Algorithms','http://dbpedia.org/resource/Category:Stochastic_algorithms'),(26,'Evolutionary Algorithms','http://dbpedia.org/resource/Category:Evolutionary_algorithms');
/*!40000 ALTER TABLE `algorithm_classification` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_classificationproeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_classificationproeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_classificationproeficiencyscale` (
  `proeficiencyscale_ptr_id` int(11) NOT NULL,
  `classification_id` int(11) NOT NULL,
  PRIMARY KEY (`proeficiencyscale_ptr_id`),
  KEY `algorithm_classificationproeficiencyscale_d3dde821` (`classification_id`),
  CONSTRAINT `classification_id_refs_id_c9b52535` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`),
  CONSTRAINT `proeficiencyscale_ptr_id_refs_id_726ec173` FOREIGN KEY (`proeficiencyscale_ptr_id`) REFERENCES `algorithm_proeficiencyscale` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_classificationproeficiencyscale`
--

LOCK TABLES `algorithm_classificationproeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_classificationproeficiencyscale` DISABLE KEYS */;
INSERT INTO `algorithm_classificationproeficiencyscale` VALUES (16,22);
/*!40000 ALTER TABLE `algorithm_classificationproeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementation`
--

DROP TABLE IF EXISTS `algorithm_implementation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `algorithm_id` int(11) NOT NULL,
  `code` longtext NOT NULL,
  `programming_language_id` int(11) NOT NULL,
  `visible` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_implementation_5b72ffe3` (`algorithm_id`),
  KEY `algorithm_implementation_4a49299f` (`programming_language_id`),
  CONSTRAINT `algorithm_id_refs_id_18222f3a` FOREIGN KEY (`algorithm_id`) REFERENCES `algorithm_algorithm` (`id`),
  CONSTRAINT `programming_language_id_refs_id_5363fe85` FOREIGN KEY (`programming_language_id`) REFERENCES `algorithm_programminglanguage` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementation`
--

LOCK TABLES `algorithm_implementation` WRITE;
/*!40000 ALTER TABLE `algorithm_implementation` DISABLE KEYS */;
INSERT INTO `algorithm_implementation` VALUES (1,1,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> fifo_node \n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> fifo_node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>\n  value_type value<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n \nclass fifo\n<span class=\"br0\">{</span>\n  fifo_node <span class=\"sy0\">*</span>front<span class=\"sy0\">;</span>\n  fifo_node <span class=\"sy0\">*</span>back<span class=\"sy0\">;</span>\n \n  fifo_node <span class=\"sy0\">*</span>dequeue<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    fifo_node <span class=\"sy0\">*</span>tmp <span class=\"sy0\">=</span> front<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> front <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span>\n      front <span class=\"sy0\">=</span> front<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n      back <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n    <span class=\"kw1\">return</span> tmp<span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n \n  queue<span class=\"br0\">(</span>value<span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    fifo_node <span class=\"sy0\">*</span>tempNode <span class=\"sy0\">=</span> new fifo_node<span class=\"sy0\">;</span>\n    tempNode<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> front <span class=\"sy0\">==</span> NULL <span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      front <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n      back <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span>\n    <span class=\"br0\">{</span>\n      back<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n      back <span class=\"sy0\">=</span> tempNode<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1),(2,2,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> floyd<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x0<span class=\"br0\">)</span>:\n    <span class=\"co1\"># The main phase of the algorithm, finding a repetition x_mu = x_2mu</span>\n    <span class=\"co1\"># The hare moves twice as quickly as the tortoise</span>\n    <span class=\"co1\"># Eventually they will both be inside the cycle </span>\n    <span class=\"co1\"># and the distance between them will increase by 1 until</span>\n    <span class=\"co1\"># it is divisible by the length of the cycle.</span>\n    tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span> <span class=\"co1\"># f(x0) is the element/node next to x0.</span>\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n    <span class=\"co1\"># at this point the position of tortoise which is the distance between </span>\n    <span class=\"co1\"># hare and tortoise is divisible by the length of the cycle. </span>\n    <span class=\"co1\"># so hare moving in circle and tortoise (set to x0) moving towards </span>\n    <span class=\"co1\"># the circle will intersect at the beginning of the circle.</span>\n \n    <span class=\"co1\"># Find the position of the first repetition of length mu</span>\n    <span class=\"co1\"># The hare and tortoise move at the same speeds</span>\n    mu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    tortoise <span class=\"sy0\">=</span> x0\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        mu +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># Find the length of the shortest cycle starting from x_mu</span>\n    <span class=\"co1\"># The hare moves while the tortoise stays still</span>\n    lam <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        lam +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"kw1\">return</span> lam<span class=\"sy0\">,</span> mu\n</pre>',2,1),(3,2,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> brent<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x0<span class=\"br0\">)</span>:\n    <span class=\"co1\"># main phase: search successive powers of two</span>\n    power <span class=\"sy0\">=</span> lam <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n    tortoise <span class=\"sy0\">=</span> x0\n    hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>  <span class=\"co1\"># f(x0) is the element/node next to x0.</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        <span class=\"kw1\">if</span> power <span class=\"sy0\">==</span> lam:  <span class=\"co1\"># time to start a new power of two?</span>\n            tortoise <span class=\"sy0\">=</span> hare\n            power *<span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\n            lam <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        lam +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"co1\"># Find the position of the first repetition of length lambda</span>\n    mu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    tortoise <span class=\"sy0\">=</span> hare <span class=\"sy0\">=</span> x0\n    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>lam<span class=\"br0\">)</span>:\n    <span class=\"co1\"># range(lam) produces a list with the values 0, 1, ... , lam-1</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n    <span class=\"kw1\">while</span> tortoise <span class=\"sy0\">!=</span> hare:\n        tortoise <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>tortoise<span class=\"br0\">)</span>\n        hare <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>hare<span class=\"br0\">)</span>\n        mu +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\n \n    <span class=\"kw1\">return</span> lam<span class=\"sy0\">,</span> mu\n</pre>',2,1),(4,3,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdint.h&gt;</span>\n \n<span class=\"co2\">#define PHI 0x9e3779b9</span>\n \n<span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> Q<span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">362436</span><span class=\"sy0\">;</span>\n \n<span class=\"kw4\">void</span> init_rand<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> x<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n \n        Q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span>\n        Q<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> PHI<span class=\"sy0\">;</span>\n        Q<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> PHI <span class=\"sy0\">+</span> PHI<span class=\"sy0\">;</span>\n \n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4096</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n                Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> Q<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> PHI <span class=\"sy0\">^</span> i<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">uint32_t</span> rand_cmwc<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">uint64_t</span> t<span class=\"sy0\">,</span> a <span class=\"sy0\">=</span> 18782LL<span class=\"sy0\">;</span>\n        <span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">4095</span><span class=\"sy0\">;</span>\n        <span class=\"kw4\">uint32_t</span> x<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu12\">0xfffffffe</span><span class=\"sy0\">;</span>\n        i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">4095</span><span class=\"sy0\">;</span>\n        t <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span>\n        c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        x <span class=\"sy0\">=</span> t <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                x<span class=\"sy0\">++;</span>\n                c<span class=\"sy0\">++;</span>\n        <span class=\"br0\">}</span>\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Q<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(5,4,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;time.h&gt;</span>\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#include &lt;stdlib.h&gt;</span>\n \n<span class=\"kw4\">int</span>\nmain<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"coMULTI\">/* Length of the password */</span>\n    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">short</span> <span class=\"kw4\">int</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* Seed number for rand() */</span>\n    <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> getpid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    <span class=\"coMULTI\">/* ASCII characters 33 to 126 */</span>\n    <span class=\"kw1\">while</span><span class=\"br0\">(</span>length<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw3\">putchar</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">94</span> <span class=\"sy0\">+</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(6,4,'<pre class=\"de1\">\n<span class=\"kw2\">function</span> pass_gen<span class=\"br0\">(</span><span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"re0\">$pass</span> <span class=\"sy0\">=</span> <span class=\"st_h\">\'\'</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$length</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"re0\">$pass</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">mt_rand</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">126</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">return</span> <span class=\"re0\">$pass</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',3,1),(7,4,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> mkpw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">head</span> <span class=\"sy0\">/</span>dev<span class=\"sy0\">/</span>urandom <span class=\"sy0\">|</span> uuencode <span class=\"re5\">-m</span> - <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"re5\">-n</span> 2p <span class=\"sy0\">|</span> <span class=\"kw2\">cut</span> <span class=\"re5\">-c1-</span><span class=\"co1\">${1:-8}</span>; <span class=\"br0\">}</span>\n</pre>',4,1),(8,4,'<pre class=\"de1\">\n<span class=\"co1\">#!/usr/bin/python</span>\n<span class=\"kw1\">import</span> <span class=\"kw3\">random</span><span class=\"sy0\">,</span> <span class=\"kw3\">string</span>\nmyrg <span class=\"sy0\">=</span> <span class=\"kw3\">random</span>.<span class=\"me1\">SystemRandom</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\nlength <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\n<span class=\"co1\"># If you want non-English characters, remove the [0:52]</span>\nalphabet <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">letters</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>:<span class=\"nu0\">52</span><span class=\"br0\">]</span> + <span class=\"kw3\">string</span>.<span class=\"me1\">digits</span>\npw <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>myrg.<span class=\"me1\">choice</span><span class=\"br0\">(</span>alphabet<span class=\"br0\">)</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>length<span class=\"br0\">)</span><span class=\"br0\">)</span>\n<span class=\"kw1\">print</span> pw\n</pre>',2,1),(9,5,'<pre class=\"de1\">\nfunction Expr()\n{  \n    Expr();  match(\'+\');  Term();\n}\n</pre>',5,1),(10,6,'<pre class=\"de1\">\n        <span class=\"co1\">/// &lt;summary&gt;</span>\n        <span class=\"co1\">/// Longitudinal Redundancy Check (LRC) calculator for a byte array. </span>\n        <span class=\"co1\">/// This was proved from the LRC Logic of Edwards TurboPump Controller SCU-1600.</span>\n        <span class=\"co1\">/// ex) DATA (hex 6 bytes): 02 30 30 31 23 03</span>\n        <span class=\"co1\">///     LRC  (hex 1 byte ): 47        </span>\n        <span class=\"co1\">/// &lt;/summary&gt;</span>\n \n        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            <span class=\"kw4\">byte</span> LRC <span class=\"sy0\">=</span> 0x00<span class=\"sy0\">;</span>\n            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bytes<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n                LRC <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>LRC <span class=\"sy0\">+</span> bytes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span> \n            <span class=\"br0\">}</span>\n            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>LRC <span class=\"sy0\">^</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n</pre>',6,1),(11,6,'<pre class=\"de1\">\n    <span class=\"co3\">/**\n     * Calculates the checksum in compliance with the ISO 1155 standard\n     * More info: http://en.wikipedia.org/wiki/Longitudinal_redundancy_check\n     * @param data array to calculate checksum for\n     * @return returns the calculated checksum in byte format\n     */</span>\n    <span class=\"kw1\">public</span> <span class=\"kw4\">byte</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw4\">byte</span> checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> data.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            checksum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>checksum <span class=\"sy0\">+</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n        checksum <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>checksum <span class=\"sy0\">^</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">return</span> checksum<span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n</pre>',7,1),(12,6,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> calculateLRC<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>buffer<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> length<span class=\"br0\">)</span><span class=\"br0\">{</span>\n <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>\n <span class=\"kw1\">while</span><span class=\"br0\">(</span>length<span class=\"sy0\">--</span><span class=\"br0\">)</span> checksum <span class=\"sy0\">-=</span> <span class=\"sy0\">*</span>buffer<span class=\"sy0\">++;</span>\n <span class=\"kw1\">return</span> checksum<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(13,7,'<pre class=\"de1\">\n<span class=\"kw4\">float</span> Q_rsqrt<span class=\"br0\">(</span> <span class=\"kw4\">float</span> number <span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n        <span class=\"kw4\">long</span> i<span class=\"sy0\">;</span>\n        <span class=\"kw4\">float</span> x2<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span>\n        <span class=\"kw4\">const</span> <span class=\"kw4\">float</span> threehalfs <span class=\"sy0\">=</span> <span class=\"nu17\">1.5F</span><span class=\"sy0\">;</span>\n \n        x2 <span class=\"sy0\">=</span> number <span class=\"sy0\">*</span> <span class=\"nu17\">0.5F</span><span class=\"sy0\">;</span>\n        y  <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span>\n        i  <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"kw4\">long</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>y<span class=\"sy0\">;</span>                       <span class=\"co1\">// evil floating point bit level hacking</span>\n        i  <span class=\"sy0\">=</span> <span class=\"nu12\">0x5f3759df</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"co1\">// what the fuck?</span>\n        y  <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"kw4\">float</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>i<span class=\"sy0\">;</span>\n        y  <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> <span class=\"br0\">(</span> threehalfs <span class=\"sy0\">-</span> <span class=\"br0\">(</span> x2 <span class=\"sy0\">*</span> y <span class=\"sy0\">*</span> y <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// 1st iteration</span>\n<span class=\"co1\">//      y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span>\n \n        <span class=\"kw1\">return</span> y<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(14,8,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">def</span> digits_of<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:\n        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span>\n    digits <span class=\"sy0\">=</span> digits_of<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>\n    odd_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">1</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    even_digits <span class=\"sy0\">=</span> digits<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">2</span><span class=\"br0\">]</span>\n    checksum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n    checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>odd_digits<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> even_digits:\n        checksum +<span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>digits_of<span class=\"br0\">(</span>d*<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> checksum % <span class=\"nu0\">10</span>\n \n<span class=\"kw1\">def</span> is_luhn_valid<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> luhn_checksum<span class=\"br0\">(</span>card_number<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>\n</pre>',2,1),(15,8,'<pre class=\"de1\">\n<span class=\"kw1\">def</span> calculate_luhn<span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span>:\n    check_digit <span class=\"sy0\">=</span> luhn_checksum<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>partial_card_number<span class=\"br0\">)</span> * <span class=\"nu0\">10</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> check_digit <span class=\"kw1\">if</span> check_digit <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">else</span> <span class=\"nu0\">10</span> - check_digit\n</pre>',2,1),(16,9,'<pre class=\"de1\">\n <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">::=</span> <span class=\"sy1\">&lt;</span><span class=\"re0\">number</span><span class=\"sy1\">&gt;</span>\n          <span class=\"sy4\">|</span> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> <span class=\"sy4\">*</span> <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span>\n          <span class=\"sy4\">|</span> <span class=\"br0\">(</span><span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span> + <span class=\"sy1\">&lt;</span><span class=\"re0\">expr</span><span class=\"sy1\">&gt;</span><span class=\"br0\">)</span>\n</pre>',8,1),(17,9,'<pre class=\"de1\">\n <span class=\"coMULTI\">/*\n  Call binary_search with proper initial conditions.\n \n  INPUT:\n    data is an array of integers SORTED in ASCENDING order,\n    toFind is the integer to search for,\n    count is the total number of elements in the array\n \n  OUTPUT:\n    result of binary_search\n \n */</span>\n <span class=\"kw4\">int</span> search<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> toFind<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> count<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n    <span class=\"co1\">//  Start = 0 (beginning index)</span>\n    <span class=\"co1\">//  End = count - 1 (top index)</span>\n    <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> count<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n <span class=\"br0\">}</span>\n \n <span class=\"coMULTI\">/*\n   Binary Search Algorithm.\n \n   INPUT:\n        data is a array of integers SORTED in ASCENDING order,\n        toFind is the integer to search for,\n        start is the minimum array index,\n        end is the maximum array index\n   OUTPUT:\n        position of the integer toFind within array data,\n        -1 if not found\n */</span>\n <span class=\"kw4\">int</span> binary_search<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>data<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> toFind<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> start<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> end<span class=\"br0\">)</span>\n <span class=\"br0\">{</span>\n    <span class=\"co1\">//Get the midpoint.</span>\n    <span class=\"kw4\">int</span> mid <span class=\"sy0\">=</span> start <span class=\"sy0\">+</span> <span class=\"br0\">(</span>end <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>   <span class=\"co1\">//Integer division</span>\n \n    <span class=\"co1\">//Stop condition.</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy0\">&gt;</span> end<span class=\"br0\">)</span>\n       <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">==</span> toFind<span class=\"br0\">)</span>        <span class=\"co1\">//Found?</span>\n       <span class=\"kw1\">return</span> mid<span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">[</span>mid<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> toFind<span class=\"br0\">)</span>         <span class=\"co1\">//Data is greater than toFind, search lower half</span>\n       <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> mid<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>                                 <span class=\"co1\">//Data is less than toFind, search upper half</span>\n       <span class=\"kw1\">return</span> binary_search<span class=\"br0\">(</span>data<span class=\"sy0\">,</span> toFind<span class=\"sy0\">,</span> mid<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> end<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n <span class=\"br0\">}</span>\n</pre>',1,1),(18,9,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> node\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> data<span class=\"sy0\">;</span>           <span class=\"co1\">// some integer data</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span>  <span class=\"co1\">// pointer to another struct node</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1),(19,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> list_print<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>list<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>list <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span>               <span class=\"co1\">// base case</span>\n    <span class=\"br0\">{</span>\n       <span class=\"kw3\">printf</span> <span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> list<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// print integer data followed by a space</span>\n       list_print <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span>next<span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// recursive call on the next node</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(20,9,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> node\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> data<span class=\"sy0\">;</span>            <span class=\"co1\">// some integer data</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>left<span class=\"sy0\">;</span>   <span class=\"co1\">// pointer to the left subtree</span>\n  <span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>right<span class=\"sy0\">;</span>  <span class=\"co1\">// point to the right subtree</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n</pre>',1,1),(21,9,'<pre class=\"de1\">\n<span class=\"co1\">// Test if tree_node contains i; return 1 if so, 0 if not.</span>\n<span class=\"kw4\">int</span> tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>  <span class=\"co1\">// base case</span>\n        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"kw1\">else</span>\n                <span class=\"kw1\">return</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(22,9,'<pre class=\"de1\">\n<span class=\"co1\">// Inorder traversal:</span>\n<span class=\"kw4\">void</span> tree_print<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span>                  <span class=\"co1\">// base case</span>\n                tree_print<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span>      <span class=\"co1\">// go left</span>\n                <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> tree_node<span class=\"sy0\">-&gt;</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// print the integer followed by a space</span>\n                tree_print<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// go right</span>\n        <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(23,9,'<pre class=\"de1\">\n<span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span>\n \n<span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FileSystem <span class=\"br0\">{</span>\n \n        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main <span class=\"br0\">(</span><span class=\"kw3\">String</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                traverse <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co3\">/**\n         * Obtains the filesystem roots\n         * Proceeds with the recurisve filesystem traversal\n         */</span>\n        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> traverse <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">File</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> fs <span class=\"sy0\">=</span> <span class=\"kw3\">File</span>.<span class=\"me1\">listRoots</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> fs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isDirectory</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">canRead</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                                rtraverse <span class=\"br0\">(</span>fs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"br0\">}</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n \n        <span class=\"co3\">/**\n         * Recursively traverse a given directory\n         *\n         * @param fd indicates the starting point of traversal\n         */</span>\n        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> rtraverse <span class=\"br0\">(</span><span class=\"kw3\">File</span> fd<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                <span class=\"kw3\">File</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> fss <span class=\"sy0\">=</span> fd.<span class=\"me1\">listFiles</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \n                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> fss.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                        <span class=\"kw3\">System</span>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span> <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isDirectory</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">canRead</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n                                rtraverse <span class=\"br0\">(</span>fss<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n                        <span class=\"br0\">}</span>\n                <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n</pre>',7,1),(24,9,'<pre class=\"de1\">\nbool tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>  <span class=\"co1\">// base case</span>\n    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">||</span>\n               tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(25,9,'<pre class=\"de1\">\n<span class=\"co1\">// Wrapper function to handle empty tree</span>\nbool tree_contains<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>  <span class=\"co1\">// empty tree</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> tree_contains_do<span class=\"br0\">(</span>tree_node<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// call auxiliary function</span>\n<span class=\"br0\">}</span>\n \n<span class=\"co1\">// Assumes tree_node != NULL</span>\nbool tree_contains_do<span class=\"br0\">(</span><span class=\"kw4\">struct</span> node <span class=\"sy0\">*</span>tree_node<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>data <span class=\"sy0\">==</span> i<span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>  <span class=\"co1\">// found</span>\n    <span class=\"kw1\">else</span>  <span class=\"co1\">// recurse</span>\n        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left  <span class=\"sy0\">&amp;&amp;</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span>  i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span>\n               <span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">&amp;&amp;</span> tree_contains<span class=\"br0\">(</span>tree_node<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(26,9,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> product <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// empty product is 1</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    product <span class=\"sy0\">*=</span> n<span class=\"sy0\">;</span>\n    <span class=\"sy0\">--</span>n<span class=\"sy0\">;</span>\n  <span class=\"br0\">}</span>\n  <span class=\"kw1\">return</span> product<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(27,9,'<pre class=\"de1\">\n<span class=\"co1\">//INPUT: Integers x, y such that x &gt;= y and y &gt; 0</span>\n<span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n     <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span>\n  <span class=\"kw1\">else</span>\n     <span class=\"kw1\">return</span> gcd<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> x <span class=\"sy0\">%</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(28,9,'<pre class=\"de1\">\n<span class=\"co1\">//INPUT: n is an Integer such that n &gt;= 0</span>\n<span class=\"kw4\">int</span> fact<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">else</span>\n      <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> fact<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(29,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> recursiveFunction<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\n      recursiveFunction<span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(30,9,'<pre class=\"de1\">\n<span class=\"kw4\">void</span> recursiveFunction<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>\n      recursiveFunction<span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n   <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(31,10,'<pre class=\"de1\">\n<span class=\"kw1\">function</span> minimax<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>depth<span class=\"br0\">)</span>\n   <span class=\"kw1\">if</span> depth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span>\n      <span class=\"co1\">-- positive values are good for the maximizing player</span>\n      <span class=\"co1\">-- negative values are good for the minimizing player</span>\n      <span class=\"kw1\">return</span> objective_value<span class=\"br0\">(</span>node<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n   <span class=\"co1\">-- maximizing player is (+1)</span>\n   <span class=\"co1\">-- minimizing player is (-1)</span>\n   <span class=\"kw1\">local</span> alpha <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>node<span class=\"sy0\">.</span>player <span class=\"sy0\">*</span> INFINITY\n \n   <span class=\"kw1\">local</span> child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span><span class=\"kw4\">nil</span><span class=\"br0\">)</span>\n   <span class=\"kw1\">while</span> child <span class=\"sy0\">~=</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">do</span>\n      <span class=\"kw1\">local</span> score <span class=\"sy0\">=</span> minimax<span class=\"br0\">(</span>child<span class=\"sy0\">,</span>depth<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\n      alpha <span class=\"sy0\">=</span> node<span class=\"sy0\">.</span>player<span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw3\">math.max</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw3\">math.min</span><span class=\"br0\">(</span>alpha<span class=\"sy0\">,</span>score<span class=\"br0\">)</span>\n      child <span class=\"sy0\">=</span> next_child<span class=\"br0\">(</span>node<span class=\"sy0\">,</span>child<span class=\"br0\">)</span>\n   <span class=\"kw1\">end</span>\n \n   <span class=\"kw1\">return</span> alpha\n<span class=\"kw1\">end</span>\n</pre>',9,1),(32,11,'<pre class=\"de1\">\n<span class=\"st0\">\'\'\' calculate histogram: \'\'\'</span>\n<span class=\"co1\"># allocate an array Count[0..k] ; THEN</span>\n<span class=\"co1\"># initialize each array cell to zero ; THEN</span>\n<span class=\"kw1\">for</span> each <span class=\"kw2\">input</span> item x:\n    increment Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span>\n \n<span class=\"st0\">\'\'\' calculate starting index for each key: \'\'\'</span>\ntotal <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> ... <span class=\"me1\">k</span>:\n    oldCount <span class=\"sy0\">=</span> Count<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n    Count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> total\n    total <span class=\"sy0\">=</span> total + oldCount\n \n<span class=\"st0\">\'\'\' copy inputs into output array in order: \'\'\'</span>\n<span class=\"co1\"># allocate an output array Output[0..n-1] ; THEN</span>\n<span class=\"kw1\">for</span> each <span class=\"kw2\">input</span> item x:\n    Output<span class=\"br0\">[</span>Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x\n    increment Count<span class=\"br0\">[</span>key<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span>\n<span class=\"kw1\">return</span> Output\n</pre>',2,1),(33,12,'<pre class=\"de1\">\n<span class=\"co1\"># From calculation, we expect that the local minimum occurs at x=9/4</span>\n \nx_old <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\nx_new <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"co1\"># The algorithm starts at x=6</span>\neps <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span> <span class=\"co1\"># step size</span>\nprecision <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span>\n \n<span class=\"kw1\">def</span> f_prime<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:\n    <span class=\"kw1\">return</span> <span class=\"nu0\">4</span> * x**<span class=\"nu0\">3</span> - <span class=\"nu0\">9</span> * x**<span class=\"nu0\">2</span>\n \n<span class=\"kw1\">while</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>x_new - x_old<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> precision:\n    x_old <span class=\"sy0\">=</span> x_new\n    x_new <span class=\"sy0\">=</span> x_old - eps * f_prime<span class=\"br0\">(</span>x_old<span class=\"br0\">)</span>\n<span class=\"kw1\">print</span> <span class=\"st0\">\"Local minimum occurs at \"</span><span class=\"sy0\">,</span> x_new\n</pre>',2,1),(34,13,'<pre class=\"de1\">\n <span class=\"co1\">// The values in A[i] are checked in-order, starting at the second one</span>\n <span class=\"kw1\">for</span> i ← <span class=\"nu0\">1</span> to i ← length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>\n   <span class=\"br0\">{</span>\n     <span class=\"co1\">// at the start of the iteration, A[0..i-1] are in sorted order</span>\n     <span class=\"co1\">// this iteration will insert A[i] into that sorted order</span>\n \n     <span class=\"co1\">// save A[i], the value that will be inserted into the array on this iteration</span>\n     valueToInsert ← A<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n     <span class=\"co1\">// now mark position i as the hole; A[i]=A[holePos] is now empty</span>\n     holePos ← i\n     <span class=\"co1\">// keep moving the hole down until the valueToInsert is larger than </span>\n     <span class=\"co1\">// what\'s just below the hole or the hole has reached the beginning of the array</span>\n     <span class=\"kw1\">while</span> holePos <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> and valueToInsert <span class=\"sy0\">&lt;</span> A<span class=\"br0\">[</span>holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\n       <span class=\"br0\">{</span> <span class=\"co1\">//value to insert doesn\'t belong where the hole currently is, so shift </span>\n         A<span class=\"br0\">[</span>holePos<span class=\"br0\">]</span> ← A<span class=\"br0\">[</span>holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">//shift the larger value up</span>\n         holePos ← holePos <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>       <span class=\"co1\">//move the hole position down</span>\n       <span class=\"br0\">}</span>\n     <span class=\"co1\">// hole is in the right position, so put valueToInsert into the hole</span>\n     A<span class=\"br0\">[</span>holePos<span class=\"br0\">]</span> ← valueToInsert\n     <span class=\"co1\">// A[0..i] are now in sorted order</span>\n   <span class=\"br0\">}</span>\n</pre>',1,1),(35,13,'<pre class=\"de1\">\n<span class=\"kw4\">struct</span> LIST\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pNext<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span>           iValue<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span><span class=\"sy0\">;</span>\n \n<span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> SortList<span class=\"br0\">(</span><span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pList<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"coMULTI\">/* build up the sorted array from the empty list */</span>\n  <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span> pSorted <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* take items off the input list one by one until empty */</span>\n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pList <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* remember the head */</span>\n      <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">*</span>   pHead  <span class=\"sy0\">=</span> pList<span class=\"sy0\">;</span>\n      <span class=\"coMULTI\">/* trailing pointer for efficient splice */</span>\n      <span class=\"kw4\">struct</span> LIST <span class=\"sy0\">**</span> ppTrail <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>pSorted<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* pop head off list */</span>\n      pList <span class=\"sy0\">=</span> pList<span class=\"sy0\">-&gt;</span>pNext<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* splice head into sorted list at proper place */</span>\n      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>TRUE<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* does head belong here? */</span>\n          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> pHead<span class=\"sy0\">-&gt;</span>iValue <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>iValue<span class=\"br0\">)</span>\n            <span class=\"br0\">{</span>\n              <span class=\"coMULTI\">/* yes */</span>\n              pHead<span class=\"sy0\">-&gt;</span>pNext <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ppTrail<span class=\"sy0\">;</span>\n              <span class=\"sy0\">*</span>ppTrail <span class=\"sy0\">=</span> pHead<span class=\"sy0\">;</span>\n              <span class=\"kw2\">break</span><span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n          <span class=\"kw1\">else</span>\n            <span class=\"br0\">{</span>\n              <span class=\"coMULTI\">/* no - continue down the list */</span>\n              ppTrail <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>ppTrail<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>pNext<span class=\"sy0\">;</span>\n            <span class=\"br0\">}</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">return</span> pSorted<span class=\"sy0\">;</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(36,14,'<pre class=\"de1\">\n<span class=\"coMULTI\">/* array A[] has the items to sort; array B[] is a work array */</span>\nBottomUpSort<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> array A<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> array B<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> width<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* Each 1-element run in A is already \"sorted\". */</span>\n \n  <span class=\"coMULTI\">/* Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted. */</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>width <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> width <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> width<span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span>\n \n      <span class=\"coMULTI\">/* Array A is full of runs of length width. */</span>\n      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> width<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          <span class=\"coMULTI\">/* Merge two runs: A[i:i+width-1] and A[i+width:i+2*width-1] to B[] */</span>\n          <span class=\"coMULTI\">/* or copy A[i:n-1] to B[] ( if(i+width &gt;= n) ) */</span>\n          BottomUpMerge<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> min<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>width<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> min<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>width<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n \n      <span class=\"coMULTI\">/* Now work array B is full of runs of length 2*width. */</span>\n      <span class=\"coMULTI\">/* Copy array B to array A for next iteration. */</span>\n      <span class=\"coMULTI\">/* A more efficient implementation would swap the roles of A and B */</span>\n      CopyArray<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"coMULTI\">/* Now array A is full of runs of length 2*width. */</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \nBottomUpMerge<span class=\"br0\">(</span>array A<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iLeft<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iRight<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> iEnd<span class=\"sy0\">,</span> array B<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i0 <span class=\"sy0\">=</span> iLeft<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> i1 <span class=\"sy0\">=</span> iRight<span class=\"sy0\">;</span>\n  <span class=\"kw4\">int</span> j<span class=\"sy0\">;</span>\n \n  <span class=\"coMULTI\">/* While there are elements in the left or right lists */</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> iLeft<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> iEnd<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n      <span class=\"coMULTI\">/* If left list head exists and is &lt;= existing right list head */</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i0 <span class=\"sy0\">&lt;</span> iRight <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>i1 <span class=\"sy0\">&gt;=</span> iEnd <span class=\"sy0\">||</span> A<span class=\"br0\">[</span>i0<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> A<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n          B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i0<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n          i0 <span class=\"sy0\">=</span> i0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n      <span class=\"kw1\">else</span>\n        <span class=\"br0\">{</span>\n          B<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>i1<span class=\"br0\">]</span><span class=\"sy0\">;</span>\n          i1 <span class=\"sy0\">=</span> i1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(37,15,'<pre class=\"de1\">\n  <span class=\"kw1\">function</span> quicksort<span class=\"br0\">(</span><span class=\"st0\">\'array\'</span><span class=\"br0\">)</span>\n      <span class=\"kw1\">if</span> length<span class=\"br0\">(</span><span class=\"st0\">\'array\'</span><span class=\"br0\">)</span> ≤ <span class=\"nu0\">1</span>\n          <span class=\"kw1\">return</span> <span class=\"st0\">\'array\'</span>  <span class=\"co1\">// an array of zero or one elements is already sorted</span>\n      select and remove a pivot element <span class=\"st0\">\'pivot\'</span> from <span class=\"st0\">\'array\'</span>\n      create empty lists <span class=\"st0\">\'less\'</span> and <span class=\"st0\">\'greater\'</span>\n      <span class=\"kw1\">for</span> each <span class=\"st0\">\'x\'</span> <span class=\"kw1\">in</span> <span class=\"st0\">\'array\'</span>\n          <span class=\"kw1\">if</span> <span class=\"st0\">\'x\'</span> ≤ <span class=\"st0\">\'pivot\'</span> then append <span class=\"st0\">\'x\'</span> to <span class=\"st0\">\'less\'</span>\n          <span class=\"kw1\">else</span> append <span class=\"st0\">\'x\'</span> to <span class=\"st0\">\'greater\'</span>\n      <span class=\"kw1\">return</span> concatenate<span class=\"br0\">(</span>quicksort<span class=\"br0\">(</span><span class=\"st0\">\'less\'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> list<span class=\"br0\">(</span><span class=\"st0\">\'pivot\'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> quicksort<span class=\"br0\">(</span><span class=\"st0\">\'greater\'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// two recursive calls</span>\n</pre>',10,1),(38,15,'<pre class=\"de1\">\n   <span class=\"co1\">// left is the index of the leftmost element of the subarray</span>\n   <span class=\"co1\">// right is the index of the rightmost element of the subarray (inclusive)</span>\n   <span class=\"co1\">//   number of elements in subarray = right-left+1</span>\n   <span class=\"kw1\">function</span> partition<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> pivotIndex<span class=\"br0\">)</span>\n      pivotValue <span class=\"sy0\">:=</span> array<span class=\"br0\">[</span>pivotIndex<span class=\"br0\">]</span>\n      swap array<span class=\"br0\">[</span>pivotIndex<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>right<span class=\"br0\">]</span>  <span class=\"co1\">// Move pivot to end</span>\n      storeIndex <span class=\"sy0\">:=</span> left\n      <span class=\"kw1\">for</span> i from left to right <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>  <span class=\"co1\">// left ≤ i &lt; right</span>\n          <span class=\"kw1\">if</span> array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> pivotValue\n              swap array<span class=\"br0\">[</span>i<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>storeIndex<span class=\"br0\">]</span>\n              storeIndex <span class=\"sy0\">:=</span> storeIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\n      swap array<span class=\"br0\">[</span>storeIndex<span class=\"br0\">]</span> and array<span class=\"br0\">[</span>right<span class=\"br0\">]</span>  <span class=\"co1\">// Move pivot to its final place</span>\n      <span class=\"kw1\">return</span> storeIndex\n</pre>',10,1),(39,15,'<pre class=\"de1\">\n  <span class=\"kw1\">function</span> quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span>\n \n      <span class=\"co1\">// If the list has 2 or more items</span>\n      <span class=\"kw1\">if</span> left <span class=\"sy0\">&lt;</span> right\n \n          <span class=\"co1\">// See \"Choice of pivot\" section below for possible choices</span>\n          choose any pivotIndex such that left ≤ pivotIndex ≤ right\n \n          <span class=\"co1\">// Get lists of bigger and smaller items and final position of pivot</span>\n          pivotNewIndex <span class=\"sy0\">:=</span> partition<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"sy0\">,</span> pivotIndex<span class=\"br0\">)</span>\n \n          <span class=\"co1\">// Recursively sort elements smaller than the pivot</span>\n          quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> pivotNewIndex <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n \n          <span class=\"co1\">// Recursively sort elements at least as big as the pivot</span>\n          quicksort<span class=\"br0\">(</span>array<span class=\"sy0\">,</span> pivotNewIndex <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> right<span class=\"br0\">)</span>\n</pre>',10,1),(40,16,'<pre class=\"de1\">\n<span class=\"co2\">#include &lt;stdio.h&gt;</span>\n<span class=\"co2\">#define MAX 5</span>\n<span class=\"co2\">#define SHOWPASS</span>\n<span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>a, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\t</span>\"</span>, a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n \n<span class=\"kw4\">void</span> radixsort<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy2\">*</span>a, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> i, b<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span>, m <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw3\">exp</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> m<span class=\"br0\">)</span>\n      m <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n  <span class=\"br0\">}</span>\n \n  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>m <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n  <span class=\"br0\">{</span>\n    <span class=\"kw4\">int</span> bucket<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>\n    <span class=\"br0\">{</span>  <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      bucket<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      bucket<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> bucket<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span>\n      b<span class=\"br0\">[</span><span class=\"sy2\">--</span>bucket<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">/</span> <span class=\"kw3\">exp</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n    <span class=\"kw3\">exp</span> <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span>\n \n    <span class=\"co2\">#ifdef SHOWPASS</span>\n      <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>PASS   : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n      print<span class=\"br0\">(</span>a, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n    <span class=\"co2\">#endif</span>\n  <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n \n \n<span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n  <span class=\"kw4\">int</span> arr<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"sy4\">;</span>\n  <span class=\"kw4\">int</span> i, n<span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter total elements (n &lt; %d) : \"</span>, MAX<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, <span class=\"sy3\">&amp;</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter %d Elements : \"</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span>\n    <span class=\"kw3\">scanf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>, <span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>ARRAY  : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  print<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  radixsort<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>SORTED : \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  print<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, n<span class=\"br0\">)</span><span class=\"sy4\">;</span>\n  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>\n \n  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span>\n<span class=\"br0\">}</span>\n</pre>',11,1),(41,16,'<pre class=\"de1\">\n<span class=\"co1\">#python2.6 &lt;</span>\n<span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> log\n \n<span class=\"kw1\">def</span> getDigit<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span>:\n    <span class=\"co1\"># pulls the selected digit</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>num // base ** digit_num<span class=\"br0\">)</span> % base  \n \n<span class=\"kw1\">def</span> makeBlanks<span class=\"br0\">(</span>size<span class=\"br0\">)</span>:\n    <span class=\"co1\"># create a list of empty lists to hold the split by digit</span>\n    <span class=\"kw1\">return</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span> <span class=\"br0\">]</span>  \n \n<span class=\"kw1\">def</span> split<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span>:\n    buckets <span class=\"sy0\">=</span> makeBlanks<span class=\"br0\">(</span>base<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> a_list:\n        <span class=\"co1\"># append the number to the list selected by the digit</span>\n        buckets<span class=\"br0\">[</span>getDigit<span class=\"br0\">(</span>num<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>  \n    <span class=\"kw1\">return</span> buckets\n \n<span class=\"co1\"># concatenate the lists back in order for the next step</span>\n<span class=\"kw1\">def</span> merge<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>: \n    new_list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n    <span class=\"kw1\">for</span> sublist <span class=\"kw1\">in</span> a_list:\n       new_list.<span class=\"me1\">extend</span><span class=\"br0\">(</span>sublist<span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> new_list\n \n<span class=\"kw1\">def</span> maxAbs<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>:\n    <span class=\"co1\"># largest abs value element of a list</span>\n    <span class=\"kw1\">return</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> a_list<span class=\"br0\">)</span>  \n \n<span class=\"kw1\">def</span> radixSort<span class=\"br0\">(</span>a_list<span class=\"sy0\">,</span> base<span class=\"br0\">)</span>:\n    <span class=\"co1\"># there are as many passes as there are digits in the longest number</span>\n    passes <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>log<span class=\"br0\">(</span>maxAbs<span class=\"br0\">(</span>a_list<span class=\"br0\">)</span><span class=\"sy0\">,</span> base<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> \n    new_list <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>a_list<span class=\"br0\">)</span>\n    <span class=\"kw1\">for</span> digit_num <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>passes<span class=\"br0\">)</span>:\n        new_list <span class=\"sy0\">=</span> merge<span class=\"br0\">(</span>split<span class=\"br0\">(</span>new_list<span class=\"sy0\">,</span> base<span class=\"sy0\">,</span> digit_num<span class=\"br0\">)</span><span class=\"br0\">)</span>\n    <span class=\"kw1\">return</span> new_list\n</pre>',2,1),(42,17,'<pre class=\"de1\">\n<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> factorial<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n        <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(43,18,'<pre class=\"de1\">\n<span class=\"coMULTI\">/* a[0] to a[n-1] is the array to sort */</span>\n<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span>\n<span class=\"kw4\">int</span> iMin<span class=\"sy0\">;</span>\n \n<span class=\"coMULTI\">/* advance the position through the entire array */</span>\n<span class=\"coMULTI\">/*   (could do j &lt; n-1 because single element is also min element) */</span>\n<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"coMULTI\">/* find the min element in the unsorted a[j .. n-1] */</span>\n \n    <span class=\"coMULTI\">/* assume the min is the first element */</span>\n    iMin <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span>\n    <span class=\"coMULTI\">/* test against elements after j to find the smallest */</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i <span class=\"sy0\">=</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        <span class=\"coMULTI\">/* if this element is less, then it is the new minimum */</span>  \n        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> a<span class=\"br0\">[</span>iMin<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n            <span class=\"coMULTI\">/* found new minimum; remember its index */</span>\n            iMin <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span>\n        <span class=\"br0\">}</span>\n    <span class=\"br0\">}</span>\n \n    <span class=\"coMULTI\">/* iMin is the index of the minimum element. Swap it with the current position */</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> iMin <span class=\"sy0\">!=</span> j <span class=\"br0\">)</span> <span class=\"br0\">{</span>\n        swap<span class=\"br0\">(</span>a<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>iMin<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n<span class=\"br0\">}</span>\n</pre>',1,1),(44,18,'<pre class=\"de1\">\nbingo<span class=\"br0\">(</span><span class=\"kw4\">array</span> A<span class=\"br0\">)</span>\n \n<span class=\"coMULTI\">{ This procedure sorts in ascending order. }</span>\n<span class=\"kw1\">begin</span>\n    max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n \n    <span class=\"coMULTI\">{ The first iteration is written to look very similar to the subsequent ones, but\n      without swaps. }</span>\n    nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span>\n        <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; nextValue <span class=\"kw1\">then</span>\n            nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>max<span class=\"br0\">]</span> <span class=\"sy3\">=</span> nextValue<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\n        max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n \n    <span class=\"kw1\">while</span> max &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span>\n        value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> nextValue<span class=\"sy1\">;</span>\n        nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span>\n             <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> value <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span>\n                 swap<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> A<span class=\"br0\">[</span>max<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>\n                 max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n             <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; nextValue <span class=\"kw1\">then</span>\n                 nextValue <span class=\"sy1\">:</span><span class=\"sy3\">=</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>\n        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>max<span class=\"br0\">]</span> <span class=\"sy3\">=</span> nextValue<span class=\"br0\">)</span> <span class=\"kw1\">do</span>\n            max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> max <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span>\n    <span class=\"kw1\">end</span><span class=\"sy1\">;</span>\n<span class=\"kw1\">end</span><span class=\"sy1\">;</span>\n</pre>',12,1),(45,19,'<pre class=\"de1\">\ndatatype <span class=\"sy0\">\'</span>a tree <span class=\"sy0\">=</span> Empty <span class=\"sy0\">|</span> Node <span class=\"kw1\">of</span> <span class=\"sy0\">\'</span>a <span class=\"sy0\">*</span> <span class=\"sy0\">\'</span>a forest\n<span class=\"kw1\">and</span>      <span class=\"sy0\">\'</span>a forest <span class=\"sy0\">=</span> Nil <span class=\"sy0\">|</span> Cons <span class=\"kw1\">of</span> <span class=\"sy0\">\'</span>a tree <span class=\"sy0\">*</span> <span class=\"sy0\">\'</span>a forest\n</pre>',13,1),(46,19,'<pre class=\"de1\">\nbool is_even<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> is_odd<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n \nbool is_odd<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n        <span class=\"kw1\">return</span> is_even<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n</pre>',1,1),(47,19,'<pre class=\"de1\">\n <span class=\"kw1\">def</span> f_tree<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>:\n     f_value<span class=\"br0\">(</span>tree.<span class=\"me1\">value</span><span class=\"br0\">)</span>\n     f_forest<span class=\"br0\">(</span>tree.<span class=\"me1\">children</span><span class=\"br0\">)</span>\n \n <span class=\"kw1\">def</span> f_forest<span class=\"br0\">(</span>forest<span class=\"br0\">)</span>:\n     <span class=\"kw1\">for</span> tree <span class=\"kw1\">in</span> forest:\n         f_tree<span class=\"br0\">(</span>tree<span class=\"br0\">)</span>\n</pre>',2,1),(48,19,'<pre class=\"de1\">\n<span class=\"kw1\">fun</span> size_tree Empty <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n  <span class=\"sy0\">|</span> size_tree <span class=\"br0\">(</span>Node <span class=\"br0\">(</span>_, f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> size_forest f\n<span class=\"kw1\">and</span> size_forest Nil <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n  <span class=\"sy0\">|</span> size_forest <span class=\"br0\">(</span>Cons <span class=\"br0\">(</span>t, f<span class=\"sy0\">\'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> size_tree t <span class=\"sy0\">+</span> size_forest f<span class=\"sy0\">\'</span>\n</pre>',13,1),(49,19,'<pre class=\"de1\">\n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves tree<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>leaf? tree<span class=\"br0\">)</span>\n      <span class=\"nu0\">1</span>\n      <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest <span class=\"br0\">(</span>children tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n<span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest forest<span class=\"br0\">)</span>\n  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> forest<span class=\"br0\">)</span>\n      <span class=\"nu0\">0</span>\n      <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves <span class=\"br0\">(</span><span class=\"kw1\">car</span> forest<span class=\"br0\">)</span><span class=\"br0\">)</span>\n         <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>leaves<span class=\"sy0\">-</span>in<span class=\"sy0\">-</span>forest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> forest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',14,1),(50,20,'<pre class=\"de1\">\n<span class=\"co1\"># Sort an array a[0...n-1].</span>\ngaps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">701</span><span class=\"sy0\">,</span> <span class=\"nu0\">301</span><span class=\"sy0\">,</span> <span class=\"nu0\">132</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>\n \nforeach <span class=\"br0\">(</span>gap <span class=\"kw1\">in</span> gaps<span class=\"br0\">)</span>\n<span class=\"br0\">{</span>\n    <span class=\"co1\"># Do an insertion sort for each gap size.</span>\n    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> gap<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\n    <span class=\"br0\">{</span>\n        temp <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\n        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> gap <span class=\"kw1\">and</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> temp<span class=\"sy0\">;</span> j -<span class=\"sy0\">=</span> gap<span class=\"br0\">)</span>\n        <span class=\"br0\">{</span>\n            a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>j - gap<span class=\"br0\">]</span>\n        <span class=\"br0\">}</span>\n        a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp\n    <span class=\"br0\">}</span>\n \n<span class=\"br0\">}</span>\n</pre>',2,1),(51,21,'<pre class=\"de1\">\n<span class=\"kw1\">data</span> Nested a <span class=\"sy0\">=</span> a :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">(</span>Nested <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> Epsilon\n<span class=\"kw1\">infixr</span> <span class=\"nu0\">5</span> :<span class=\"sy0\">&lt;</span>:\n \nnested <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> :<span class=\"sy0\">&lt;</span>: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span> :<span class=\"sy0\">&lt;</span>: Epsilon\n</pre>',15,1),(52,21,'<pre class=\"de1\">\n<span class=\"kw3\">length</span> <span class=\"sy0\">::</span> Nested a <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">Int</span>\n<span class=\"kw3\">length</span> Epsilon    <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\n<span class=\"kw3\">length</span> <span class=\"br0\">(</span><span class=\"sy0\">_</span> :<span class=\"sy0\">&lt;</span>: xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">length</span> xs\n</pre>',15,1),(53,22,'<pre class=\"de1\">\n<span class=\"co1\">%These choices depend on the problem being solved</span>\nx0 = <span class=\"nu0\">1</span>                      <span class=\"co1\">%The initial value</span>\nf<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = x^<span class=\"nu0\">2</span> - <span class=\"nu0\">2</span>              <span class=\"co1\">%The function whose root are are trying to find</span>\nfprime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">2</span>*x              <span class=\"co1\">%The derivative of f(x)</span>\ntolerance = <span class=\"nu0\">10</span>^-<span class=\"nu0\">10</span>          <span class=\"co1\">%10 digit accuracy is desired</span>\nepsilon = <span class=\"nu0\">10</span>^-<span class=\"nu0\">16000</span>         <span class=\"co1\">%Don\'t want to divide by a number smaller than this</span>\n \nmaxIterations = <span class=\"nu0\">20</span>          <span class=\"co1\">%Don\'t allow the iterations to continue indefinitely</span>\nhaveWeFoundSolution = false <span class=\"co1\">%Were we able to find the solution to the desired tolerance? not yet.</span>\n \n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span> = <span class=\"nu0\">1</span> : maxIterations \n    denominator = fprime<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>                          <span class=\"co1\">%Compute the denominator</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>denominator<span class=\"br0\">)</span> &lt; epsilon<span class=\"br0\">)</span>          <span class=\"co1\">%Don\'t want to divide by too small of a number</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"co2\">\'WARNING: denominator is too small\'</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    newtonX = x0 - f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>/denominator                  <span class=\"co1\">%Do Newton\'s computation</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>newtonX - x0<span class=\"br0\">)</span> &lt; tolerance<span class=\"br0\">)</span>       <span class=\"co1\">%If the result is within the desired tolerance</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The root is\", newtonX<span class=\"br0\">)</span><span class=\"br0\">)</span>                <span class=\"co1\">%Display the result of the Newton iteration</span>\n        haveWeFoundSolution = true\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Done, so leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    x0 = newtonX                                      <span class=\"co1\">%Update x0 to start the process again                  </span>\n \n<span class=\"kw1\">end</span>\n \n<span class=\"kw1\">if</span><span class=\"br0\">(</span>haveWeFoundSolution == false<span class=\"br0\">)</span>   <span class=\"co1\">%If we weren\'t able to find a solution to within the desired tolerance</span>\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"<span class=\"kw2\">Warning</span>: Not able to <span class=\"kw2\">find</span> solution to within the desired tolerance of \", tolerance<span class=\"br0\">)</span>;\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The last computed approximate root was \", newtonX<span class=\"br0\">)</span>\n<span class=\"kw1\">end</span>\n</pre>',16,1),(54,23,'<pre class=\"de1\">\n<span class=\"co1\">%These choices depend on the problem being solved</span>\nx0 = <span class=\"nu0\">1</span>                      <span class=\"co1\">%The initial value</span>\nf<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = x^<span class=\"nu0\">2</span> - <span class=\"nu0\">2</span>              <span class=\"co1\">%The function whose root are are trying to find</span>\nfprime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = <span class=\"nu0\">2</span>*x              <span class=\"co1\">%The derivative of f(x)</span>\ntolerance = <span class=\"nu0\">10</span>^-<span class=\"nu0\">10</span>          <span class=\"co1\">%10 digit accuracy is desired</span>\nepsilon = <span class=\"nu0\">10</span>^-<span class=\"nu0\">16000</span>         <span class=\"co1\">%Don\'t want to divide by a number smaller than this</span>\n \nmaxIterations = <span class=\"nu0\">20</span>          <span class=\"co1\">%Don\'t allow the iterations to continue indefinitely</span>\nhaveWeFoundSolution = false <span class=\"co1\">%Were we able to find the solution to the desired tolerance? not yet.</span>\n \n<span class=\"kw1\">for</span> <span class=\"kw2\"><span class=\"re0\">i</span></span> = <span class=\"nu0\">1</span> : maxIterations \n    denominator = fprime<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>                          <span class=\"co1\">%Compute the denominator</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>denominator<span class=\"br0\">)</span> &lt; epsilon<span class=\"br0\">)</span>          <span class=\"co1\">%Don\'t want to divide by too small of a number</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"co2\">\'WARNING: denominator is too small\'</span><span class=\"br0\">)</span>\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    newtonX = x0 - f<span class=\"br0\">(</span>x0<span class=\"br0\">)</span>/denominator                  <span class=\"co1\">%Do Newton\'s computation</span>\n \n    <span class=\"kw1\">if</span><span class=\"br0\">(</span>absoluteValue<span class=\"br0\">(</span>newtonX - x0<span class=\"br0\">)</span> &lt; tolerance<span class=\"br0\">)</span>       <span class=\"co1\">%If the result is within the desired tolerance</span>\n        <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The root is\", newtonX<span class=\"br0\">)</span><span class=\"br0\">)</span>                <span class=\"co1\">%Display the result of the Newton iteration</span>\n        haveWeFoundSolution = true\n        <span class=\"kw1\">break</span>;                                        <span class=\"co1\">%Done, so leave the loop</span>\n    <span class=\"kw1\">end</span>\n \n    x0 = newtonX                                      <span class=\"co1\">%Update x0 to start the process again                  </span>\n \n<span class=\"kw1\">end</span>\n \n<span class=\"kw1\">if</span><span class=\"br0\">(</span>haveWeFoundSolution == false<span class=\"br0\">)</span>   <span class=\"co1\">%If we weren\'t able to find a solution to within the desired tolerance</span>\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"<span class=\"kw2\">Warning</span>: Not able to <span class=\"kw2\">find</span> solution to within the desired tolerance of \", tolerance<span class=\"br0\">)</span>;\n    <span class=\"kw2\">print</span><span class=\"br0\">(</span>\"The last computed approximate root was \", newtonX<span class=\"br0\">)</span>\n<span class=\"kw1\">end</span>\n</pre>',16,1),(55,24,'<pre class=\"de1\">\n <span class=\"kw3\">map</span> f <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"sy0\">.</span> f<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>\n</pre>',15,1),(56,24,'<pre class=\"de1\">\n <span class=\"kw3\">foldl</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a\n <span class=\"kw3\">foldl</span> f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\n <span class=\"kw3\">foldl</span> f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl</span> f <span class=\"br0\">(</span>f z x<span class=\"br0\">)</span> xs\n</pre>',15,1),(57,24,'<pre class=\"de1\">\n <span class=\"kw3\">foldr</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> b\n <span class=\"kw3\">foldr</span> f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\n <span class=\"kw3\">foldr</span> f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span><span class=\"kw3\">foldr</span> f z xs<span class=\"br0\">)</span>\n</pre>',15,1),(58,24,'<pre class=\"de1\">\nfoldt f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\nfoldt f <span class=\"sy0\">_</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>    <span class=\"sy0\">=</span> x\nfoldt f z xs     <span class=\"sy0\">=</span> foldt f z <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span>\n \nfoldi f z <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> z\nfoldi f z <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>foldi f z <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span><span class=\"br0\">)</span>\n \npairs f <span class=\"br0\">(</span>x:y:t<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> f x y : pairs f t\npairs <span class=\"sy0\">_</span> t        <span class=\"sy0\">=</span> t\n</pre>',15,1),(59,24,'<pre class=\"de1\">\n<span class=\"kw3\">foldl1</span> f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\n<span class=\"kw3\">foldl1</span> f <span class=\"br0\">(</span>x:y:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl1</span> f <span class=\"br0\">(</span>f x y : xs<span class=\"br0\">)</span>\n \n<span class=\"kw3\">foldr1</span> f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\n<span class=\"kw3\">foldr1</span> f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span>   <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span><span class=\"kw3\">foldr1</span> f xs<span class=\"br0\">)</span>\n \nfoldt1 f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\nfoldt1 f <span class=\"br0\">(</span>x:y:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> foldt1 f <span class=\"br0\">(</span>f x y : pairs f xs<span class=\"br0\">)</span>\n \nfoldi1 f <span class=\"br0\">[</span>x<span class=\"br0\">]</span>      <span class=\"sy0\">=</span> x\nfoldi1 f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span>   <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>foldi1 f <span class=\"br0\">(</span>pairs f xs<span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',15,1),(60,24,'<pre class=\"de1\">\n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> <span class=\"kw3\">foldl</span> <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> foldt <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">+</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">+</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n \n Prelude<span class=\"sy0\">&gt;</span> <span class=\"kw3\">putStrLn</span> <span class=\"sy0\">$</span> foldi <span class=\"br0\">(</span>\\x y <span class=\"sy0\">-&gt;</span> <span class=\"kw3\">concat</span> <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>y<span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">(</span><span class=\"kw3\">map</span> <span class=\"kw3\">show</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\n <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\n</pre>',15,1),(61,24,'<pre class=\"de1\">\n primes <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> : <span class=\"nu0\">3</span> : <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> `minus` unionAll <span class=\"br0\">[</span><span class=\"br0\">[</span>p<span class=\"sy0\">*</span>p<span class=\"sy0\">,</span> p<span class=\"sy0\">*</span>p<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> p <span class=\"sy0\">&lt;-</span> <span class=\"kw3\">tail</span> primes<span class=\"br0\">]</span><span class=\"br0\">)</span> \n   <span class=\"kw1\">where</span> unionAll s <span class=\"sy0\">=</span> foldi <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> ys <span class=\"sy0\">-&gt;</span> x : union xs ys<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> s\n</pre>',15,1),(62,24,'<pre class=\"de1\">\n mergesort xs <span class=\"sy0\">=</span> foldt merge <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> xs<span class=\"br0\">]</span>\n nubsort   xs <span class=\"sy0\">=</span> foldt union <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> xs<span class=\"br0\">]</span>\n</pre>',15,1),(63,24,'<pre class=\"de1\">\n<span class=\"kw3\">head</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\a b <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> \n<span class=\"kw3\">last</span> <span class=\"sy0\">=</span> <span class=\"kw3\">foldl</span> <span class=\"br0\">(</span>\\a b <span class=\"sy0\">-&gt;</span> b<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> \n</pre>',15,1),(64,24,'<pre class=\"de1\">\n g <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v\n g <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x <span class=\"br0\">(</span>g xs<span class=\"br0\">)</span>\n</pre>',15,1),(65,24,'<pre class=\"de1\">\nfix f <span class=\"sy0\">=</span> <span class=\"kw3\">foldr</span> <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">)</span> <span class=\"kw3\">undefined</span> <span class=\"br0\">(</span><span class=\"kw3\">repeat</span> <span class=\"kw3\">undefined</span><span class=\"br0\">)</span>\n</pre>',15,1),(66,25,'<pre class=\"de1\">\n<span class=\"kw4\">double</span> phi <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>\n<span class=\"kw4\">double</span> resphi <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> phi<span class=\"sy0\">;</span>\n \n<span class=\"co1\">// a and c are the current bounds; the minimum is between them.</span>\n<span class=\"co1\">// b is a center point</span>\n<span class=\"co1\">// f(x) is some mathematical function elsewhere defined</span>\n<span class=\"co1\">// a corresponds to x1; b corresponds to x2; c corresponds to x3</span>\n<span class=\"co1\">// x corresponds to x4</span>\n \n<span class=\"kw1\">public</span> <span class=\"kw4\">double</span> goldenSectionSearch<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b, <span class=\"kw4\">double</span> c, <span class=\"kw4\">double</span> tau<span class=\"br0\">)</span> <span class=\"br0\">{</span>\n    <span class=\"kw4\">double</span> x<span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span>\n      x <span class=\"sy0\">=</span> b <span class=\"sy0\">+</span> resphi <span class=\"sy0\">*</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">else</span>\n      x <span class=\"sy0\">=</span> b <span class=\"sy0\">-</span> resphi <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> tau <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \n      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> \n    <span class=\"kw1\">assert</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>b, x, c, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>a, x, b, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>\n      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> b <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>a, b, x, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n      <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> goldenSectionSearch<span class=\"br0\">(</span>x, b, c, tau<span class=\"br0\">)</span><span class=\"sy0\">;</span>\n    <span class=\"br0\">}</span>\n  <span class=\"br0\">}</span>\n</pre>',7,1);
/*!40000 ALTER TABLE `algorithm_implementation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementationquestion`
--

DROP TABLE IF EXISTS `algorithm_implementationquestion`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementationquestion` (
  `question_ptr_id` int(11) NOT NULL,
  PRIMARY KEY (`question_ptr_id`),
  CONSTRAINT `question_ptr_id_refs_id_4a6e9acc` FOREIGN KEY (`question_ptr_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementationquestion`
--

LOCK TABLES `algorithm_implementationquestion` WRITE;
/*!40000 ALTER TABLE `algorithm_implementationquestion` DISABLE KEYS */;
INSERT INTO `algorithm_implementationquestion` VALUES (4),(5),(6);
/*!40000 ALTER TABLE `algorithm_implementationquestion` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_implementationquestionanswer`
--

DROP TABLE IF EXISTS `algorithm_implementationquestionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_implementationquestionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `implementation_id` int(11) NOT NULL,
  `implementation_question_id` int(11) NOT NULL,
  `question_answer_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_implementationquestionanswer_6340c63c` (`user_id`),
  KEY `algorithm_implementationquestionanswer_b3719bb6` (`implementation_id`),
  KEY `algorithm_implementationquestionanswer_b4d1904d` (`implementation_question_id`),
  KEY `algorithm_implementationquestionanswer_6ed5681d` (`question_answer_id`),
  CONSTRAINT `implementation_id_refs_id_a8cbae5a` FOREIGN KEY (`implementation_id`) REFERENCES `algorithm_implementation` (`id`),
  CONSTRAINT `implementation_question_id_refs_question_ptr_id_7a2dd5f5` FOREIGN KEY (`implementation_question_id`) REFERENCES `algorithm_implementationquestion` (`question_ptr_id`),
  CONSTRAINT `question_answer_id_refs_id_487687c3` FOREIGN KEY (`question_answer_id`) REFERENCES `algorithm_questionanswer` (`id`),
  CONSTRAINT `user_id_refs_id_376352f9` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_implementationquestionanswer`
--

LOCK TABLES `algorithm_implementationquestionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_implementationquestionanswer` DISABLE KEYS */;
/*!40000 ALTER TABLE `algorithm_implementationquestionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_interest`
--

DROP TABLE IF EXISTS `algorithm_interest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_interest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `classification_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_interest_d3dde821` (`classification_id`),
  KEY `algorithm_interest_6340c63c` (`user_id`),
  CONSTRAINT `classification_id_refs_id_fe0553e8` FOREIGN KEY (`classification_id`) REFERENCES `algorithm_classification` (`id`),
  CONSTRAINT `user_id_refs_id_551022bb` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_interest`
--

LOCK TABLES `algorithm_interest` WRITE;
/*!40000 ALTER TABLE `algorithm_interest` DISABLE KEYS */;
INSERT INTO `algorithm_interest` VALUES (8,6,3);
/*!40000 ALTER TABLE `algorithm_interest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_proeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_proeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_proeficiencyscale` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `value` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_proeficiencyscale_6340c63c` (`user_id`),
  CONSTRAINT `user_id_refs_id_00718f22` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_proeficiencyscale`
--

LOCK TABLES `algorithm_proeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_proeficiencyscale` DISABLE KEYS */;
INSERT INTO `algorithm_proeficiencyscale` VALUES (16,3,1),(17,3,1),(18,3,1);
/*!40000 ALTER TABLE `algorithm_proeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_programminglanguage`
--

DROP TABLE IF EXISTS `algorithm_programminglanguage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_programminglanguage` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_programminglanguage`
--

LOCK TABLES `algorithm_programminglanguage` WRITE;
/*!40000 ALTER TABLE `algorithm_programminglanguage` DISABLE KEYS */;
INSERT INTO `algorithm_programminglanguage` VALUES (1,'C'),(2,'PYTHON'),(3,'PHP'),(4,'BASH'),(5,'TEXT'),(6,'CSHARP'),(7,'JAVA'),(8,'BNF'),(9,'LUA'),(10,'JAVASCRIPT'),(11,'CPP'),(12,'PASCAL'),(13,'OCAML'),(14,'SCHEME'),(15,'HASKELL'),(16,'MATLAB');
/*!40000 ALTER TABLE `algorithm_programminglanguage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_programminglanguageproeficiencyscale`
--

DROP TABLE IF EXISTS `algorithm_programminglanguageproeficiencyscale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_programminglanguageproeficiencyscale` (
  `proeficiencyscale_ptr_id` int(11) NOT NULL,
  `programming_language_id` int(11) NOT NULL,
  PRIMARY KEY (`proeficiencyscale_ptr_id`),
  KEY `algorithm_programminglanguageproeficiencyscale_4a49299f` (`programming_language_id`),
  CONSTRAINT `proeficiencyscale_ptr_id_refs_id_f868141a` FOREIGN KEY (`proeficiencyscale_ptr_id`) REFERENCES `algorithm_proeficiencyscale` (`id`),
  CONSTRAINT `programming_language_id_refs_id_11fd400d` FOREIGN KEY (`programming_language_id`) REFERENCES `algorithm_programminglanguage` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_programminglanguageproeficiencyscale`
--

LOCK TABLES `algorithm_programminglanguageproeficiencyscale` WRITE;
/*!40000 ALTER TABLE `algorithm_programminglanguageproeficiencyscale` DISABLE KEYS */;
INSERT INTO `algorithm_programminglanguageproeficiencyscale` VALUES (18,8),(17,11);
/*!40000 ALTER TABLE `algorithm_programminglanguageproeficiencyscale` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_question`
--

DROP TABLE IF EXISTS `algorithm_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_question` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `text` longtext NOT NULL,
  `priority` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_question`
--

LOCK TABLES `algorithm_question` WRITE;
/*!40000 ALTER TABLE `algorithm_question` DISABLE KEYS */;
INSERT INTO `algorithm_question` VALUES (3,'What is your profile',2),(4,'How much readable is this code',4),(5,'This code compiles',3),(6,'How is this code\'s performance scalability',5);
/*!40000 ALTER TABLE `algorithm_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_questionanswer`
--

DROP TABLE IF EXISTS `algorithm_questionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_questionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question_id` int(11) NOT NULL,
  `value` int(11) NOT NULL,
  `text` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_questionanswer_25110688` (`question_id`),
  CONSTRAINT `question_id_refs_id_17115741` FOREIGN KEY (`question_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_questionanswer`
--

LOCK TABLES `algorithm_questionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_questionanswer` DISABLE KEYS */;
INSERT INTO `algorithm_questionanswer` VALUES (5,3,10,'Professor, UFRJ, IT'),(6,3,8,'Professional, UFRJ, IT'),(7,3,6,'Student, UFRJ, IT'),(8,3,4,'Professor, non-UFRJ, IT'),(9,3,2,'Professional, non-UFRJ, IT'),(10,3,1,'Student, non-UFRJ, IT'),(11,3,0,'non-IT'),(12,4,1,'1'),(13,4,2,'2'),(14,4,3,'3'),(15,4,4,'4'),(16,4,5,'5'),(17,5,0,'No'),(18,5,1,'Yes'),(22,6,1,'1'),(23,6,2,'2'),(24,6,3,'3'),(25,6,4,'4'),(26,6,5,'5');
/*!40000 ALTER TABLE `algorithm_questionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_userquestion`
--

DROP TABLE IF EXISTS `algorithm_userquestion`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_userquestion` (
  `question_ptr_id` int(11) NOT NULL,
  PRIMARY KEY (`question_ptr_id`),
  CONSTRAINT `question_ptr_id_refs_id_66daba40` FOREIGN KEY (`question_ptr_id`) REFERENCES `algorithm_question` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_userquestion`
--

LOCK TABLES `algorithm_userquestion` WRITE;
/*!40000 ALTER TABLE `algorithm_userquestion` DISABLE KEYS */;
INSERT INTO `algorithm_userquestion` VALUES (3);
/*!40000 ALTER TABLE `algorithm_userquestion` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `algorithm_userquestionanswer`
--

DROP TABLE IF EXISTS `algorithm_userquestionanswer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `algorithm_userquestionanswer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `user_question_id` int(11) NOT NULL,
  `question_answer_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `algorithm_userquestionanswer_6340c63c` (`user_id`),
  KEY `algorithm_userquestionanswer_b9a81bdf` (`user_question_id`),
  KEY `algorithm_userquestionanswer_6ed5681d` (`question_answer_id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algorithm_userquestionanswer`
--

LOCK TABLES `algorithm_userquestionanswer` WRITE;
/*!40000 ALTER TABLE `algorithm_userquestionanswer` DISABLE KEYS */;
INSERT INTO `algorithm_userquestionanswer` VALUES (1,3,1,3),(2,3,3,7);
/*!40000 ALTER TABLE `algorithm_userquestionanswer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group_permissions_5f412f9a` (`group_id`),
  KEY `auth_group_permissions_83d7f98b` (`permission_id`),
  CONSTRAINT `group_id_refs_id_f4b32aac` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `permission_id_refs_id_6ba0f519` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  KEY `auth_permission_37ef4eb4` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_d043b34a` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add permission',1,'add_permission'),(2,'Can change permission',1,'change_permission'),(3,'Can delete permission',1,'delete_permission'),(4,'Can add group',2,'add_group'),(5,'Can change group',2,'change_group'),(6,'Can delete group',2,'delete_group'),(7,'Can add user',3,'add_user'),(8,'Can change user',3,'change_user'),(9,'Can delete user',3,'delete_user'),(10,'Can add log entry',4,'add_logentry'),(11,'Can change log entry',4,'change_logentry'),(12,'Can delete log entry',4,'delete_logentry'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(22,'Can add programming language',8,'add_programminglanguage'),(23,'Can change programming language',8,'change_programminglanguage'),(24,'Can delete programming language',8,'delete_programminglanguage'),(25,'Can add classification',9,'add_classification'),(26,'Can change classification',9,'change_classification'),(27,'Can delete classification',9,'delete_classification'),(28,'Can add algorithm',10,'add_algorithm'),(29,'Can change algorithm',10,'change_algorithm'),(30,'Can delete algorithm',10,'delete_algorithm'),(31,'Can add implementation',11,'add_implementation'),(32,'Can change implementation',11,'change_implementation'),(33,'Can delete implementation',11,'delete_implementation'),(34,'Can add interest',12,'add_interest'),(35,'Can change interest',12,'change_interest'),(36,'Can delete interest',12,'delete_interest'),(37,'Can add proeficiency scale',13,'add_proeficiencyscale'),(38,'Can change proeficiency scale',13,'change_proeficiencyscale'),(39,'Can delete proeficiency scale',13,'delete_proeficiencyscale'),(40,'Can add programming language proeficiency scale',14,'add_programminglanguageproeficiencyscale'),(41,'Can change programming language proeficiency scale',14,'change_programminglanguageproeficiencyscale'),(42,'Can delete programming language proeficiency scale',14,'delete_programminglanguageproeficiencyscale'),(43,'Can add classification proeficiency scale',15,'add_classificationproeficiencyscale'),(44,'Can change classification proeficiency scale',15,'change_classificationproeficiencyscale'),(45,'Can delete classification proeficiency scale',15,'delete_classificationproeficiencyscale'),(46,'Can add question',16,'add_question'),(47,'Can change question',16,'change_question'),(48,'Can delete question',16,'delete_question'),(49,'Can add question answer',17,'add_questionanswer'),(50,'Can change question answer',17,'change_questionanswer'),(51,'Can delete question answer',17,'delete_questionanswer'),(52,'Can add user question',18,'add_userquestion'),(53,'Can change user question',18,'change_userquestion'),(54,'Can delete user question',18,'delete_userquestion'),(55,'Can add implementation question',19,'add_implementationquestion'),(56,'Can change implementation question',19,'change_implementationquestion'),(57,'Can delete implementation question',19,'delete_implementationquestion'),(58,'Can add implementation question answer',20,'add_implementationquestionanswer'),(59,'Can change implementation question answer',20,'change_implementationquestionanswer'),(60,'Can delete implementation question answer',20,'delete_implementationquestionanswer');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime NOT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(75) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$10000$oZDCt5JkLYcc$lTjRDrsosNQTAMP8Zg5oOPeluUwM1UWWUudsxwUJgvQ=','2013-07-02 14:35:26',1,'alfa','','','andreluiz90@ig.com.br',1,1,'2013-07-02 00:57:31'),(2,'pbkdf2_sha256$10000$sLROf1OuAyEM$bWgN5w+EHGGiNJLZJvSrrSKG6WwzH3yTlxbeXJBmn9w=','2013-07-06 22:03:26',0,'andre','','','',0,1,'2013-07-02 15:02:52'),(3,'pbkdf2_sha256$10000$2lxujVtBVaBq$SNm0T3i4/+pW8fbaTtuK45cxvAl+8HO7uuNYxtgc+ZE=','2013-07-04 18:26:24',1,'wakim','','','wakim.jrage@gmail.com',1,1,'2013-07-02 19:32:37');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_6340c63c` (`user_id`),
  KEY `auth_user_groups_5f412f9a` (`group_id`),
  CONSTRAINT `group_id_refs_id_274b862c` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `user_id_refs_id_40c41112` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_user_permissions_6340c63c` (`user_id`),
  KEY `auth_user_user_permissions_83d7f98b` (`permission_id`),
  CONSTRAINT `permission_id_refs_id_35d9ac25` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `user_id_refs_id_4dc23c39` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `user_id` int(11) NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_6340c63c` (`user_id`),
  KEY `django_admin_log_37ef4eb4` (`content_type_id`),
  CONSTRAINT `content_type_id_refs_id_93d2d1f8` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `user_id_refs_id_c0d12874` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2013-07-02 19:33:45',3,12,'1','Interest object',1,''),(2,'2013-07-02 19:34:32',3,12,'2','Interest object',1,''),(3,'2013-07-02 19:34:37',3,12,'3','Interest object',1,''),(4,'2013-07-02 19:34:40',3,12,'3','Interest object',2,'No fields changed.');
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `app_label` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'permission','auth','permission'),(2,'group','auth','group'),(3,'user','auth','user'),(4,'log entry','admin','logentry'),(5,'content type','contenttypes','contenttype'),(6,'session','sessions','session'),(7,'site','sites','site'),(8,'programming language','algorithm','programminglanguage'),(9,'classification','algorithm','classification'),(10,'algorithm','algorithm','algorithm'),(11,'implementation','algorithm','implementation'),(12,'interest','algorithm','interest'),(13,'proeficiency scale','algorithm','proeficiencyscale'),(14,'programming language proeficiency scale','algorithm','programminglanguageproeficiencyscale'),(15,'classification proeficiency scale','algorithm','classificationproeficiencyscale'),(16,'question','algorithm','question'),(17,'question answer','algorithm','questionanswer'),(18,'user question','algorithm','userquestion'),(19,'implementation question','algorithm','implementationquestion'),(20,'implementation question answer','algorithm','implementationquestionanswer');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_b7b81f0c` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('14uceuhgki0epiztdtp5gp0ypq1puizv','MTFjMGIxYWY2MzA5NzYxMjU0ZDBjOWI4MmRmM2Q3YzJlOWQwOThjODqAAn1xAShVEl9hdXRoX3VzZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHEDVQ1fYXV0aF91c2VyX2lkcQSKAQJ1Lg==','2013-07-20 22:03:26'),('f3ewm124eq10lk3re58vyastb145ygl2','Mjg3ZTFjNjZlOWFiNDgwYTQ4Mjk4MzJhMjhhYmMwMWFiZmU1MGY4ODqAAn1xAVgKAAAAdGVzdGNvb2tpZXECWAYAAAB3b3JrZWRxA3Mu','2013-07-16 15:26:27'),('qrm823d427z200oij1zrn6x3k2561l59','NTYxZTM3MGQ4YWIzZGJhOGY3NDc3ZGI0Yzc5NDQyYzNjNGI0MGIwZjqAAn1xAS4=','2013-07-16 01:26:48'),('rivz4onq2hqneiujjvoxeyqoph4g6imp','YTlkOTE0YTNmYTRlZTczMzA3ZDNjY2ZkM2JjOGQyYmU3ODQxMDUwNzqAAn1xAShVEl9hdXRoX3VzZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHEDVQ1fYXV0aF91c2VyX2lkcQSKAQN1Lg==','2013-07-18 18:26:24');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_site`
--

LOCK TABLES `django_site` WRITE;
/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
INSERT INTO `django_site` VALUES (1,'example.com','example.com');
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-07-06 19:04:51
